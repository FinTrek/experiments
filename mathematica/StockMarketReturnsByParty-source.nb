(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    368469,       6848]
NotebookOptionsPosition[    364794,       6721]
NotebookOutlinePosition[    365411,       6745]
CellTagsIndexPosition[    365368,       6742]
WindowFrame->Normal
ContainsDynamic->True *)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Stock Market Returns by Party", "Section",
 CellFrameColor->RGBColor[
  0.6449835965514611, 0.758632791638056, 0.2516823071641108],
 FontColor->RGBColor[
  0.6449835965514611, 0.758632791638056, 0.2516823071641108]],

Cell[BoxData[
 RowBox[{
  RowBox[{"presidentsData", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "4", "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"yearToJanuary", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"yearToJanuary", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "4", "]"}], "]"}], "-", "1"}], "]"}], "+", 
           "11"}]}], "}"}]}], "}"}], "&"}], ",", GridBox[{
       {"\"\<Cleveland\>\"", "\"\<D\>\"", "1885", "1889"},
       {"\"\<Harrison\>\"", "\"\<R\>\"", "1889", "1893"},
       {"\"\<Cleveland\>\"", "\"\<D\>\"", "1893", "1897"},
       {"\"\<McKinley\>\"", "\"\<R\>\"", "1897", "1901"},
       {"\"\<Roosevelt\>\"", "\"\<R\>\"", "1901", "1909"},
       {"\"\<Taft\>\"", "\"\<R\>\"", "1909", "1913"},
       {"\"\<Wilson\>\"", "\"\<D\>\"", "1913", "1921"},
       {"\"\<Harding\>\"", "\"\<R\>\"", "1921", "1923"},
       {"\"\<Coolidge\>\"", "\"\<R\>\"", "1923", "1929"},
       {"\"\<Hoover\>\"", "\"\<R\>\"", "1929", "1933"},
       {"\"\<Roosevelt\>\"", "\"\<D\>\"", "1933", "1945"},
       {"\"\<Truman\>\"", "\"\<D\>\"", "1945", "1953"},
       {"\"\<Eisenhower\>\"", "\"\<R\>\"", "1953", "1961"},
       {"\"\<Kennedy\>\"", "\"\<D\>\"", "1961", "1963"},
       {"\"\<Johnson\>\"", "\"\<D\>\"", "1963", "1969"},
       {"\"\<Nixon\>\"", "\"\<R\>\"", "1969", "1974"},
       {"\"\<Ford\>\"", "\"\<R\>\"", "1974", "1977"},
       {"\"\<Carter\>\"", "\"\<D\>\"", "1977", "1981"},
       {"\"\<Reagan\>\"", "\"\<R\>\"", "1981", "1989"},
       {"\"\<Bush\>\"", "\"\<R\>\"", "1989", "1993"},
       {"\"\<Clinton\>\"", "\"\<D\>\"", "1993", "2001"},
       {"\"\<Bush\>\"", "\"\<R\>\"", "2001", "2009"}
      }]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.43306698787088*^9, 3.433067047160478*^9}, {
   3.433067347576985*^9, 3.4330676552803373`*^9}, {3.433071330137827*^9, 
   3.433071366890153*^9}, {3.4330714465023623`*^9, 3.433071477558866*^9}, {
   3.433085384935067*^9, 3.433085404727139*^9}, {3.433085477086375*^9, 
   3.433085703376985*^9}, {3.43308574204381*^9, 3.433085747518495*^9}, 
   3.433086401350972*^9, {3.4330865451835938`*^9, 3.433086557147242*^9}, {
   3.4330867500491533`*^9, 3.433086753861052*^9}},
 CellID->1211415192],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"yearToJanuary", "[", "year_", "]"}], ":=", 
   RowBox[{
    RowBox[{"12", 
     RowBox[{"(", 
      RowBox[{"year", "-", "1900"}], ")"}]}], "+", "1"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433065478410102*^9, 3.433065495248584*^9}},
 CellID->937914426],

Cell[BoxData[
 RowBox[{
  RowBox[{"yearToMonths", "[", "year_", "]"}], ":=", 
  RowBox[{"Range", "[", 
   RowBox[{
    RowBox[{"yearToJanuary", "[", "year", "]"}], ",", 
    RowBox[{
     RowBox[{"yearToJanuary", "[", "year", "]"}], "+", "11"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433064520209404*^9, 3.4330645546681137`*^9}, {
  3.433065500278388*^9, 3.4330655135922337`*^9}},
 CellID->997788802],

Cell[BoxData[{
 RowBox[{
  RowBox[{"republicanYears", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"Range", ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "&"}], ",", 
      RowBox[{"Select", "[", 
       RowBox[{"presidentsData", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "\"\<R\>\""}], ")"}], 
         "&"}]}], "]"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"democraticYears", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"Range", ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "&"}], ",", 
      RowBox[{"Select", "[", 
       RowBox[{"presidentsData", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "\"\<D\>\""}], ")"}], 
         "&"}]}], "]"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433065688426215*^9, 3.433065737344747*^9}, {
  3.4330672173348417`*^9, 3.433067217483006*^9}, {3.433071195498989*^9, 
  3.433071214511949*^9}, {3.433071499738963*^9, 3.433071500247263*^9}, {
  3.433086434554225*^9, 3.433086435359404*^9}, {3.433086484001129*^9, 
  3.433086524694005*^9}, {3.433086567581976*^9, 3.433086568617523*^9}, {
  3.4330867809343987`*^9, 3.433086782850524*^9}},
 CellID->136595791],

Cell[BoxData[{
 RowBox[{
  RowBox[{"republicanMonths", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"yearToMonths", ",", "republicanYears"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"democraticMonths", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"yearToMonths", ",", "democraticYears"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4330603313619013`*^9, 3.4330605159225693`*^9}, {
   3.433063735624404*^9, 3.4330637369055223`*^9}, {3.4330645153444033`*^9, 
   3.4330645183875237`*^9}, {3.4330645672237167`*^9, 3.433064581840563*^9}, {
   3.433064617446313*^9, 3.4330646179902554`*^9}, 3.433065516318769*^9, 
   3.433065706969632*^9, 3.433065765756188*^9, {3.433071530721794*^9, 
   3.4330715311510477`*^9}, {3.4330867997710876`*^9, 3.433086803337111*^9}},
 CellID->105440694],

Cell[BoxData[
 RowBox[{
  RowBox[{"accumulateOneMonth", "[", "data_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"yearToJanuary", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}], "]"}], "-", "1", "+",
      
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}]}], ",", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", " ", 
         RowBox[{"(", 
          RowBox[{"#2", "+", "1"}], ")"}]}], ")"}], "&"}], ",", "1", ",", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "data"}], "]"}]}], "]"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4330640031205387`*^9, 3.433064026213869*^9}, {
  3.433064284032522*^9, 3.4330642846867867`*^9}, {3.433064412155943*^9, 
  3.433064445179267*^9}, {3.433065599378418*^9, 3.4330656046238728`*^9}},
 CellID->467735283],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"dowJonesByMonth", "=", 
    RowBox[{"Map", "[", 
     RowBox[{"accumulateOneMonth", ",", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"-", "1"}]}], "]"}], ",", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", 
          RowBox[{"FinancialData", "[", 
           RowBox[{"\"\<^DJI\>\"", ",", "\"\<Return\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "1928", "}"}], ",", 
              RowBox[{"{", "2008", "}"}]}], "}"}]}], "]"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "===", 
           RowBox[{"First", "[", "#2", "]"}]}], ")"}], "&"}]}], "]"}]}], 
     "]"}]}], ";"}], "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433090357507575*^9, 3.433090383549985*^9}, {
   3.433090450710971*^9, 3.433090452328558*^9}, 3.433090652198833*^9, 
   3.433090908949153*^9, {3.43309094932377*^9, 3.433090952388023*^9}},
 CellID->579583723],

Cell[BoxData[
 RowBox[{
  RowBox[{"dowJonesByMonth", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "36"}], ",", 
     RowBox[{"Developer`ToPackedArray", "[", 
      RowBox[{"N", "[", 
       RowBox[{"{", 
        RowBox[{
        "0.8857538035961274`", ",", "0.9984384759525295`", ",", 
         "1.1276196434157022`", ",", "1.0929264909847436`", ",", 
         "1.0406091370558377`", ",", "0.9865853658536587`", ",", 
         "1.0398022249690977`", ",", "0.9816928197812649`", ",", 
         "0.9559215306369582`", ",", "0.9870787940207754`", ",", 
         "1.0174537987679673`", ",", "1.1125126135216952`", ",", 
         "1.0873015873015874`", ",", "1.1430656934306567`", ",", 
         "0.930122240467068`", ",", "0.9574342879560613`", ",", 
         "0.9723417332513827`", ",", "1.041087231352718`", ",", 
         "1.0121432908318153`", ",", "0.9232153569286143`", ",", 
         "0.9837556855100714`", ",", "1.0072655217965654`", ",", 
         "1.1527868852459018`", ",", "0.997724687144482`", ",", 
         "1.0266058532877234`", ",", "1.1171788226582746`", ",", 
         "0.8855012427506213`", ",", "1.037238023952096`", ",", 
         "1.0319321666967347`", ",", "1.058041958041958`", ",", 
         "1.0632848645076007`", ",", "1.037762237762238`", ",", 
         "1.113057801737047`", ",", "1.0372662451230996`", ",", 
         "0.8756160830090791`", ",", "1.0425122204117907`", ",", 
         "1.0475987496447856`", ",", "1.0261765902617657`", ",", 
         "0.9631245043616179`", ",", "1.0288184438040346`", ",", 
         "1.007736427904495`", ",", "0.870019854401059`", ",", 
         "1.0060855012931689`", ",", "0.9671858460607895`", ",", 
         "1.0223577235772356`", ",", "0.937910995565071`", ",", 
         "0.9636393282243602`", ",", "0.9277495769881556`", ",", 
         "1.0359292358198067`", ",", "1.017781690140845`", ",", 
         "0.9365161736723749`", ",", "1.0905060953084598`", ",", 
         "1.127879403794038`", ",", "1.0618711518245982`", ",", 
         "0.9448451421298263`", ",", "1.0028438856458612`", ",", 
         "1.036268656716418`", ",", "1.0917470833933456`", ",", 
         "0.999604221635884`", ",", "1.0092384848884783`", ",", 
         "0.9367072054400417`", ",", "1.025687561077761`", ",", 
         "0.9073091057574519`", ",", "0.9668466846684669`", ",", 
         "1.0190845616757176`", ",", "0.9829476248477467`", ",", 
         "1.0060408921933086`", ",", "0.9978444957659738`", ",", 
         "1.036722727974078`", ",", "0.9973210299151661`", ",", 
         "0.9911953439785104`", ",", "0.968232460102379`", ",", 
         "1.0234800186596174`", ",", "1.0069887572166516`", ",", 
         "0.9980386240193121`", ",", "0.9984882842025697`", ",", 
         "0.9408024224072673`", ",", "1.0345992919214677`", ",", 
         "1.0104215274537252`", ",", "1.018472906403941`", ",", 
         "0.9619105199516323`", ",", "1.0021998742928975`", ",", 
         "0.9449670743179681`", ",", "0.9802555168408826`", ",", 
         "0.8591740013540962`", ",", "1.0478723404255321`", ",", 
         "0.8610641097950742`", ",", "0.9786026200873363`", ",", 
         "0.9890673806336456`", ",", "1.107827656214753`", ",", "1.`", ",", 
         "0.9678273264100998`", ",", "1.033452556280244`", ",", 
         "0.9955211726384364`", ",", "0.985276073619632`", ",", 
         "1.0222083852220838`", ",", "1.0582741116751269`", ",", 
         "1.0470069071373753`", ",", "1.0553417628733737`", ",", 
         "1.0944608438965098`", ",", "1.1426304934158336`", ",", 
         "0.9726464870869203`", ",", "1.0182726623840115`", ",", 
         "1.0535539043880555`", ",", "1.06480372588157`", ",", 
         "0.9731317170707324`", ",", "0.954411198150764`", ",", 
         "1.0343110871905274`", ",", "1.0628333550149605`", ",", 
         "0.9869033047735617`", ",", "1.0094257720451447`", ",", 
         "1.0292419216119917`", ",", "1.0730571803748359`", ",", 
         "1.0742018022026922`", ",", "1.0427713338856668`", ",", 
         "0.9329625583474029`", ",", "1.0283159463487332`", ",", 
         "0.9371635610766046`", ",", "1.0355683198939576`", ",", 
         "0.9310933333333336`", ",", "1.0586550578531333`", ",", 
         "1.017314143490964`", ",", "1.0103180512711416`", ",", 
         "0.9782059380922298`", ",", "1.0237864600150686`", ",", 
         "0.9919049621530697`", ",", "0.9719130895601483`", ",", 
         "0.9873500545256272`", ",", "0.8852440910094986`", ",", 
         "1.0517779164067371`", ",", "0.9264531435349941`", ",", 
         "1.0243277848911652`", ",", "0.9858750000000002`", ",", 
         "0.9164447825535691`", ",", "0.9369120088544548`", ",", 
         "0.8520378027170704`", ",", "0.9967071057192374`", ",", 
         "1.0215614675708573`", ",", "1.0672340425531914`", ",", 
         "0.9740031897926635`", ",", "1.1054527591288685`", ",", 
         "1.030217745519182`", ",", "1.0461538461538464`", ",", 
         "0.9976635514018692`", ",", "1.1067640170822426`", ",", 
         "1.0537714712471993`", ",", "0.9441294590125209`", ",", 
         "1.0374077317652945`", ",", "1.052821997105644`", ",", 
         "0.9868270332187858`", ",", "0.9822402785838653`", ",", 
         "0.9612384779012052`", ",", "1.0587656749446768`", ",", 
         "1.02519739897817`", ",", "1.0440593498697477`", ",", 
         "1.0010848340203948`", ",", "1.0421543129605548`", ",", 
         "1.017988977851721`", ",", "1.0168539325842696`", ",", 
         "0.9941737820190858`", ",", "0.970192987774073`", ",", 
         "1.0315559258487816`", ",", "0.9279151943462896`", ",", 
         "0.993798280926994`", ",", "0.9821545872564046`", ",", 
         "0.9716865455356148`", ",", "0.9902489388551106`", ",", 
         "0.9404541241890642`", ",", "0.955530918945553`", ",", 
         "1.027201237591853`", ",", "1.0005020080321283`", ",", 
         "1.0633467134972403`", ",", "0.9734575911289373`", ",", 
         "0.9865487154629179`", ",", "1.0432379314580522`", ",", 
         "1.0010596962204166`", ",", "0.9794166078569747`", ",", 
         "1.000480365077459`", ",", "1.0268875285079822`", ",", 
         "1.0050263004091176`", ",", "1.000465224470807`", ",", 
         "0.9212973727040225`", ",", "0.9482649842271293`", ",", 
         "1.0085163007318696`", ",", "1.0683467475920305`", ",", 
         "1.007533654439916`", ",", "0.9829615101740622`", ",", 
         "1.0150891632373116`", ",", "1.0839066339066339`", ",", 
         "1.023461407684461`", ",", "0.9746400885935772`", ",", 
         "1.034996023179184`", ",", "0.9848501482050719`", ",", 
         "1.020733474529038`", ",", "1.0281751665392596`", ",", 
         "0.9634625597450874`", ",", "1.0060632785800907`", ",", 
         "0.962853385930309`", ",", "0.9527711391828837`", ",", 
         "0.9593884376493069`", ",", "1.0074701195219125`", ",", 
         "0.9705882352941176`", ",", "0.9979628214922331`", ",", 
         "0.9554733350344475`", ",", "1.0479369742288691`", ",", 
         "1.0424311926605503`", ",", "0.9823982398239824`", ",", 
         "0.9742441209406495`", ",", "0.9733077905491697`", ",", 
         "1.033722608581551`", ",", "1.0510281797410508`", ",", 
         "0.9903381642512078`", ",", "1.0047560975609757`", ",", 
         "0.9603107173200631`", ",", "1.0309656218402425`", ",", 
         "0.9888439377222019`", ",", "0.8854450781056286`", ",", 
         "0.7642117054046486`", ",", "1.035910589959692`", ",", 
         "0.9731163777856386`", ",", "1.1055979643765903`", ",", 
         "1.1800098635541674`", ",", "0.9056840345500141`", ",", 
         "1.077680356868174`", ",", "1.0780759349129316`", ",", 
         "1.0750695088044488`", ",", "1.1155172413793104`", ",", 
         "1.052550231839258`", ",", "1.0143696245017828`", ",", 
         "1.0252300692792888`", ",", "0.9135653050932929`", ",", 
         "1.0049679841024508`", ",", "1.024387564539163`", ",", 
         "0.9613941018766757`", ",", "1.0239821528165087`", ",", 
         "0.9758169934640522`", ",", "0.9963161419959813`", ",", 
         "1.0336134453781514`", ",", "1.1244444444444444`", ",", 
         "1.0084835630965006`", ",", "1.0130006691520885`", ",", 
         "0.8964801358875155`", ",", "1.0045263157894737`", ",", 
         "0.9594467148695377`", ",", "1.0563564875491482`", ",", 
         "0.9639164598842017`", ",", "1.0445135685938003`", ",", 
         "0.9794619018278907`", ",", "0.9619417068567835`", ",", 
         "0.908991825613079`", ",", "1.0007194244604316`", ",", 
         "0.8926431823628086`", ",", "0.9751677852348994`", ",", 
         "1.0238128011011698`", ",", "1.0728690508201129`", ",", 
         "1.0073934837092733`", ",", "0.9504913546461001`", ",", 
         "1.0143960214631595`", ",", "1.0073538898206682`", ",", 
         "1.0576331967213115`", ",", "0.9836522160329378`", ",", 
         "1.0151421888464853`", ",", "1.0269221440698522`", ",", 
         "1.009801606046292`", ",", "0.946439012980938`", ",", 
         "1.015692573829235`", ",", "0.9806569343065693`", ",", 
         "1.052102716784518`", ",", "1.0476358919938684`", ",", 
         "1.0453573438379293`", ",", "1.1358742463393625`", ",", 
         "1.0140284360189575`", ",", "1.0016825574873809`", ",", 
         "0.977510265024263`", ",", "1.0636754176610979`", ",", 
         "1.0673128702207861`", ",", "0.872182980154726`", ",", 
         "1.033841110682607`", ",", "0.9718362398582486`", ",", 
         "0.8749640149697727`", ",", "1.1275499012941435`", ",", 
         "0.9098336737671433`", ",", "0.9815052384006842`", ",", 
         "0.9885633373270886`", ",", "0.9570295284266197`", ",", 
         "0.9919410545705732`", ",", "0.9627437325905294`", ",", 
         "1.0256781193490052`", ",", "0.8937470615890928`", ",", 
         "0.9462125197264598`", ",", "1.058095899930507`", ",", 
         "0.9848942598187312`", ",", "1.0104027740730863`", ",", 
         "1.0370908130939809`", ",", "0.9347079037800687`", ",", 
         "0.9320533769063182`", ",", "0.9988312636961286`", ",", 
         "0.9815708644142166`", ",", "1.0591566085531217`", ",", 
         "1.0299662352279122`", ",", "1.055866684879115`", ",", 
         "1.0452781371280726`", ",", "1.0061881188118813`", ",", 
         "1.0511685116851166`", ",", "1.042007956938919`", ",", 
         "1.0323413812464908`", ",", "1.0402480147938646`", ",", 
         "0.9717661821604102`", ",", "1.0443344452813945`", ",", 
         "1.0384337970118496`", ",", "0.9636832704901765`", ",", 
         "0.9896004942339376`", ",", "0.9848090729372595`", ",", 
         "1.0371896460644479`", ",", "0.9924620556178061`", ",", 
         "1.0664066509288719`", ",", "0.9891241578440809`", ",", 
         "0.9572832538678602`", ",", "0.9913600325269364`", ",", 
         "0.906387778119553`", ",", "0.9831447963800904`", ",", 
         "1.0753653204464388`", ",", "0.9412582923175691`", ",", 
         "1.0063658065249517`", ",", "1.04303625889529`", ",", 
         "1.0344379467186484`", ",", "1.0538107202680067`", ",", 
         "0.9658255513610173`", ",", "0.9566961530549271`", ",", 
         "0.9744113536178904`", ",", "0.991945271984994`", ",", 
         "1.0719688542825363`", ",", "1.0598734045864895`", ",", 
         "1.0195809672997846`", ",", "0.9905895909352793`", ",", 
         "1.0087243117487399`", ",", "1.0676532769556024`", ",", 
         "1.084698469846985`", ",", "1.0247282383204712`", ",", 
         "0.9898777228925417`", ",", "0.9550883507853405`", ",", 
         "1.0279229122055678`", ",", "1.082826431130739`", ",", 
         "1.0081569834551751`", ",", "1.0213724143195178`", ",", 
         "1.0550780958074883`", ",", "1.0161495962600935`", ",", 
         "1.0849714206050467`", ",", "0.9706392547381947`", ",", 
         "1.0369340746624303`", ",", "1.0044044427422445`", ",", 
         "0.9830314585319353`", ",", "0.9080682699767261`", ",", 
         "1.0231382600028478`", ",", "0.9980516317584023`", ",", 
         "1.067001324688001`", ",", "1.0466544694197595`", ",", 
         "1.0145461355974528`", ",", "0.9734170204910467`", ",", 
         "0.9530311650546811`", ",", "1.0384054125762803`", ",", 
         "1.004152028106036`", ",", "0.9949745547073794`", ",", 
         "1.0354836647273193`", ",", "0.9883921956038527`", ",", 
         "1.028485757121439`", ",", "1.0505344995140917`", ",", 
         "0.9610892691951896`", ",", "1.091259098838958`", ",", 
         "1.0462513781697904`", ",", "1.0410980557458245`", ",", 
         "0.9197327799989876`", ",", "1.0906839817311398`", ",", 
         "1.012562433782352`", ",", "0.9894867962132536`", ",", 
         "0.9808147439448108`", ",", "1.1009857274874217`", ",", 
         "0.9868500816041035`", ",", "1.0386523649766102`", ",", 
         "0.9570538192074972`", ",", "1.0267623710605125`", ",", 
         "1.113009259259259`", ",", "0.9873965309263342`", ",", 
         "1.0622630381666527`", ",", "1.1634676395939088`", ",", 
         "1.0225645919967277`", ",", "1.0583666666666667`", ",", 
         "0.9996850492897862`", ",", "0.9730317255284963`", ",", 
         "1.0338028169014084`", ",", "0.9314729556202825`", ",", 
         "1.1151272653912105`", ",", "1.0483943916779739`", ",", 
         "1.0938452689099798`", ",", "0.9030315778402965`", ",", 
         "0.7963604600378512`", ",", "0.8736426456071075`", ",", 
         "1.0398828206737811`", ",", "1.075096587250483`", ",", 
         "1.014861121509321`", ",", "1.055291210209878`", ",", 
         "0.9759874169870675`", ",", "0.985101887333023`", ",", 
         "0.8228450939760787`", ",", "1.033798709905452`", ",", 
         "1.0274798068293516`", ",", "0.852258547541802`", ",", 
         "0.8948267447535382`", ",", "0.9866921188982822`", ",", 
         "0.9097341219390858`", ",", "1.0289221047514885`", ",", 
         "1.1240108657139483`", ",", "0.9055374592833877`", ",", 
         "0.8771756788117893`", ",", "0.8496593690058867`", ",", 
         "1.1690798692199906`", ",", "0.9015181781861764`", ",", 
         "1.0296920008863284`", ",", "0.6929918944121656`", ",", 
         "1.0761825897940172`", ",", "0.9028565932480523`", ",", 
         "0.8298710983274742`", ",", "0.9826700898587932`", ",", 
         "1.0638798171129982`", ",", "0.899803536345776`", ",", 
         "0.7632368995633187`", ",", "0.7999284820311103`", ",", 
         "0.9575324094769783`", ",", "1.2579365079365077`", ",", 
         "1.3575802560771943`", ",", "0.9781301257517769`", ",", 
         "0.8650083845723867`", ",", "0.9103392568659127`", ",", 
         "1.0693877551020408`", ",", "1.010620643876535`", ",", 
         "0.8438423645320197`", ",", "1.0780307452811833`", ",", 
         "1.3194945848375448`", ",", "1.2053351573187414`", ",", 
         "1.1138349790035182`", ",", "0.9249031995109027`", ",", 
         "1.1282362013881237`", ",", "0.9202226345083487`", ",", 
         "0.935483870967742`", ",", "1.113203266787659`", ",", 
         "1.0054004483391072`", ",", "1.0866524779568258`", ",", 
         "0.9649319156873717`", ",", "0.9695534506089311`", ",", 
         "1.001794437244542`", ",", "0.9354164593491889`", ",", 
         "1.0186170212765957`", ",", "0.9195822454308095`", ",", 
         "1.054628052243044`", ",", "0.9960155072151625`", ",", 
         "1.0094064223159263`", ",", "1.1026135389888603`", ",", 
         "1.010685836409559`", ",", "0.9774125336409074`", ",", 
         "1.0067853279575179`", ",", "0.9843719476460246`", ",", 
         "1.0860289740027782`", ",", "1.0108725445408864`", ",", 
         "1.0697758496023138`", ",", "1.0664920581277457`", ",", 
         "1.0088726927037945`", ",", "1.0358853553199845`", ",", 
         "1.059278350515464`", ",", "1.018605982539001`", ",", 
         "1.0125755233946887`", ",", "1.0371886491361966`", ",", 
         "1.0203358084152785`", ",", "1.024978692716187`", ",", 
         "0.9317513112447229`", ",", "1.0478478753346605`", ",", 
         "1.0330843815513628`", ",", "1.0454689580823135`", ",", 
         "1.0086740264466818`", ",", "1.0092007937939744`", ",", 
         "1.055595280657848`", ",", "1.0342647473892181`", ",", 
         "0.9818797074555179`", ",", "1.0269038354641469`", ",", 
         "1.0131536213056187`", ",", "0.9959395202222577`", ",", 
         "0.9348747384796954`", ",", "1.002524817811442`", ",", 
         "0.9691488752790336`", ",", "1.0867587999055044`", ",", 
         "0.9641323841095594`", ",", "0.8712586663660448`", ",", 
         "0.8959047680662483`", ",", "0.8916811091854421`", ",", 
         "0.9787010042112082`", ",", "1.0084402151427392`", ",", 
         "1.063756461803561`", ",", "0.7632675100277693`", ",", 
         "1.1284487114704396`", ",", "0.9648934264732223`", ",", 
         "1.242621124930388`", ",", "1.0546758291006872`", ",", 
         "0.9863314447592069`", ",", "1.0156530480361885`", ",", 
         "1.0726758571933546`", ",", "0.9874118499967046`", ",", 
         "1.0303030303030303`", ",", "0.9313293599378075`", ",", 
         "1.0246243739565946`", ",", "0.8950441276306857`", ",", 
         "0.9737560679611649`", ",", "1.0763358778625955`", ",", 
         "0.9453611231726734`", ",", "1.0966852943428003`", ",", 
         "0.9382242077341897`", ",", "1.117178781340674`", ",", 
         "1.0114544485881727`", ",", "0.9592441401106135`", ",", 
         "1.0295147230420758`", ",", "0.968931262084139`", ",", 
         "1.0083258790339227`", ",", "1.006824075337792`", ",", 
         "1.0060322624373053`", ",", "0.782995351344068`", ",", 
         "1.050249526759594`", ",", "1.033426183844011`", ",", 
         "1.021721896305692`", ",", "1.0291744258224704`", ",", 
         "1.014852231604343`", ",", "0.9659757818884182`", ",", 
         "1.008459586249327`", ",", "0.9466178601387937`", ",", 
         "0.9825988882623056`", ",", "1.006149053045831`", ",", 
         "0.9414928292046937`", ",", "1.005971957763545`", ",", 
         "1.0594510883592876`", ",", "1.045882735098262`", ",", 
         "0.9894401739265472`", ",", "0.9952130581495722`", ",", 
         "0.9290332755085949`", ",", "0.9731794262434222`", ",", 
         "0.9677306820163961`", ",", "0.9860310021629417`", ",", 
         "0.9741339914084634`", ",", "0.933852505160443`", ",", 
         "0.958002612277705`", ",", "1.0579968536969062`", ",", 
         "1.024385408406027`", ",", "1.0230307722082446`", ",", 
         "1.005769958380628`", ",", "1.0261450202200695`", ",", 
         "1.0402346256071853`", ",", "1.0088105726872247`", ",", 
         "1.0427947598253275`", ",", "1.0503350083752092`", ",", 
         "1.034287536879037`", ",", "1.0528872099298434`", ",", 
         "0.9920187449659517`", ",", "1.04207263064659`", ",", 
         "1.0155829437597392`", ",", "0.9572464778909192`", ",", 
         "0.9954098360655739`", ",", "1.0256185038793735`", ",", 
         "0.9869397659149299`", ",", "0.9369441029720154`", ",", 
         "1.0487767230068687`", ",", "1.0111119287659136`", ",", 
         "0.9919941775836972`", ",", "1.018635363169479`", ",", 
         "0.9810573321809278`", ",", "1.0442698773951986`", ",", 
         "1.0431664791901012`", ",", "0.9847014422428899`", ",", 
         "1.0060228594894258`", ",", "0.9953738349547588`", ",", 
         "1.0015036566195066`", ",", "1.0054596328396916`", ",", 
         "1.0312224258467384`", ",", "1.0114526426643848`", ",", 
         "1.0437951454415306`", ",", "0.9604738154613467`", ",", 
         "1.0738673244190575`", ",", "1.0172872340425534`", ",", 
         "0.9778371954842542`", ",", "0.989730813635535`", ",", 
         "1.0700515717092338`", ",", "1.033392621492914`", ",", 
         "1.0360335350619065`", ",", "1.0260450160771706`", ",", 
         "1.007573383474355`", ",", "1.0609610699289824`", ",", 
         "0.9287633751893292`", ",", "1.0498185070229893`", ",", 
         "1.0361294848667066`", ",", "1.0266479663394108`", ",", 
         "0.9686263425664217`", ",", "0.9802548390234413`", ",", 
         "0.9386286961698749`", ",", "0.9113589513187801`", ",", 
         "0.9810346827514211`", ",", "1.0037245048773276`", ",", 
         "1.043703616444811`", ",", "1.0182844243792326`", ",", 
         "0.9914653070272668`", ",", "0.9904974846282838`", ",", 
         "0.962979683972912`", ",", "0.9918541959681201`", ",", 
         "1.047562776957164`", ",", "1.0331641285956008`", ",", 
         "0.9763620482585434`", ",", "0.9923958624545709`", ",", 
         "1.0243393994027832`", ",", "0.9873494307243824`", ",", 
         "1.0091916884853211`", ",", "0.9646721130492382`", ",", 
         "0.9544518196383613`", ",", "1.0623501199040766`", ",", 
         "1.0186794582392777`", ",", "1.056672760511883`", ",", 
         "0.9932892943273566`", ",", "0.9570885675076534`", ",", 
         "1.0020956267578447`", ",", "0.9812338341313083`", ",", 
         "1.0559730790802018`", ",", "0.9092840450393029`", ",", 
         "1.0356308411214956`", ",", "1.0102650874224477`", ",", 
         "0.9661679321125504`", ",", "1.0233445047960246`", ",", 
         "0.9828345567476002`", ",", "0.9672526714925889`", ",", 
         "0.9944167260631978`", ",", "1.050770517261976`", ",", 
         "1.015575261482492`", ",", "1.0215493115414753`", ",", 
         "1.0385184373458989`", ",", "1.010604621715733`", ",", 
         "1.0468285043069694`", ",", "1.0063335328146819`", ",", 
         "1.0081768174835224`", ",", "1.0128293354305937`", ",", 
         "1.0364474642077166`", ",", "1.0461696946993817`", ",", 
         "0.9359502282696268`", ",", "1.0013868298981397`", ",", 
         "1.0356733524355302`", ",", "1.043758933923549`", ",", 
         "0.9940360487718677`", ",", "1.01151059952891`", ",", 
         "1.0343585237258348`", ",", "1.0569620253164558`", ",", 
         "1.0129405618293614`", ",", "0.9860345169609205`", ",", 
         "1.0426507866253572`", ",", "0.9634160460000772`", ",", 
         "0.9719206889645502`", ",", "1.062726673260798`", ",", 
         "1.0480493290933064`", ",", "1.0033672525439408`", ",", 
         "0.967509957220829`", ",", "0.9958833619210975`", ",", 
         "1.030466567152754`", ",", "1.0054228726367789`", ",", 
         "0.9608038715874248`", ",", "1.0360658258997233`", ",", 
         "0.9560973799450754`", ",", "1.020610953693281`", ",", 
         "1.0430516467635202`", ",", "1.0193247283599502`", ",", 
         "0.98383173558449`", ",", "0.983893251890634`", ",", 
         "0.9949004101843982`", ",", "1.0535972959922741`", ",", 
         "1.029048861312839`", ",", "0.9927029804727647`", ",", 
         "0.9810194292024709`", ",", "0.9845217574840822`", ",", 
         "0.9817057919748455`", ",", "0.991010009099181`", ",", 
         "0.985235786690172`", ",", "1.0265414150451055`", ",", 
         "0.9485801438012929`", ",", "1.0107954980476226`", ",", 
         "1.0445765793061657`", ",", "1.0201588049744388`", ",", 
         "0.9983296015922094`", ",", "1.0409042363830545`", ",", 
         "1.0073531926536476`", ",", "1.0304542676716235`", ",", 
         "1.0521234885176767`", ",", "1.0255535026461655`", ",", 
         "1.0184433112461448`", ",", "1.043144544718616`", ",", 
         "0.9651644056104851`", ",", "1.0734365693865395`", ",", 
         "0.9769183820673585`", ",", "1.0983415686942692`", ",", 
         "1.0455567908576158`", ",", "1.0109794999876356`", ",", 
         "1.0074358535332535`", ",", "0.9947313472697696`", ",", 
         "1.0389309250671224`", ",", "0.9981440150358276`", ",", 
         "1.0624205620675045`", ",", "1.0320572466657807`", ",", 
         "1.0050016099602879`", ",", "0.9966679482250416`", ",", 
         "0.9748189104624748`", ",", "1.0624134368061204`", ",", 
         "1.010636096511195`", ",", "0.9638411138411139`", ",", 
         "1.0274249054679865`", ",", "1.0581825700403185`", ",", 
         "1.008460501377518`", ",", "0.9262380841664728`", ",", 
         "1.0308126764982741`", ",", "1.050793457526685`", ",", 
         "0.9695448137347678`", ",", "0.9466377181101107`", ",", 
         "1.0096791162546028`", ",", "0.9852662290299051`", ",", 
         "1.0564533186683025`", ",", "0.9593368971109376`", ",", 
         "0.9696552299858086`", ",", "1.0219319013387285`", ",", 
         "1.0411743644826352`", ",", "1.021381179707096`", ",", 
         "0.9967520250331731`", ",", "1.010391623119871`", ",", 
         "0.9524699126878`", ",", "0.9420873335397957`", ",", 
         "0.9665570896340128`", ",", "1.0200208597859604`", ",", 
         "0.9684797830484361`", ",", "1.032890357823223`", ",", 
         "0.9775565530420872`", ",", "1.0155482815057282`", ",", 
         "1.0203688781448652`", ",", "1.0150046066774887`", ",", 
         "1.033455802896045`", ",", "1.0518842276966833`", ",", 
         "1.0112129465794548`", ",", "1.0461239014607868`", ",", 
         "1.020917513954406`", ",", "1.0262140569198486`", ",", 
         "1.0469809493057796`", ",", "1.017664696307719`", ",", 
         "1.0160616876557342`", ",", "0.9970339685169843`", ",", 
         "1.0366289408519054`", ",", "1.032128256513026`", ",", 
         "0.9997048727069385`", ",", "1.0486016159105034`", ",", 
         "0.9844861308677098`", ",", "0.9507382489727728`", ",", 
         "1.0236195542046607`", ",", "1.0194556139808226`", ",", 
         "1.0306137928942019`", ",", "0.9164802166745172`", ",", 
         "1.0120458706755326`", ",", "0.9785278994477243`", ",", 
         "0.97585105175238`", ",", "1.039554595313279`", ",", 
         "1.0241726618705038`", ",", "0.9627080016234272`", ",", 
         "1.015014674168599`", ",", "0.9267560184667487`", ",", 
         "1.0003792188092528`", ",", "1.0290509339030947`", ",", 
         "1.0312615116707409`", ",", "1.0524606666774912`", ",", 
         "1.0214131440913299`", ",", "1.0219761962300626`", ",", 
         "1.0030740582001982`", ",", "1.0265356337758396`", ",", 
         "0.9816856125846825`", ",", "1.0313030001754486`", ",", 
         "1.0206558260203866`", ",", "0.9739839431063699`", ",", 
         "1.0038647480783216`", ",", "1.0251164905102854`", ",", 
         "1.013220620842572`", ",", "0.9574089777607572`", ",", "1.0115`", 
         ",", "0.9984464373984888`", ",", "0.9411273781738455`", ",", 
         "0.9218883862143596`", ",", "0.9150906482326855`", ",", 
         "1.0652971778791336`", ",", "1.0188149114444836`", ",", 
         "0.9504251616927675`", ",", "1.0186362223220145`", ",", 
         "1.100937653661597`", ",", "1.0043123363622362`", ",", 
         "1.047155344272351`", ",", "0.9708427912425862`", ",", 
         "1.029535101215796`", ",", "1.0515442770907812`", ",", 
         "1.0129023268775255`", ",", "0.9723781225927149`", ",", 
         "0.9838020597555454`", ",", "1.048732438922681`", ",", 
         "1.0047578566335762`", ",", "1.030622688628393`", ",", 
         "0.9937634892681699`", ",", "1.0165618504503544`", ",", 
         "1.0293466151123927`", ",", "1.0188453408714697`", ",", 
         "1.0164346239408104`", ",", "0.9969014742588745`", ",", 
         "1.0120749411053689`", ",", "1.0133323583893927`", ",", 
         "1.0115453998797355`", ",", "0.9968850315063607`", ",", 
         "1.0439962789810133`", ",", "0.9973839633526395`", ",", 
         "1.00269162047006`", ",", "0.9985150154781078`", ",", 
         "1.0328669648679258`", ",", "1.000686706687637`", ",", 
         "0.9840284234294061`", ",", "1.0374107193071258`", ",", 
         "0.9953703201743449`", ",", "0.9455252494444686`", ",", 
         "1.0157943849866942`", ",", "1.0128836164855854`", ",", 
         "1.041966185197626`", ",", "1.032495862795246`", ",", 
         "0.9853146270893612`", ",", "1.0238193322136664`", ",", 
         "1.0147019375606132`", ",", "0.9678498439263455`", ",", 
         "0.9715093130508776`", ",", "1.0096348281194243`", ",", 
         "0.94686616399623`", ",", "0.9841980838621375`", ",", 
         "0.973888058843811`", ",", "0.9304090254667327`", ",", 
         "0.9820017503583162`", ",", "1.0424298003151562`", ",", 
         "0.9808195076015709`", ",", "0.9925466466226205`", ",", 
         "1.0817116165408747`", ",", "0.9876219275435646`", ",", 
         "1.0317023481897138`", ",", "1.0358784267535046`", ",", 
         "0.9504041023354328`", ",", "1.009031622407807`", ",", 
         "1.0511240787668843`", ",", "0.9967375917897903`", ",", 
         "1.028148542644432`", ",", "0.9493665422053398`", ",", 
         "0.9955327710459907`", ",", "1.0334547447505738`", ",", 
         "0.9451558374120274`", ",", "0.982500847487346`", ",", 
         "1.000202260559191`", ",", "1.085110685524641`", ",", 
         "0.9855078818706012`", ",", "0.9986651835372635`", ",", 
         "0.9835152595232791`", ",", "1.0147338618346546`", ",", 
         "1.044396825928282`", ",", "1.0177390226439693`", ",", 
         "1.0343241739203477`", ",", "0.9580440167296057`", ",", 
         "1.0024370860927152`", ",", "0.9568310343005126`", ",", 
         "1.0334397543111544`", ",", "1.0157138581263094`", ",", 
         "0.986718306005178`", ",", "0.9313430607107814`", ",", 
         "0.9338975480708666`", ",", "1.0260585919776326`", ",", 
         "0.9717587723491729`", ",", "1.0527616868981293`", ",", 
         "0.9489596841084593`", ",", "0.9853009971685339`", ",", 
         "0.9296566545054725`", ",", "1.0450635701421929`", ",", 
         "1.0102624776553197`", ",", "0.936988428784195`", ",", 
         "0.9515942777181517`", ",", "0.9758580320941121`", ",", 
         "1.0740128450836102`", ",", "1.0414918541927751`", ",", 
         "0.9948991603233147`", ",", "0.9933349108692224`", ",", 
         "1.0509257421156415`", ",", "1.0564545580475766`", ",", 
         "1.0352596195107995`", ",", "1.0118940702360393`", ",", 
         "1.029061365679369`", ",", "1.0413326404016057`", ",", 
         "0.9639607114414652`", ",", "0.9816371267115366`", ",", 
         "0.9632942074197095`", ",", "1.0461773237188823`", ",", 
         "0.9878851314485507`", ",", "0.9456824355549543`", ",", 
         "0.990870083432658`", ",", "1.0708013568455748`", ",", 
         "1.0134464165356099`", ",", "1.0287750645665452`", ",", 
         "1.013543361382565`", ",", "1.0143191240565534`", ",", 
         "1.0068646048398087`", ",", "0.9670143225913896`", ",", 
         "0.9953822804430429`", ",", "1.0421632026299283`", ",", 
         "0.989146337667189`", ",", "1.0023602966630651`", ",", 
         "1.0656082551908908`", ",", "1.001777629369187`", ",", 
         "0.9794121683888551`", ",", "0.956006886749014`", ",", 
         "0.9957490026909023`", ",", "0.9688962261174962`", ",", 
         "0.9782729019024776`", ",", "0.9892390809953296`", ",", 
         "1.0389027822946921`", ",", "0.9580850604490501`", ",", 
         "1.0670707662494225`", ",", "1.0100095026924296`", ",", 
         "0.8595726442116707`", ",", "1.0347947704469442`", ",", 
         "1.0055120701407987`", ",", "1.0058208170182923`", ",", 
         "0.9839052676838692`", ",", "0.988271838238768`", ",", 
         "0.9586734389005079`", ",", "1.0002991884513257`", ",", 
         "0.9439438690943533`", ",", "0.8958979707695763`", ",", 
         "0.8957971057207696`", ",", "1.0948393570993797`", ",", 
         "0.9295888928957808`", ",", "0.9960883199172406`", ",", 
         "1.141908996494872`", ",", "1.0502493995935709`", ",", 
         "1.0393748731479602`", ",", "1.0692442882249562`", ",", 
         "1.013331872306231`", ",", "1.0561102500330413`", ",", 
         "0.9459834582873524`", ",", "1.0046060780988806`", ",", 
         "0.9503675150238226`", ",", "1.0531062629112713`", ",", 
         "1.0294603129036888`", ",", "0.990402825705555`", ",", 
         "1.144144249832827`", ",", "0.9972623246657372`", ",", 
         "1.0275958503408356`", ",", "0.9973985692130674`", ",", 
         "0.9783116817976626`", ",", "1.0282497462137137`", ",", 
         "0.9819102893954806`", ",", "0.9889299642508937`", ",", 
         "1.016893626635447`", ",", "0.9744897443924901`", ",", 
         "0.9816463370399927`", ",", "1.0606300542640568`", ",", 
         "0.949952719852685`", ",", "0.9811917809654537`", ",", 
         "0.9815360628777685`", ",", "1.0084536463829925`", ",", 
         "0.9695328514402848`", ",", "1.019629225736096`", ",", 
         "0.9713740041471135`", ",", "0.9678901659420045`", ",", 
         "0.9833079896458462`", ",", "0.9660492734119536`", ",", 
         "1.0138693712959004`", ",", "1.0017717247197782`", ",", 
         "0.9263086973783943`", ",", "0.963892352452203`", ",", 
         "1.0205357624103917`", ",", "1.1055772684060423`", ",", 
         "1.0039292026943103`", ",", "0.9742329974661259`", ",", 
         "1.05289700225899`", ",", "1.0168740649680494`", ",", 
         "0.9874546657238658`", ",", "0.9152595227645468`", ",", 
         "1.008303362988201`", ",", "1.007484074440259`", ",", 
         "1.0424963665047642`", ",", "0.9637758871332904`", ",", 
         "1.0659726515170247`", ",", "0.9915562875501636`", ",", 
         "0.9619019768393965`", ",", "1.023895516398526`", ",", 
         "1.0052732844010548`", ",", "1.048687412868316`", ",", 
         "0.9898043103545396`", ",", "0.928429966536912`", ",", 
         "1.0081525070491602`", ",", "1.0199306864473763`", ",", 
         "1.0442449388368267`", ",", "0.9854883827139351`", ",", 
         "0.9103389948328195`", ",", "1.039847279669106`", ",", 
         "1.0413555920005877`", ",", "1.020062290650526`", ",", 
         "1.0776569269057057`", ",", "0.9970812128469401`", ",", 
         "0.9998177119634564`", ",", "0.9914952489221596`", ",", 
         "1.0744734934937101`", ",", "0.9704532184347755`", ",", 
         "0.9826554217367399`", ",", "1.0288302173614703`", ",", 
         "1.0300539719674116`", ",", "0.9939035930947234`", ",", 
         "0.9939864695565022`", ",", "0.9850063019914292`", ",", 
         "0.9748792072721317`", ",", "0.9255833000819036`", ",", 
         "0.9642755851021589`", ",", "1.003023600555307`", ",", 
         "1.0427306316345084`", ",", "0.9842741119035299`", ",", 
         "0.9955428571428573`", ",", "0.9463781425783493`", ",", 
         "0.9980349106612162`", ",", "1.031102252148231`", ",", 
         "0.9660285727757083`", ",", "0.9907143031456671`", ",", 
         "0.9958986612146368`", ",", "1.1146549591887212`", ",", 
         "0.9943859493404046`", ",", "1.106521617852162`", ",", 
         "1.047957084660993`", ",", "1.0069856054191364`", ",", 
         "1.02786324459648`", ",", "1.0343218369433855`", ",", 
         "1.0156477503550179`", ",", "1.0851039352937533`", ",", 
         "0.9786168651117272`", ",", "1.0183169719495324`", ",", 
         "0.9813905528822547`", ",", "1.014125848468171`", ",", 
         "1.0139537560847258`", ",", "0.9935692100589555`", ",", 
         "1.0414789422135162`", ",", "0.9863795238319151`", ",", 
         "0.9697610118858448`", ",", "0.9459683101476349`", ",", 
         "1.0088859634688168`", ",", "1.005030517902978`", ",", 
         "0.9437112961776638`", ",", "1.0249355116079106`", ",", 
         "0.9848816672553867`", ",", "1.0978229682232266`", ",", 
         "0.9855682059491333`", ",", "1.000555228679633`", ",", 
         "0.9847272606801504`", ",", "1.0190337611654077`", ",", 
         "1.0620682255255578`", ",", "0.9978550945390396`", ",", 
         "0.9865811013932912`", ",", "0.9931164053742559`", ",", 
         "1.045586061078168`", ",", "1.0152423959069794`", ",", 
         "1.008978179803214`", ",", "0.9900256039185127`", ",", 
         "0.9959670467237878`", ",", "1.034381279965077`", ",", 
         "1.0711775363637024`", ",", "1.050634115193631`", ",", 
         "1.0157241040428793`", ",", "1.087887255806848`", ",", 
         "1.0640995635027442`", ",", "0.980957984394675`", ",", 
         "1.0519792822789493`", ",", "1.0085308864981803`", ",", 
         "0.9379675810473814`", ",", "1.069300572857698`", ",", 
         "0.9311187669226797`", ",", "1.0623620995937948`", ",", 
         "1.0193949334597219`", ",", "0.990450468334526`", ",", 
         "1.1382367678472534`", ",", "1.0305601379029117`", ",", 
         "1.0362861343801006`", ",", "0.9920466526951565`", ",", 
         "1.0022787312584196`", ",", "1.0554030642747112`", ",", 
         "1.063484844099515`", ",", "1.0353334084997685`", ",", 
         "0.9749638558741248`", ",", "0.7678409108416656`", ",", 
         "0.9197503925198015`", ",", "1.0574186687027896`", ",", 
         "1.0100008768174622`", ",", "1.0579097343505837`", ",", 
         "0.9596644172193741`", ",", "1.0222679395994085`", ",", 
         "0.9994046242490147`", ",", "1.0544477923510183`", ",", 
         "0.9939394222373712`", ",", "0.9543953437025832`", ",", 
         "1.039997046735412`", ",", "1.0169150602723258`", ",", 
         "0.9841109533893375`", ",", "1.0255662068280595`", ",", 
         "1.0801219236639814`", ",", "0.9641680043717339`", ",", 
         "1.0155996085707075`", ",", "1.0545774801405638`", ",", 
         "1.0253638167686456`", ",", "0.9838356551015058`", ",", 
         "1.090407612927551`", ",", "1.0287936076011215`", ",", 
         "0.9837611927212151`", ",", "0.982271373504356`", ",", 
         "1.023133515810486`", ",", "1.0173412113351585`", ",", 
         "0.9409196571262531`", ",", "1.0141707906459656`", ",", 
         "1.0304348653535067`", ",", "0.9813645782927811`", ",", 
         "1.082769990514762`", ",", "1.0014009302454934`", ",", 
         "1.0085083782010558`", ",", "0.899889852677957`", ",", 
         "0.9380804479872703`", ",", "0.9958613322025052`", ",", 
         "1.048036096678172`", ",", "1.0289141093508876`", ",", 
         "1.0390065536173994`", ",", "1.0532782242297334`", ",", 
         "1.010991679908958`", ",", "0.991080559807266`", ",", 
         "1.048350514392961`", ",", "0.9601156069364162`", ",", 
         "1.0406192483013676`", ",", "1.0062086339021825`", ",", 
         "0.9911847811801815`", ",", "1.017346367141015`", ",", 
         "0.943169007200808`", ",", "1.094708223361477`", ",", 
         "1.0172177112688279`", ",", "1.0137370904544596`", ",", 
         "0.9901458837642724`", ",", "1.0382170132932773`", ",", 
         "1.011241039319822`", ",", "0.976931772685523`", ",", 
         "1.0226787845184`", ",", "0.9597999870351054`", ",", 
         "1.0043931416642362`", ",", "0.9861293655208669`", ",", 
         "1.0244492108558463`", ",", "0.9987746432850453`", ",", 
         "1.0027021214076477`", ",", "1.018362371338024`", ",", 
         "1.0190755337737816`", ",", "0.9977991971145028`", ",", 
         "1.0291403480620267`", ",", "0.9967823599617853`", ",", 
         "1.0066522946008054`", ",", "1.0315809994151668`", ",", 
         "0.9736720301266689`", ",", "1.0352927608632057`", ",", 
         "1.0009128971170382`", ",", "1.019039346353778`", ",", 
         "1.0597401767139307`", ",", "0.9632159985521672`", ",", 
         "0.9488363839437164`", ",", "1.012577146063213`", ",", 
         "1.0208273917684543`", ",", "0.9645032287933333`", ",", 
         "1.0384942178672316`", ",", "1.0395590383849118`", ",", 
         "0.9820515048218693`", ",", "1.0168974651200309`", ",", 
         "0.9567822891825226`", ",", "1.0254652039730212`", ",", 
         "1.0024566820709153`", ",", "1.0434953406211465`", ",", 
         "1.0365590057466247`", ",", "1.0393439626330971`", ",", 
         "1.03329345308208`", ",", "1.0203689022068736`", ",", 
         "1.0334453445827454`", ",", "0.9792055593430563`", ",", 
         "1.0387198084397555`", ",", "0.9929840386880153`", ",", 
         "1.0670826078545173`", ",", "1.0084008442227692`", ",", 
         "1.054362610218248`", ",", "1.016740496357941`", ",", 
         "1.018506568081639`", ",", "0.9967657871469124`", ",", 
         "1.0133056327178505`", ",", "1.0020290014300473`", ",", 
         "0.9777686210567642`", ",", "1.0157879220316481`", ",", 
         "1.0473558633951783`", ",", "1.0250282209256465`", ",", 
         "1.0816535033452859`", ",", "0.9887391324347947`", ",", 
         "1.0565765028085097`", ",", "1.0094891003775088`", ",", 
         "0.9572155347767362`", ",", "1.0646346075853614`", ",", 
         "1.0459481323271969`", ",", "1.0466168510879765`", ",", 
         "1.071658418906291`", ",", "0.9270073614095768`", ",", 
         "1.0423526911400842`", ",", "0.9366703376231081`", ",", 
         "1.0512007395781824`", ",", "1.0108805693891951`", ",", 
         "0.9997799763284877`", ",", "1.0808461392525137`", ",", 
         "1.0297330473418829`", ",", "1.0299506806972887`", ",", 
         "0.9819702626840376`", ",", "1.0058494710644441`", ",", 
         "0.9923235117029585`", ",", "0.8486788115664354`", ",", 
         "1.0402649667199888`", ",", "1.0955662775960078`", ",", 
         "1.0610373936087873`", ",", "1.0071167272707329`", ",", 
         "1.019320519788312`", ",", "0.9944170312069258`", ",", 
         "1.0515324120486926`", ",", "1.1024794199154724`", ",", 
         "0.9787478774756604`", ",", "1.0389270579322427`", ",", 
         "0.9712272840382797`", ",", "1.016342332111702`", ",", 
         "0.9545380671660535`", ",", "1.038010208030214`", ",", 
         "1.0137876786950821`", ",", "1.0569333349267913`", ",", 
         "0.9515896154863132`", ",", "0.9257596060157907`", ",", 
         "1.0783566063834937`", ",", "0.9827860094323988`", ",", 
         "0.9802886550300355`", ",", "0.992925527971915`", ",", 
         "1.0070904200844188`", ",", "1.0658735333083698`", ",", 
         "0.94969460816221`", ",", "1.0300650084687517`", ",", 
         "0.9492623373687695`", ",", "1.0357540311623517`", ",", 
         "1.0093178267983702`", ",", "0.9639875966258119`", ",", 
         "0.9412593089464978`", ",", "1.0866696090003016`", ",", 
         "1.0164853744351408`", ",", "0.9624686352747541`", ",", 
         "1.0019433653260206`", ",", "0.9455411624841655`", ",", 
         "0.8892243523706624`", ",", "1.0257223460479499`", ",", 
         "1.0855546030143888`", ",", "1.0172500598889922`", ",", 
         "0.9898717756822831`", ",", "1.0187631048387094`", ",", 
         "1.029468253426386`", ",", "0.9560051288261947`", ",", 
         "0.9978916613547659`", ",", "0.9312873731140274`", ",", 
         "0.9451849239337635`", ",", "0.9916340357050063`", ",", 
         "0.8763121140416691`", ",", "1.106046815500143`", ",", 
         "1.0594329185438185`", ",", "0.9376737420597139`", ",", 
         "0.9654959522299599`", ",", "0.9797946561937766`", ",", 
         "1.0128055982197621`", ",", "1.0610550629181459`", ",", 
         "1.0436516593573888`", ",", "1.0152741275397559`", ",", 
         "1.0276402713723534`", ",", "1.019712361108103`", ",", 
         "0.9850506912833932`", ",", "1.0567176923922865`", ",", 
         "0.9980961359518096`", ",", "1.0686391766488184`", ",", 
         "1.0032667171740361`", ",", "1.00913895502223`", ",", 
         "0.9786260667125224`", ",", "0.987243306911766`", ",", 
         "0.9963698845149954`", ",", "1.0242460825738948`", ",", 
         "0.9716572692391726`", ",", "1.003373863749555`", ",", 
         "0.9907950917640398`", ",", "0.9947620450642689`", ",", 
         "1.0399452703423695`", ",", "1.034041937012012`", ",", 
         "0.9728211325038185`", ",", "1.0263385681900943`", ",", 
         "0.9756209926780313`", ",", "0.9703677540233212`", ",", 
         "1.02697765319828`", ",", "0.9816087539694368`", ",", 
         "1.035614702524679`", ",", "0.9850285360932476`", ",", 
         "1.00830980003053`", ",", "0.9878291559037532`", ",", 
         "1.0350380792465954`", ",", "0.991822037466673`", ",", 
         "1.013749475157453`", ",", "1.0118317217156962`", ",", 
         "1.0105435892957688`", ",", "1.0232075410556183`", ",", 
         "0.9825083530245955`", ",", "0.9983802383708903`", ",", 
         "1.0031802063098307`", ",", "1.0174750216348043`", ",", 
         "1.0261766165984985`", ",", "1.0343914369894178`", ",", 
         "1.0116880354084565`", ",", "1.0197366537036292`", ",", 
         "1.012720700625444`", ",", "0.9720275177095934`", ",", 
         "1.0069869251905064`", ",", "1.0573530780656206`", ",", 
         "1.0432315617270578`", ",", "0.983928251700221`", ",", 
         "0.9853355528011083`", ",", "1.0110316462546522`", ",", 
         "1.0402680393539625`", ",", "1.002474159142119`", ",", 
         "0.9599217803863743`", ",", "0.9920055161190932`", ",", 
         "0.9536774716882702`", ",", "0.9696475041026499`", ",", 
         "0.9997146674775544`", ",", "1.0454411643584833`", ",", 
         "0.9858183965373205`", ",", "0.898062400698827`", ",", 
         "1.0170528634361233`", ",", "0.9399760039156065`"}], "}"}], "]"}], 
      "]"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433073401053632*^9, 3.4330734167295856`*^9}, {
   3.433088824421831*^9, 3.4330888740734797`*^9}, 3.43309003122311*^9, {
   3.4330901045545273`*^9, 3.4330901221337223`*^9}, 3.433090168336545*^9, 
   3.433090653352046*^9, {3.4330908869087343`*^9, 3.433090910263708*^9}, {
   3.433091632226302*^9, 3.433091632589675*^9}, {3.433103359493361*^9, 
   3.433103359724575*^9}, {3.433149006910514*^9, 3.433149012125999*^9}, {
   3.43315087365279*^9, 3.433150888167972*^9}, {3.433150952829582*^9, 
   3.4331509579654818`*^9}},
 CellID->1165427801],

Cell[BoxData[
 RowBox[{
  RowBox[{"dowJonesByMonthWithDividends", "=", 
   RowBox[{"{", 
    RowBox[{"319", ",", 
     RowBox[{"Developer`ToPackedArray", "[", 
      RowBox[{"N", "[", 
       RowBox[{"{", 
        RowBox[{
        "1.0284`", ",", "1.0281`", ",", "1.0059`", ",", "0.9689`", ",", 
         "1.0275`", ",", "1.0305`", ",", "1.0014`", ",", "1.0458`", ",", 
         "1.0062`", ",", "1.0066`", ",", "1.0569`", ",", "0.9796`", ",", 
         "1.0756999999999999`", ",", "1.027`", ",", "1.049`", ",", "0.9581`", 
         ",", "1.0687`", ",", "1.0237`", ",", "0.9965`", ",", "0.9856`", ",", 
         "1.0909`", ",", "1.0432`", ",", "1.0184`", ",", "0.9547`", ",", 
         "1.0101`", ",", "1.0695999999999999`", ",", "1.0314`", ",", 
         "1.0188`", ",", "1.1213`", ",", "1.0053`", ",", "1.0521`", ",", 
         "0.9998`", ",", "0.992`", ",", "1.0168`", ",", "0.9409`", ",", 
         "1.0997`", ",", "1.0453`", ",", "1.0856`", ",", "0.95`", ",", 
         "0.8045`", ",", "0.8767`", ",", "1.018`", ",", "1.0566`", ",", 
         "1.0277`", ",", "1.075`", ",", "0.9791`", ",", "0.9867`", ",", 
         "0.8421000000000001`", ",", "1.0397`", ",", "1.0041`", ",", "0.876`",
          ",", "0.913`", ",", "0.974`", ",", "0.9216`", ",", "1.0625`", ",", 
         "1.1094`", ",", "0.9359999999999999`", ",", "0.9015`", ",", 
         "0.8671`", ",", "1.138`", ",", "0.935`", ",", "1.0023`", ",", 
         "0.7099`", ",", "1.0792`", ",", "0.9112`", ",", "0.8666`", ",", 
         "0.9892`", ",", "1.056`", ",", "0.8913`", ",", "0.8208`", ",", 
         "0.7925`", ",", "0.9949`", ",", "1.3375`", ",", "1.366`", ",", 
         "0.9691`", ",", "0.8688`", ",", "0.9443`", ",", "1.0458`", ",", 
         "1.0098`", ",", "0.8497`", ",", "1.034`", ",", "1.3837000000000002`",
          ",", "1.2119`", ",", "1.1344`", ",", "0.9038999999999999`", ",", 
         "1.1213`", ",", "0.8953`", ",", "0.9168`", ",", "1.0999`", ",", 
         "1.02`", ",", "1.1298`", ",", "0.9767`", ",", "1.0048`", ",", 
         "0.9821`", ",", "0.929`", ",", "1.0252`", ",", "0.8918`", ",", 
         "1.0596`", ",", "0.997`", ",", "0.9807`", ",", "1.0841`", ",", 
         "1.0039`", ",", "0.9672`", ",", "0.9814`", ",", "0.963`", ",", 
         "1.0892`", ",", "1.0348`", ",", "1.0553`", ",", 
         "1.0735999999999999`", ",", "1.0261`", ",", "1.0259`", ",", 
         "1.0713`", ",", "1.0519`", ",", "1.0461`", ",", "1.0661`", ",", 
         "1.0257`", ",", "1.0094`", ",", "0.9195`", ",", "1.0503`", ",", 
         "1.026`", ",", "1.0646`", ",", "1.0108`", ",", "1.0143`", ",", 
         "1.0691`", ",", "1.0333`", ",", "1.0021`", ",", "1.0325`", ",", 
         "1.013`", ",", "0.9965`", ",", "0.9258`", ",", "0.9914`", ",", 
         "0.9584`", ",", "1.0889`", ",", "0.9514`", ",", "0.8646`", ",", 
         "0.9053`", ",", "0.9163`", ",", "0.9599`", ",", "1.0076`", ",", 
         "1.0579`", ",", "0.7629`", ",", "1.1456`", ",", "0.9608`", ",", 
         "1.2361`", ",", "1.0719`", ",", "0.9728`", ",", "1.0086`", ",", 
         "1.0778`", ",", "0.9817`", ",", "1.041`", ",", "0.9404`", ",", 
         "1.0349`", ",", "0.8808`", ",", "0.9977`", ",", "1.0687`", ",", 
         "0.9472`", ",", "1.1018`", ",", "0.9339`", ",", "1.1596`", ",", 
         "0.9962`", ",", "0.9632000000000001`", ",", "1.0303`", ",", "0.976`",
          ",", "1.0137`", ",", "1.0189`", ",", "1.0012`", ",", "0.7797`", ",",
          "1.0667`", ",", "1.0322`", ",", "1.024`", ",", "1.023`", ",", 
         "1.0297`", ",", "0.9837`", ",", "1.0068`", ",", "0.9595`", ",", 
         "0.9852`", ",", "1.0096`", ",", "0.9469`", ",", "1.0139`", ",", 
         "1.0587`", ",", "1.0595`", ",", "0.9995`", ",", "0.9925`", ",", 
         "0.9482`", ",", "0.9806`", ",", "0.9533`", ",", "1.0072`", ",", 
         "0.9759`", ",", "0.9343`", ",", "0.9569`", ",", "1.061`", ",", 
         "1.0255`", ",", "1.0349`", ",", "1.0187`", ",", "1.0263`", ",", 
         "1.0677`", ",", "1.0025`", ",", "1.0504`", ",", "1.0733`", ",", 
         "1.0599`", ",", "1.0621`", ",", "1.0069`", ",", "1.0572`", ",", 
         "1.0169`", ",", "0.9538`", ",", "1.013`", ",", "1.0245`", ",", 
         "0.9878`", ",", "0.9415`", ",", "1.0636`", ",", "1.0181`", ",", 
         "1.0037`", ",", "1.0244`", ",", "0.9837`", ",", "1.051`", ",", 
         "1.0562`", ",", "0.9848`", ",", "1.0159`", ",", "1.0002`", ",", 
         "1.0025`", ",", "1.0165`", ",", "1.0412`", ",", "1.0192`", ",", 
         "1.0643`", ",", "0.9613`", ",", "1.0775`", ",", "1.0186`", ",", 
         "1.0034`", ",", "0.9779`", ",", "1.0611`", ",", "1.0481`", ",", 
         "1.039`", ",", "1.0545`", ",", "1.0118`", ",", "1.0633`", ",", 
         "0.9421`", ",", "1.0587`", ",", "1.0429`", ",", "1.0399`", ",", 
         "0.9609`", ",", "0.9745`", ",", "0.9361`", ",", 
         "0.8997999999999999`", ",", "0.9858`", ",", "1.0012`", ",", 
         "1.0509`", ",", "1.0151`", ",", "0.9884`", ",", "0.9829`", ",", 
         "0.9521`", ",", "0.99`", ",", "1.0537`", ",", "1.0412`", ",", 
         "0.9825`", ",", "0.9956`", ",", "1.0246`", ",", "0.9817`", ",", 
         "1.0302`", ",", "0.9627`", ",", "0.9566`", ",", "1.0828`", ",", 
         "1.0378`", ",", "1.0746`", ",", "0.9998`", ",", "0.9496`", ",", 
         "1.0039`", ",", "0.9705`", ",", "1.0601`", ",", "0.9094`", ",", 
         "1.0322`", ",", "1.003`", ",", "0.9705`", ",", "1.0415`", ",", 
         "0.9821`", ",", "0.9726`", ",", "1.0031`", ",", "1.0558`", ",", 
         "1.0266`", ",", "1.0318`", ",", "1.0312`", ",", "1.0188`", ",", 
         "1.0521`", ",", "1.0173`", ",", "1.0146`", ",", "1.0122`", ",", 
         "1.0403`", ",", "1.0437`", ",", "0.9421`", ",", "1.0161`", ",", 
         "1.0507`", ",", "1.0488`", ",", "0.9989`", ",", "1.0285`", ",", 
         "1.0577`", ",", "1.0582`", ",", "1.0144`", ",", "0.9791`", ",", 
         "1.0496`", ",", "0.9774`", ",", "0.9747`", ",", "1.0712`", ",", 
         "1.0451`", ",", "1.0092`", ",", "0.9776`", ",", "1.0059`", ",", 
         "1.0349`", ",", "1.0169`", ",", "0.975`", ",", "1.0456`", ",", 
         "0.9511000000000001`", ",", "1.0329`", ",", "1.0393`", ",", 
         "1.0115`", ",", "0.9934`", ",", "0.981`", ",", "0.9945`", ",", 
         "1.0588`", ",", "1.0312`", ",", "0.9987`", ",", "0.9983`", ",", 
         "0.9866`", ",", "0.9725`", ",", "1.0071`", ",", "0.9833`", ",", 
         "1.0253`", ",", "0.9559`", ",", "1.0031`", ",", "1.0471`", ",", 
         "1.0283`", ",", "1.0008`", ",", "1.0525`", ",", "1.0175`", ",", 
         "1.0373`", ",", "1.0429`", ",", "1.0316`", ",", "1.0115`", ",", 
         "1.0504`", ",", "0.9775`", ",", "1.0643`", ",", "0.9838`", ",", 
         "1.0953`", ",", "1.0553`", ",", "1.007`", ",", "1.0313`", ",", 
         "0.9989`", ",", "1.0323`", ",", "1.0119`", ",", "1.0658`", ",", 
         "1.0203`", ",", "1.0043`", ",", "0.998`", ",", "0.9742999999999999`",
          ",", "1.0716`", ",", "1.0164`", ",", "0.972`", ",", "1.0395`", ",", 
         "1.0682`", ",", "1.0051`", ",", "0.9508`", ",", "1.0372`", ",", 
         "1.0508`", ",", "0.9697`", ",", "0.9503`", ",", "1.0072`", ",", 
         "1.0046`", ",", "1.0349`", ",", "0.9679`", ",", "0.9813`", ",", 
         "1.0241`", ",", "1.0451`", ",", "1.0366`", ",", "0.9949`", ",", 
         "1.0089`", ",", "0.95`", ",", "0.9424`", ",", "0.9589`", ",", 
         "1.0255`", ",", "0.9626`", ",", "1.0499`", ",", "0.9859`", ",", 
         "1.0338`", ",", "1.0308`", ",", "1.0246`", ",", "1.0295`", ",", 
         "1.0449`", ",", "1.0191`", ",", "1.0486`", ",", "1.0275`", ",", 
         "1.0305`", ",", "1.0529`", ",", "1.0092`", ",", "1.0113`", ",", 
         "1.0045`", ",", "1.0379`", ",", "1.0195`", ",", "1.0006`", ",", 
         "1.0342`", ",", "0.9876`", ",", "0.9551`", ",", "1.0157`", ",", 
         "1.0185`", ",", "1.028`", ",", "0.9336`", ",", "1.0142`", ",", 
         "0.9872`", ",", "0.9847`", ",", "1.034`", ",", "1.023`", ",", 
         "0.9773`", ",", "1.0323`", ",", "0.9414`", ",", "0.9952`", ",", 
         "1.0485`", ",", "1.0485`", ",", "1.0639`", ",", "1.037`", ",", 
         "1.0306`", ",", "1.0057`", ",", "1.0258`", ",", "0.9715`", ",", 
         "1.0299`", ",", "1.0269`", ",", "0.98`", ",", "1.0274`", ",", 
         "1.0454`", ",", "1.0007`", ",", "0.9638`", ",", "1.0195`", ",", 
         "0.9953`", ",", "0.9365`", ",", "0.9153`", ",", "0.9174`", ",", 
         "1.0655000000000001`", ",", "1.0234`", ",", "0.9498`", ",", 
         "1.0022`", ",", "1.1101`", ",", "1.0119`", ",", "1.0518`", ",", 
         "0.9781`", ",", "1.0329`", ",", "1.0474`", ",", "1.0201`", ",", 
         "0.982`", ",", "0.9983`", ",", "1.0527`", ",", "0.9881`", ",", 
         "1.0277`", ",", "0.9945`", ",", "1.0217`", ",", "1.0258`", ",", 
         "1.0172`", ",", "1.0176`", ",", "1.0046`", ",", "1.0174`", ",", 
         "1.0151`", ",", "1.0201`", ",", "0.9887`", ",", "1.0305`", ",", 
         "1.0089`", ",", "1.0031`", ",", "1.0037`", ",", "1.0386`", ",", 
         "1.0069`", ",", "0.9903`", ",", "1.0337`", ",", "0.9956`", ",", 
         "0.9480999999999999`", ",", "1.0168`", ",", "1.0309`", ",", "1.032`",
          ",", "1.0293`", ",", "1.0031`", ",", "1.0135`", ",", "1.0121`", ",",
          "0.9914`", ",", "0.9791`", ",", "1.0248`", ",", "0.9475`", ",", 
         "0.9897`", ",", "0.9871`", ",", "0.9246`", ",", "0.993`", ",", 
         "1.0423`", ",", "1.0175`", ",", "1.0062`", ",", "1.0855`", ",", 
         "1.0109`", ",", "1.0434`", ",", "1.0416`", ",", "0.9607`", ",", 
         "1.0269`", ",", "1.0492`", ",", "0.9937`", ",", "1.0343`", ",", 
         "0.9726`", ",", "1.0079`", ",", "1.0337`", ",", "0.9637`", ",", 
         "0.9664`", ",", "1.0051`", ",", "1.0941`", ",", "1.027`", ",", 
         "1.0115`", ",", "0.978`", ",", "1.018`", ",", "1.0445`", ",", 
         "1.009`", ",", "1.0585`", ",", "0.9661`", ",", "0.9933`", ",", 
         "0.9464`", ",", "1.0305`", ",", "1.0205`", ",", "1.005`", ",", 
         "0.9326`", ",", "0.9348`", ",", "1.0515`", ",", "0.9774`", ",", 
         "1.0556`", ",", "0.9678`", ",", "0.9803`", ",", "0.9267`", ",", 
         "1.0567`", ",", "0.9953`", ",", "0.8947`", ",", "0.9357`", ",", 
         "0.9489`", ",", "1.0742`", ",", "1.05`", ",", "1.0475`", ",", 
         "0.9818`", ",", "1.0504`", ",", "1.0607`", ",", "1.052`", ",", 
         "1.0169`", ",", "1.0448`", ",", "1.0333`", ",", "0.9636`", ",", 
         "1.0031`", ",", "0.9597`", ",", "1.0425`", ",", "0.995`", ",", 
         "0.9593`", ",", "0.9987`", ",", "1.0913`", ",", "1.0284`", ",", 
         "1.0313`", ",", "1.0087`", ",", "1.0055`", ",", "1.0164`", ",", 
         "0.9791`", ",", "0.9957`", ",", "1.036`", ",", "0.9923`", ",", 
         "1.0087`", ",", "1.0498`", ",", "1.0112`", ",", "0.9724`", ",", 
         "0.9555`", ",", "0.9921`", ",", "0.9482`", ",", "0.9755`", ",", 
         "0.9913`", ",", "1.0571`", ",", "0.9703`", ",", "1.054`", ",", 
         "0.9997`", ",", "0.8792`", ",", "1.0114`", ",", "1.0044`", ",", 
         "1.0023`", ",", "0.9766`", ",", "0.954`", ",", "0.958`", ",", 
         "0.9771`", ",", "0.9291`", ",", "0.9122`", ",", "0.8903`", ",", 
         "1.1656`", ",", "0.959`", ",", "0.973`", ",", "1.1416`", ",", 
         "1.0584`", ",", "1.0302`", ",", "1.0465`", ",", "1.0551`", ",", 
         "1.0515`", ",", "0.9396`", ",", "0.9764`", ",", "0.962`", ",", 
         "1.0559`", ",", "1.0312`", ",", "0.989`", ",", "1.1260000000000001`",
          ",", "1.0073`", ",", "1.0268`", ",", "0.9896`", ",", "0.9906`", ",",
          "1.0445`", ",", "0.9938`", ",", "0.9986`", ",", "1.0245`", ",", 
         "0.9796`", ",", "1.0054`", ",", "1.0616`", ",", "0.9637`", ",", 
         "0.9842`", ",", "0.9908`", ",", "1.005`", ",", "0.9892`", ",", 
         "1.0514000000000001`", ",", "0.9872`", ",", "0.9866`", ",", 
         "1.0016`", ",", "0.9607`", ",", "1.0454`", ",", "1.0082`", ",", 
         "0.9448`", ",", "0.9907`", ",", "1.034`", ",", "1.0828`", ",", 
         "1.0232`", ",", "0.9892`", ",", "1.0567`", ",", "1.0424`", ",", 
         "0.9931`", ",", "0.889`", ",", "1.0338`", ",", "1.0177`", ",", 
         "1.0495`", ",", "0.9732`", ",", "1.0656`", ",", "1.0085`", ",", 
         "0.9863999999999999`", ",", "1.0469`", ",", "1.015`", ",", "1.0647`",
          ",", "1.0014`", ",", "0.9273`", ",", "1.0636`", ",", "1.0282`", ",",
          "1.0655999999999999`", ",", "1.001`", ",", "0.8798`", ",", 
         "1.0523`", ",", "1.0601`", ",", "1.0377`", ",", "1.0694`", ",", 
         "1.0236`", ",", "1.0295`", ",", "1.0201`", ",", "1.1049`", ",", 
         "0.9656`", ",", "0.9599`", ",", "1.0155`", ",", "1.0462`", ",", 
         "0.9887`", ",", "1.0136`", ",", "0.9898`", ",", "0.9969`", ",", 
         "0.9437`", ",", "0.9362`", ",", "1.0602`", ",", "1.0459`", ",", 
         "0.9719`", ",", "0.9738`", ",", "0.9489`", ",", "0.9899`", ",", 
         "1.0433`", ",", "0.9718`", ",", "0.9761`", ",", "0.9795`", ",", 
         "1.119`", ",", "1.0168`", ",", "1.1186`", ",", "1.0519`", ",", 
         "1.0145`", ",", "1.0419`", ",", "1.0302`", ",", "1.0347`", ",", 
         "1.0742`", ",", "1.0132`", ",", "1.0378`", ",", "0.9684`", ",", 
         "1.0035`", ",", "1.0161`", ",", "0.972`", ",", "1.0296`", ",", 
         "0.9895`", ",", "0.987`", ",", "0.9609`", ",", "1.0134`", ",", 
         "1.0025`", ",", "0.9477`", ",", "1.0234`", ",", "0.9794`", ",", 
         "1.1127`", ",", "1.0004`", ",", "0.9999`", ",", "0.9893`", ",", 
         "1.0237`", ",", "1.0857`", ",", "1.0169`", ",", "0.9983`", ",", 
         "0.9978`", ",", "1.0558`", ",", "1.0171`", ",", "0.9997`", ",", 
         "0.9952`", ",", "0.9601999999999999`", ",", "1.0444`", ",", 
         "1.0692`", ",", "1.0431`", ",", "1.0098`", ",", "1.0725`", ",", 
         "1.0539`", ",", "0.9921`", ",", "1.0508`", ",", "1.0142`", ",", 
         "0.9403`", ",", "1.0662`", ",", "0.921`", ",", "1.0493`", ",", 
         "1.0151`", ",", "0.9736`", ",", "1.1285`", ",", "1.0479`", ",", 
         "1.0237`", ",", "0.983`", ",", "1.0051`", ",", "1.0437`", ",", 
         "1.0442`", ",", "1.0371`", ",", "0.9792`", ",", "0.7746`", ",", 
         "0.9277`", ",", "1.0703`", ",", "1.0449`", ",", "1.0517`", ",", 
         "0.9834`", ",", "1.011`", ",", "1.0004`", ",", "1.0515`", ",", 
         "0.9927`", ",", "0.972`", ",", "1.0372`", ",", "1.0176`", ",", 
         "0.9836`", ",", "1.0211`", ",", "1.0661`", ",", "0.9836`", ",", 
         "1.0215`", ",", "1.0482`", ",", "1.0393`", ",", "0.9951`", ",", 
         "1.0771`", ",", "1.0221`", ",", "0.9985`", ",", "0.9707`", ",", 
         "1.0178`", ",", "1.0183`", ",", "0.9299`", ",", "1.0149`", ",", 
         "1.0241`", ",", "0.9717`", ",", "1.0889`", ",", "0.9958`", ",", 
         "0.9906`", ",", "0.9081`", ",", "0.9462`", ",", "0.9875`", ",", 
         "1.0657`", ",", "1.0295`", ",", "1.0491`", ",", "1.0758`", ",", 
         "1.0289`", ",", "1.0033`", ",", "1.0407`", ",", "0.956`", ",", 
         "1.0468`", ",", "1.0268`", ",", "0.989`", ",", "1.0178`", ",", 
         "0.9627`", ",", "1.1068`", ",", "0.9988`", ",", "1.0134`", ",", 
         "0.9763`", ",", "1.0134`", ",", "1.0064`", ",", "0.9807`", ",", 
         "1.0399`", ",", "0.9792`", ",", "1.0124`", ",", "1.011`", ",", 
         "1.0402`", ",", "1.0178`", ",", "1.0126`", ",", "1.0054`", ",", 
         "1.0251`", ",", "0.9746`", ",", "1.0296`", ",", "1.0054`", ",", 
         "0.9992`", ",", "1.0395`", ",", "1.0006`", ",", "1.0181`", ",", 
         "0.9824`", ",", "1.0195`", ",", "1.0315`", ",", "0.9758`", ",", 
         "0.9542`", ",", "1.0095`", ",", "1.0094`", ",", "0.9721`", ",", 
         "1.0306`", ",", "1.0426`", ",", "0.9816`", ",", "1.0145`", ",", 
         "0.9628`", ",", "1.0126`", ",", "1.0204`", ",", "1.0396`", ",", 
         "1.027`", ",", "1.025`", ",", "1.034`", ",", "1.0312`", ",", 
         "1.0408`", ",", "1.0093`", ",", "1.0364`", ",", "0.9887`", ",", 
         "1.0427`", ",", "1.0152`", ",", "1.0281`", ",", "1.0163`", ",", 
         "1.0109`", ",", "1.0255`", ",", "1.0268`", ",", "0.9917`", ",", 
         "0.9462`", ",", "1.0325`", ",", "1.053`", ",", "1.0136`", ",", 
         "1.0655000000000001`", ",", "0.9886`", ",", "1.0534`", ",", 
         "0.9989`", ",", "0.9552`", ",", "1.0423`", ",", "1.0716`", ",", 
         "1.0441`", ",", "1.0765`", ",", "0.9637`", ",", "1.0584`", ",", 
         "0.9655`", ",", "1.0305`", ",", "1.0178`", ",", "1.0045`", ",", 
         "1.0732`", ",", "1.0513`", ",", "1.0109`", ",", "0.9742`", ",", 
         "1.032`", ",", "0.9767`", ",", "0.8423`", ",", "1.0638`", ",", 
         "1.0744`", ",", "1.062`", ",", "1.0631`", ",", "1.0383`", ",", 
         "0.9619`", ",", "1.0379`", ",", "1.049`", ",", "0.9793`", ",", 
         "1.051`", ",", "0.9694`", ",", "0.99`", ",", "0.9771`", ",", 
         "1.062`", ",", "1.0369`", ",", "1.0839`", ",", "0.9602`", ",", 
         "1.0318`", ",", "1.0536`", ",", "0.9405`", ",", "0.961`", ",", 
         "1.0516`", ",", "0.9829`", ",", "1.0758`", ",", "0.9489`", ",", 
         "0.9754`", ",", "0.8975`", ",", "1.0203`", ",", "1.0395`", ",", 
         "0.9007000000000001`", ",", "0.9297`", ",", "1.0839`", ",", 
         "1.0106`", ",", "0.9825`", ",", "0.9817`", ",", "0.9409`", ",", 
         "0.9085`", ",", "1.028`", ",", "1.0787`", ",", "1.0178`", ",", 
         "0.9839`", ",", "0.9783`", ",", "1.0447`", ",", "0.9504`", ",", 
         "0.9895`", ",", "0.9298`", ",", "0.9189`", ",", "1.008`", ",", 
         "0.9`", ",", "1.075`", ",", "1.0613`", ",", "0.9467`", ",", 
         "0.9766`", ",", "0.9846`", ",", "1.0103`", ",", "1.0828`", ",", 
         "1.0635`", ",", "1.0163`", ",", "1.0231`", ",", "1.0249`", ",", 
         "0.9909`", ",", "1.0603`", ",", "1.0166`", ",", "1.0455`", ",", 
         "1.0231`", ",", "1.0155`", ",", "0.9893`", ",", "0.9758`", ",", 
         "1.0141`", ",", "1.0216`", ",", "0.9623`", ",", "1.0027`", ",", 
         "1.0206`", ",", "1.0178`", ",", "1.0482`", ",", "1.0352`", ",", 
         "0.9734`", ",", "1.0227`", ",", "0.9831`", ",", "0.9748`", ",", 
         "1.0379`", ",", "1.0115`", ",", "1.0433`", ",", "0.9941`", ",", 
         "1.0106`", ",", "0.9792`", ",", "1.0404`", ",", "1.0035`", ",", 
         "1.0401`", ",", "0.9984`", ",", "1.0191`", ",", "1.013`", ",", 
         "0.969`", ",", "0.9996`", ",", "0.9982`", ",", "1.0251`", ",", 
         "1.0195`", ",", "1.0371`", ",", "1.0237`", ",", "1.0108`", ",", 
         "1.0194`", ",", "0.986`", ",", "1.0129`", ",", "1.0399`", ",", 
         "1.0389`", ",", "0.9852`", ",", "0.9682`", ",", "1.0116`", ",", 
         "1.0409`", ",", "1.0258`", ",", "0.9507`", ",", "0.9957`", ",", 
         "0.9377`", ",", "0.978`", ",", "0.9895`", ",", "1.0511`", ",", 
         "1.0238`", ",", "0.9214`", ",", "0.9869`", ",", 
         "1.0110999999999999`", ",", "0.9537294293652491`"}], "}"}], "]"}], 
      "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.433150810923238*^9, 3.4331508216667213`*^9}, {
  3.433150921185902*^9, 3.4331509432959433`*^9}},
 CellID->329255061],

Cell[BoxData[
 RowBox[{
  RowBox[{"inflationByMonth", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "42"}], ",", 
     RowBox[{"Developer`ToPackedArray", "[", 
      RowBox[{"N", "[", 
       RowBox[{"{", 
        RowBox[{
        "0.998970438960061`", ",", "0.998970438960061`", ",", 
         "0.998970438960061`", ",", "0.998970438960061`", ",", 
         "0.998970438960061`", ",", "0.998970438960061`", ",", 
         "0.998970438960061`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`",
          ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", 
         ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010306221283294`", ",", "1.0010306221283294`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.0010180315015564`", ",", "1.0010180315015564`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001005744793212`", ",", "1.001005744793212`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.001878941764113`", ",", "1.001878941764113`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "1.0009717337936261`", ",", "1.0009717337936261`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "0.9990292095562546`", ",", "0.9990292095562546`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.001837509189552`", ",", "1.001837509189552`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "1.0036527779709994`", ",", "1.0036527779709994`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9982451445059838`", ",", "0.9982451445059838`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "0.9990609348168383`", ",", "0.9990609348168383`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", 
         "1.0036121732506451`", ",", "1.0036121732506451`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", 
         ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017031018841955`", ",", "1.0017031018841955`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0017559907156888`", ",", "1.0017559907156888`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0007779130365937`", ",", "1.0007779130365937`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0004289829662005`", ",", "1.0004289829662005`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.0073921351166981`", ",", "1.0073921351166981`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.015653414973768`", ",", "1.015653414973768`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0135100951825835`", ",", "1.0135100951825835`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0116223776292192`", ",", "1.0116223776292192`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "1.0123273442155356`", ",", "1.0123273442155356`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9955689049783465`", ",", "0.9955689049783465`", ",", 
         "0.9684210526315788`", ",", "0.9945652173913044`", ",", 
         "0.9890710382513662`", ",", "0.9779005524861878`", ",", 
         "0.9943502824858758`", ",", "1.0056818181818181`", ",", "1.`", ",", 
         "0.9887005649717514`", ",", "1.`", ",", "0.9942857142857142`", ",", 
         "0.9942528735632186`", ",", "0.9768786127167629`", ",", "1.`", ",", 
         "0.9881656804733728`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0059880239520957`", ",", "0.9880952380952381`", ",", "1.`", ",", 
         "1.006024096385542`", ",", "1.0059880239520957`", ",", 
         "1.0059523809523807`", ",", "0.9940828402366865`", ",", "1.`", ",", 
         "1.`", ",", "1.0059523809523807`", ",", "1.`", ",", 
         "1.0059171597633136`", ",", "1.011764705882353`", ",", 
         "0.994186046511628`", ",", "1.0058479532163742`", ",", 
         "1.005813953488372`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "0.9942196531791907`", ",", "0.994186046511628`", ",", 
         "0.9941520467836257`", ",", "1.`", ",", "1.`", ",", 
         "1.0058823529411764`", ",", "0.9941520467836257`", ",", 
         "1.0058823529411764`", ",", "1.0058479532163742`", ",", "1.`", ",", 
         "1.005813953488372`", ",", "1.`", ",", "0.9942196531791907`", ",", 
         "1.005813953488372`", ",", "0.9942196531791907`", ",", 
         "1.005813953488372`", ",", "1.0115606936416184`", ",", 
         "1.0114285714285713`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0169491525423728`", ",", "0.9944444444444444`", ",", "1.`", ",", 
         "1.`", ",", "0.9944134078212291`", ",", "1.0056179775280898`", ",", 
         "0.9944134078212291`", ",", "0.9943820224719101`", ",", 
         "0.9887005649717514`", ",", "0.9942857142857142`", ",", 
         "1.0057471264367817`", ",", "1.0057142857142858`", ",", 
         "1.0056818181818181`", ",", "1.`", ",", "0.9887005649717514`", ",", 
         "0.9942857142857142`", ",", "0.9942528735632186`", ",", "1.`", ",", 
         "1.005780346820809`", ",", "1.0114942528735633`", ",", 
         "0.9829545454545454`", ",", "0.9942196531791907`", ",", 
         "1.005813953488372`", ",", "1.005780346820809`", ",", 
         "0.9942528735632186`", ",", "1.`", ",", "1.`", ",", 
         "0.9884393063583816`", ",", "1.`", ",", "1.`", ",", 
         "1.0058479532163742`", ",", "0.994186046511628`", ",", "1.`", ",", 
         "1.`", ",", "1.0116959064327484`", ",", "0.9942196531791907`", ",", 
         "1.`", ",", "0.994186046511628`", ",", "1.`", ",", "1.`", ",", 
         "0.9941520467836257`", ",", "0.9941176470588234`", ",", 
         "1.0059171597633136`", ",", "1.0058823529411764`", ",", 
         "1.0116959064327484`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "0.9942196531791907`", ",", "0.994186046511628`", ",", 
         "0.9941520467836257`", ",", "0.9941176470588234`", ",", 
         "1.0059171597633136`", ",", "0.9941176470588234`", ",", 
         "0.9940828402366865`", ",", "0.9880952380952381`", ",", 
         "0.9939759036144578`", ",", "1.006060606060606`", ",", 
         "0.9939759036144578`", ",", "0.9939393939393939`", ",", 
         "0.9817073170731709`", ",", "0.9875776397515527`", ",", 
         "0.9874213836477987`", ",", "0.9936305732484076`", ",", 
         "0.9935897435897437`", ",", "0.9870967741935484`", ",", 
         "0.9869281045751634`", ",", "1.`", ",", "1.`", ",", 
         "0.9933774834437087`", ",", "0.9933333333333333`", ",", 
         "0.9865771812080536`", ",", "0.9931972789115647`", ",", 
         "0.9794520547945206`", ",", "0.9860139860139858`", ",", 
         "0.9929078014184398`", ",", "0.9928571428571429`", ",", 
         "0.9856115107913668`", ",", "0.9927007299270074`", ",", "1.`", ",", 
         "0.9926470588235294`", ",", "0.9925925925925926`", ",", 
         "0.9925373134328358`", ",", "0.9924812030075187`", ",", 
         "0.9924242424242424`", ",", "0.984732824427481`", ",", 
         "0.9844961240310077`", ",", "0.9921259842519684`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "1.007936507936508`", ",", "1.031496062992126`", ",", 
         "1.0076335877862594`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0075757575757576`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0075187969924813`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "1.0149253731343282`", ",", "0.9926470588235294`", ",", "1.`", ",", 
         "0.9925925925925926`", ",", "1.0149253731343282`", ",", 
         "1.0073529411764706`", ",", "1.`", ",", "1.0072992700729928`", ",", 
         "1.`", ",", "0.9927536231884058`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0072992700729928`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "0.9927536231884058`", ",", "1.`", ",", 
         "1.`", ",", "1.0072992700729928`", ",", "1.0072463768115942`", ",", 
         "1.0071942446043165`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.0071428571428571`", ",", "1.`", ",", 
         "1.0070921985815604`", ",", "1.0070422535211268`", ",", 
         "1.0069930069930069`", ",", "1.`", ",", "1.0069444444444444`", ",", 
         "1.`", ",", "1.006896551724138`", ",", "0.9999999999999999`", ",", 
         "0.9931506849315068`", ",", "0.993103448275862`", ",", 
         "0.9861111111111112`", ",", "0.9929577464788732`", ",", "1.`", ",", 
         "1.0070921985815604`", ",", "0.9929577464788732`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "0.9929078014184398`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "0.9928571428571429`", ",", 
         "1.`", ",", "0.9928057553956835`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0217391304347827`", ",", 
         "0.9929078014184398`", ",", "1.`", ",", "1.`", ",", 
         "0.9928571428571429`", ",", "1.0071942446043165`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0071428571428571`", ",", 
         "0.9929078014184398`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.0071428571428571`", ",", "1.`", ",", "1.`", ",", 
         "1.0070921985815604`", ",", "1.0070422535211268`", ",", 
         "1.0069930069930069`", ",", "1.0208333333333333`", ",", "1.`", ",", 
         "1.0136054421768708`", ",", "1.0134228187919463`", ",", 
         "1.0132450331125828`", ",", "1.0065359477124183`", ",", 
         "1.0064935064935063`", ",", "1.0129032258064516`", ",", 
         "1.0063694267515924`", ",", "1.0126582278481011`", ",", "1.00625`", 
         ",", "1.0124223602484472`", ",", "1.`", ",", "1.0061349693251533`", 
         ",", "1.0060975609756098`", ",", "1.`", ",", "1.0121212121212122`", 
         ",", "1.0059880239520957`", ",", "1.0059523809523807`", ",", "1.`", 
         ",", "1.`", ",", "1.017751479289941`", ",", "1.011627906976744`", 
         ",", "1.0057471264367817`", ",", "1.`", ",", "0.9942857142857142`", 
         ",", "0.9942528735632186`", ",", "1.005780346820809`", ",", "1.`", 
         ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0057471264367817`", ",", "1.`", ",", "1.0057142857142858`", ",", 
         "1.0056818181818181`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.0056497175141244`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0056179775280898`", ",", 
         "1.011173184357542`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`",
          ",", "1.`", ",", "1.005524861878453`", ",", "0.9999999999999999`", 
         ",", "0.9945054945054945`", ",", "1.011049723756906`", ",", 
         "1.0054644808743167`", ",", "1.0054347826086958`", ",", 
         "1.010810810810811`", ",", "1.0588235294117647`", ",", 
         "1.02020202020202`", ",", "1.00990099009901`", ",", 
         "1.019607843137255`", ",", "1.0240384615384615`", ",", 
         "1.0093896713615023`", ",", "1.`", ",", "1.`", ",", 
         "1.0186046511627906`", ",", "1.`", ",", "1.`", ",", 
         "1.0045662100456623`", ",", "1.009090909090909`", ",", 
         "1.0135135135135136`", ",", "1.0222222222222224`", ",", "1.`", ",", 
         "1.0043478260869565`", ",", "1.0129870129870129`", ",", 
         "1.0128205128205128`", ",", "0.9915611814345991`", ",", 
         "0.9957446808510637`", ",", "1.017094017094017`", ",", 
         "1.0042016806722687`", ",", "1.0083682008368202`", ",", 
         "1.012448132780083`", ",", "1.0040983606557379`", ",", 
         "0.9999999999999999`", ",", "0.9959183673469386`", ",", 
         "0.9918032786885247`", ",", "0.9958677685950414`", ",", 
         "0.995850622406639`", ",", "0.9916666666666667`", ",", "1.`", ",", 
         "1.0042016806722687`", ",", "0.9958158995815901`", ",", 
         "1.0042016806722687`", ",", "0.99163179916318`", ",", 
         "1.0042194092827004`", ",", "1.0042016806722687`", ",", 
         "0.99163179916318`", ",", "1.0042194092827004`", ",", 
         "0.9915966386554622`", ",", "0.9957627118644068`", ",", "1.`", ",", 
         "1.0042553191489363`", ",", "1.`", ",", "1.0042372881355932`", ",", 
         "1.0042194092827004`", ",", "1.0126050420168067`", ",", 
         "1.008298755186722`", ",", "1.0041152263374484`", ",", 
         "1.0081967213114755`", ",", "1.0040650406504064`", ",", 
         "1.0121457489878543`", ",", "1.016`", ",", "1.0118110236220472`", 
         ",", "1.0038910505836576`", ",", "1.`", ",", "1.003875968992248`", 
         ",", "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "1.0077220077220077`", ",", 
         "1.0038314176245209`", ",", "1.0076335877862594`", ",", 
         "1.003787878787879`", ",", "1.`", ",", "0.9924528301886792`", ",", 
         "1.`", ",", "1.0038022813688212`", ",", "1.`", ",", 
         "1.003787878787879`", ",", "1.0075471698113208`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "0.9962546816479402`", ",", "0.9962406015037594`", ",", 
         "1.0037735849056604`", ",", "1.`", ",", "1.0037593984962405`", ",", 
         "1.00374531835206`", ",", "0.9999999999999999`", ",", 
         "1.003731343283582`", ",", "1.`", ",", "1.0037174721189592`", ",", 
         "0.9962962962962962`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "0.996282527881041`", ",", "1.003731343283582`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "0.996282527881041`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "0.9962686567164178`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.00374531835206`", ",", 
         "0.9999999999999999`", ",", "1.003731343283582`", ",", "1.`", ",", 
         "1.`", ",", "0.996282527881041`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "1.003731343283582`", ",", "1.0037174721189592`", ",", 
         "1.0074074074074073`", ",", "1.0073529411764706`", ",", 
         "0.9963503649635038`", ",", "1.0036630036630036`", ",", 
         "1.0036496350364965`", ",", "1.`", ",", "1.0036363636363637`", ",", 
         "1.`", ",", "1.0036231884057971`", ",", "1.0036101083032491`", ",", 
         "1.0035971223021583`", ",", "1.0035842293906811`", ",", 
         "1.0035714285714286`", ",", "1.00711743772242`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.0035335689045937`", ",", "1.`", ",", 
         "1.0070422535211268`", ",", "0.9999999999999999`", ",", 
         "1.0069930069930069`", ",", "1.0034722222222223`", ",", "1.`", ",", 
         "1.`", ",", "1.0034602076124568`", ",", "0.9965517241379309`", ",", 
         "1.`", ",", "1.`", ",", "1.0034602076124568`", ",", 
         "0.9965517241379309`", ",", "1.0034602076124568`", ",", 
         "0.9965517241379309`", ",", "1.`", ",", "1.0034602076124568`", ",", 
         "1.`", ",", "1.003448275862069`", ",", "1.0034364261168383`", ",", 
         "0.9999999999999999`", ",", "1.0034246575342465`", ",", 
         "1.0034129692832765`", ",", "1.`", ",", "1.`", ",", 
         "0.9965986394557824`", ",", "1.0034129692832765`", ",", "1.`", ",", 
         "1.0034013605442178`", ",", "1.`", ",", "1.0033898305084745`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "1.0067567567567566`", ",", "1.`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", 
         ",", "1.`", ",", "1.0067114093959733`", ",", "0.9966666666666666`", 
         ",", "1.0033444816053512`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.`", ",", "1.0033333333333334`", ",", "0.9999999999999999`", ",", 
         "1.0033222591362125`", ",", "1.`", ",", "1.`", ",", 
         "1.0033112582781458`", ",", "0.9999999999999999`", ",", 
         "1.0033003300330032`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "1.0032894736842104`", ",", "1.`", ",", "1.`", ",", 
         "1.0032786885245903`", ",", "1.0032679738562091`", ",", "1.`", ",", 
         "1.`", ",", "1.003257328990228`", ",", "0.9999999999999999`", ",", 
         "1.003246753246753`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`",
          ",", "1.`", ",", "1.0032362459546926`", ",", "1.0032258064516129`", 
         ",", "0.9967845659163986`", ",", "1.0032258064516129`", ",", "1.`", 
         ",", "1.0032154340836013`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0032051282051284`", ",", "1.0031948881789137`", ",", "1.`", ",", 
         "1.0063694267515924`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "0.9999999999999999`", ",", 
         "1.0031645569620251`", ",", "0.9999999999999999`", ",", 
         "1.003154574132492`", ",", "1.`", ",", "1.0062893081761006`", ",", 
         "1.003125`", ",", "1.0062305295950156`", ",", "1.`", ",", 
         "1.0030959752321982`", ",", "1.0030864197530864`", ",", 
         "1.0061538461538464`", ",", "1.`", ",", "1.0061162079510702`", ",", 
         "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", 
         "1.0030395136778116`", ",", "1.0030303030303032`", ",", 
         "1.0030211480362539`", ",", "1.003012048192771`", ",", 
         "1.003003003003003`", ",", "1.0029940119760479`", ",", 
         "1.0029850746268656`", ",", "1.0029761904761905`", ",", 
         "1.0029673590504449`", ",", "1.002958579881657`", ",", 
         "1.0058997050147493`", ",", "1.002932551319648`", ",", 
         "1.002923976608187`", ",", "1.0029154518950438`", ",", 
         "1.002906976744186`", ",", "1.0057971014492755`", ",", 
         "1.0057636887608068`", ",", "1.002865329512894`", ",", 
         "1.002857142857143`", ",", "1.0056980056980056`", ",", 
         "1.0028328611898019`", ",", "1.002824858757062`", ",", 
         "1.0028169014084507`", ",", "1.0056179775280898`", ",", 
         "1.0083798882681565`", ",", "1.005540166204986`", ",", 
         "1.002754820936639`", ",", "1.0054945054945055`", ",", 
         "1.0054644808743167`", ",", "1.0054347826086958`", ",", 
         "1.002702702702703`", ",", "1.0053908355795147`", ",", 
         "1.0053619302949062`", ",", "1.0053333333333334`", ",", 
         "1.0026525198938991`", ",", "1.0052910052910053`", ",", 
         "1.0052631578947369`", ",", "1.007853403141361`", ",", 
         "1.0025974025974027`", ",", "1.0051813471502589`", ",", 
         "1.0051546391752577`", ",", "1.`", ",", "1.005128205128205`", ",", 
         "1.0051020408163265`", ",", "1.0050761421319798`", ",", 
         "1.005050505050505`", ",", "1.`", ",", "1.0025125628140703`", ",", 
         "1.0025062656641606`", ",", "1.0025000000000002`", ",", 
         "1.0049875311720697`", ",", "1.0074441687344915`", ",", 
         "1.0024630541871922`", ",", "1.0024570024570023`", ",", "1.`", ",", 
         "1.0024509803921569`", ",", "1.`", ",", "1.0048899755501224`", ",", 
         "1.`", ",", "1.0048661800486616`", ",", "1.0024213075060533`", ",", 
         "1.002415458937198`", ",", "1.002409638554217`", ",", 
         "1.002403846153846`", ",", "1.0047961630695443`", ",", 
         "1.0023866348448687`", ",", "1.0023809523809524`", ",", 
         "1.0047505938242278`", ",", "1.0023640661938535`", ",", 
         "1.0023584905660379`", ",", "1.0023529411764707`", ",", 
         "1.0070422535211268`", ",", "1.0093240093240092`", ",", 
         "1.0069284064665127`", ",", "1.006880733944954`", ",", 
         "1.0068337129840548`", ",", "1.002262443438914`", ",", 
         "1.018058690744921`", ",", "1.0022172949002217`", ",", 
         "1.008849557522124`", ",", "1.006578947368421`", ",", 
         "1.0065359477124185`", ",", "1.0086580086580086`", ",", 
         "1.0128755364806867`", ",", "1.0127118644067796`", ",", 
         "1.0041841004184102`", ",", "1.0125`", ",", "1.008230452674897`", 
         ",", "1.0081632653061223`", ",", "1.0121457489878543`", ",", 
         "1.012`", ",", "1.0098814229249011`", ",", "1.0078277886497065`", 
         ",", "1.007766990291262`", ",", "1.0038535645472062`", ",", 
         "1.0076775431861804`", ",", "1.003809523809524`", ",", 
         "1.0037950664136621`", ",", "1.005671077504726`", ",", 
         "1.0075187969924813`", ",", "1.0111940298507462`", ",", 
         "1.0018450184501844`", ",", "1.0055248618784531`", ",", 
         "1.0054945054945055`", ",", "1.0072859744990892`", ",", 
         "1.003616636528029`", ",", "1.0018018018018018`", ",", 
         "1.0035971223021583`", ",", "1.0017921146953406`", ",", 
         "1.003577817531306`", ",", "1.0071301247771836`", ",", 
         "1.0053097345132742`", ",", "1.0052816901408452`", ",", 
         "1.0052539404553416`", ",", "1.0034843205574913`", ",", 
         "1.0052083333333333`", ",", "1.001727115716753`", ",", 
         "1.003448275862069`", ",", "1.0051546391752577`", ",", 
         "1.0102564102564104`", ",", "1.0067681895093064`", ",", 
         "1.0084033613445378`", ",", "1.005`", ",", "1.0066334991708128`", 
         ",", "1.0049423393739703`", ",", "1.0032786885245903`", ",", 
         "1.0032679738562091`", ",", "1.003257328990228`", ",", 
         "1.0048701298701297`", ",", "1.0032310177705979`", ",", 
         "1.006441223832528`", ",", "1.0064`", ",", "1.0079491255961843`", 
         ",", "1.0078864353312302`", ",", "1.0093896713615023`", ",", 
         "1.0108527131782945`", ",", "1.0076687116564418`", ",", 
         "1.004566210045662`", ",", "1.0075757575757576`", ",", 
         "1.0090225563909774`", ",", "1.0044709388971687`", ",", 
         "1.0044510385756675`", ",", "1.0088626292466765`", ",", 
         "1.0117130307467057`", ",", "1.0101302460202606`", ",", 
         "1.011461318051576`", ",", "1.0127478753541077`", ",", 
         "1.0111888111888112`", ",", "1.0110650069156293`", ",", 
         "1.009575923392613`", ",", "1.010840108401084`", ",", 
         "1.0080428954423593`", ",", "1.009308510638298`", ",", 
         "1.010540184453228`", ",", "1.0143415906127768`", ",", 
         "1.01413881748072`", ",", "1.015209125475285`", ",", 
         "1.0112359550561798`", ",", "1.0098765432098764`", ",", 
         "1.0110024449877753`", ",", "1.`", ",", "1.0072551390568318`", ",", 
         "1.0084033613445378`", ",", "1.0095238095238095`", ",", 
         "1.0082547169811322`", ",", "1.0093567251461988`", ",", 
         "1.0081112398609502`", ",", "1.010344827586207`", ",", 
         "1.0068259385665528`", ",", "1.006779661016949`", ",", 
         "1.0078563411896746`", ",", "1.0089086859688194`", ",", 
         "1.011037527593819`", ",", "1.00764192139738`", ",", 
         "1.009750812567714`", ",", "1.0021459227467813`", ",", 
         "1.0032119914346895`", ",", "1.0032017075773747`", ",", 
         "1.003191489361702`", ",", "1.0031813361611877`", ",", 
         "0.9989429175475687`", ",", "1.0042328042328041`", ",", 
         "1.0094836670179135`", ",", "1.0125260960334028`", ",", 
         "1.0051546391752577`", ",", "1.0020512820512821`", ",", 
         "1.0020470829068577`", ",", "1.003064351378958`", ",", 
         "0.9979633401221997`", ",", "0.9959183673469386`", ",", 
         "1.0020491803278688`", ",", "1.0010224948875257`", ",", "1.`", ",", 
         "1.0071501532175688`", ",", "1.0060851926977687`", ",", 
         "1.003024193548387`", ",", "1.0040201005025127`", ",", 
         "1.003003003003003`", ",", "1.0049900199600799`", ",", 
         "1.002979145978153`", ",", "1.001980198019802`", ",", 
         "1.00098814229249`", ",", "1.005923000987167`", ",", 
         "1.0049067713444553`", ",", "1.001953125`", ",", 
         "1.0048732943469787`", ",", "1.0029097963142581`", ",", 
         "1.0029013539651837`", ",", "1.0038572806171648`", ",", 
         "1.0038424591738713`", ",", "1.0047846889952152`", ",", 
         "1.002857142857143`", ",", "0.9999999999999999`", ",", 
         "0.9999999999999999`", ",", "1.0018993352326686`", ",", 
         "1.0047393364928912`", ",", "1.0037735849056604`", ",", 
         "1.0046992481203008`", ",", "1.0037418147801682`", ",", 
         "1.0027958993476236`", ",", "1.0018587360594795`", ",", 
         "1.0018552875695734`", ",", "1.0027777777777778`", ",", 
         "1.0036934441366574`", ",", "1.0027598896044159`", ",", 
         "1.0027522935779818`", ",", "1.0027447392497713`", ",", 
         "0.9972627737226278`", ",", "0.9954254345837146`", ",", 
         "0.9981617647058824`", ",", "1.0027624309392267`", ",", 
         "1.0055096418732783`", ",", "1.`", ",", "1.001826484018265`", ",", 
         "1.0045578851412944`", ",", "1.0009074410163339`", ",", 
         "1.0009066183136899`", ",", "1.0009057971014492`", ",", 
         "1.0063348416289595`", ",", "1.0035971223021583`", ",", 
         "1.0044802867383513`", ",", "1.0053523639607493`", ",", 
         "1.0035492457852706`", ",", "1.0035366931918657`", ",", 
         "1.0026431718061675`", ",", "1.0052724077328647`", ",", 
         "1.0052447552447552`", ",", "1.0026086956521738`", ",", 
         "1.0008673026886383`", ",", "1.`", ",", "1.0025996533795494`", ",", 
         "1.0025929127052722`", ",", "1.0043103448275863`", ",", 
         "1.0051502145922746`", ",", "1.0034158838599487`", ",", 
         "1.0042553191489363`", ",", "1.0042372881355932`", ",", 
         "1.0042194092827004`", ",", "1.0067226890756302`", ",", 
         "1.003338898163606`", ",", "1.0008319467554077`", ",", 
         "1.00166251039069`", ",", "1.0049792531120332`", ",", 
         "1.004128819157721`", ",", "1.0057565789473684`", ",", 
         "1.006541291905151`", ",", "1.0056864337936637`", ",", 
         "1.0024232633279482`", ",", "1.002417405318292`", ",", 
         "1.0016077170418005`", ",", "1.0032102728731944`", ",", "1.0048`", 
         ",", "1.002388535031847`", ",", "1.0015885623510723`", ",", 
         "1.0103092783505154`", ",", "1.0047095761381475`", ",", 
         "1.00546875`", ",", "1.0015540015540016`", ",", 
         "1.0023273855702093`", ",", "1.0054179566563468`", ",", 
         "1.0038491147036182`", ",", "1.00920245398773`", ",", 
         "1.0083586626139818`", ",", "1.0060286360211004`", ",", 
         "1.002247191011236`", ",", "1.`", ",", "1.005979073243647`", ",", 
         "1.0014858841010403`", ",", "1.0014836795252224`", ",", 
         "1.0014814814814814`", ",", "1.002958579881657`", ",", 
         "1.0029498525073746`", ",", "1.0014705882352941`", ",", 
         "1.0029368575624082`", ",", "1.0043923865300146`", ",", 
         "1.001457725947522`", ",", "1.002911208151383`", ",", 
         "1.0007256894049346`", ",", "1.0014503263234227`", ",", 
         "1.00362056480811`", ",", "1.0050505050505052`", ",", 
         "1.0014357501794686`", ",", "1.0014336917562723`", ",", 
         "1.0035790980672872`", ",", "1.0021398002853068`", ",", 
         "1.002846975088968`", ",", "1.0028388928317957`", ",", 
         "1.0035385704175512`", ",", "1.001410437235543`", ",", 
         "0.9992957746478874`", ",", "1.0049330514446793`", ",", 
         "1.0035063113604488`", ",", "1.0034940600978337`", ",", 
         "1.0027855153203344`", ",", "1.0013888888888887`", ",", 
         "1.001386962552011`", ",", "1.`", ",", "1.002770083102493`", ",", 
         "1.00207182320442`", ",", "1.0041350792556856`", ",", 
         "1.0006863417982157`", ",", "1.`", ",", "1.0027434842249656`", ",", 
         "1.0034199726402189`", ",", "1.003408316291752`", ",", 
         "1.001358695652174`", ",", "1.0006784260515602`", ",", 
         "1.0033898305084745`", ",", "1.002702702702703`", ",", 
         "1.0040431266846361`", ",", "1.0026845637583892`", ",", 
         "1.000669344042838`", ",", "1.0013377926421403`", ",", "1.`", ",", 
         "1.0040080160320644`", ",", "1.003992015968064`", ",", 
         "1.0033134526176275`", ",", "1.0033025099075297`", ",", 
         "1.0019749835418037`", ",", "1.0019710906701709`", ",", "1.`", ",", 
         "1.0026229508196722`", ",", "1.001962066710268`", ",", 
         "1.0032637075718016`", ",", "0.9993493819128172`", ",", 
         "0.9993489583333334`", ",", "1.0058631921824106`", ",", 
         "1.003238341968912`", ",", "1.0051646223369914`", ",", 
         "1.0038535645472064`", ",", "1.001919385796545`", ",", 
         "1.000638569604087`", ",", "1.001914486279515`", ",", 
         "1.0019108280254778`", ",", "1.003178639542276`", ",", 
         "1.0031685678073512`", ",", "1.0018951358180668`", ",", "1.`", ",", 
         "1.0031525851197982`", ",", "1.0031426775612822`", ",", 
         "1.0025062656641606`", ",", "1.00125`", ",", "0.9993757802746567`", 
         ",", "1.0012492192379765`", ",", "1.0012476606363068`", ",", 
         "1.0018691588785047`", ",", "1.0024875621890545`", ",", 
         "1.002481389578164`", ",", "0.9993811881188119`", ",", 
         "0.9987616099071209`", ",", "1.0018598884066954`", ",", 
         "1.0018564356435644`", ",", "1.0018529956763433`", ",", 
         "1.001849568434032`", ",", "1.0018461538461538`", ",", 
         "1.0012285012285012`", ",", "1.0012269938650307`", ",", 
         "1.0012254901960786`", ",", "1.0012239902080782`", ",", 
         "1.0024449877750612`", ",", "1.`", ",", "0.9993902439024391`", ",", 
         "1.0024405125076266`", ",", "1.0012172854534387`", ",", 
         "1.0030395136778116`", ",", "1.007272727272727`", ",", "1.`", ",", 
         "1.`", ",", "1.0030084235860408`", ",", "1.0023995200959808`", ",", 
         "1.004787552363854`", ",", "1.0017867778439546`", ",", 
         "1.0005945303210464`", ",", "1.`", ",", "1.0029708853238266`", ",", 
         "1.0059241706161137`", ",", "1.0082449941107183`", ",", 
         "1.000584112149533`", ",", "1.0011675423234092`", ",", 
         "1.0052478134110787`", ",", "1.0023201856148491`", ",", "1.`", ",", 
         "1.0052083333333333`", ",", "1.001727115716753`", ",", 
         "1.0005747126436781`", ",", "0.9994256174612292`", ",", 
         "1.0063218390804598`", ",", "1.0039977155910909`", ",", 
         "1.0022753128555175`", ",", "1.003972758229285`", ",", 
         "1.0045223289994347`", ",", "1.0016882386043895`", ",", 
         "0.997191011235955`", ",", "1.`", ",", "1.0045070422535212`", ",", 
         "0.9966348850252382`", ",", "0.9983117613956107`", ",", 
         "0.9960541149943629`", ",", "1.0022637238256933`", ",", 
         "1.0039525691699607`", ",", "1.0056242969628797`", ",", 
         "1.0055928411633108`", ",", "0.9999999999999999`", ",", 
         "1.0005561735261401`", ",", "1.0011117287381879`", ",", 
         "1.0033314825097168`", ",", "1.0016602102933039`", ",", 
         "1.0016574585635358`", ",", "1.`", ",", "0.9977937120794264`", ",", 
         "1.0044223327805417`", ",", "1.007705008255366`", ",", 
         "1.00600764609503`", ",", "0.9978284473398482`", ",", 
         "0.9983677910772577`", ",", "1.0010899182561306`", ",", 
         "1.0010887316276538`", ",", "1.003806416530723`", ",", 
         "1.0032502708559046`", ",", "0.9989200863930886`", ",", 
         "0.9972972972972973`", ",", "0.9989159891598917`", ",", 
         "1.00488334237656`", ",", "1.0053995680345573`", ",", 
         "1.0064446831364124`", ",", "1.0032017075773747`", ",", 
         "1.0058510638297873`", ",", "1.0031729243786356`", ",", 
         "0.9984185556141276`", ",", "1.0005279831045406`", ",", 
         "1.0021108179419524`", ",", "1.0052659294365456`", ",", 
         "1.000523834468308`", ",", "0.9963350785340316`", ",", 
         "1.002101944298476`", ",", "1.005768222338752`", ",", 
         "1.0078206465067778`", ",", "1.0067252974650802`", ",", 
         "0.998972250770812`", ",", "1.000514403292181`", ",", 
         "1.0046272493573265`", ",", "1.0051177072671442`", ",", 
         "1.0122199592668026`", ",", "1.0020120724346075`", ",", 
         "0.9919678714859438`", ",", "0.9959514170040487`", ",", 
         "1.0076219512195121`", ",", "1.0020171457387796`", ",", 
         "1.0055359838953195`", ",", "1.0085085085085086`", ",", 
         "1.0049627791563276`", ",", "1.0019753086419754`", ",", 
         "1.0029571217348447`", ",", "1.001965601965602`", ",", 
         "0.9950956351152526`", ",", "0.9945786101527846`", ",", 
         "0.9985133795837463`", ",", "1.0014888337468983`", ",", 
         "1.0030525272547075`", ",", "1.0053503675598765`", ",", 
         "1.0091056958510853`", ",", "1.006496162686509`", ",", 
         "1.0061107186747047`", ",", "1.0019379751766058`", ",", 
         "0.9997456227921979`", ",", "0.998166097772913`", ",", 
         "1.002755907405359`", ",", "1.0021391913281212`", ",", 
         "1.0059396178734157`", ",", "0.9993291368703522`", ",", 
         "1.004970576472605`", ",", "1.0029041121849536`", ",", 
         "1.0086682129309896`", ",", "1.0060647783897194`", ",", 
         "1.0084208860317563`", ",", "1.0100769969348942`", ",", 
         "1.0052510111281219`", ",", "0.9960084377443582`", ",", 
         "0.9960084377443582`", ",", "0.9960084377443582`"}], "}"}], "]"}], 
      "]"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433150747542858*^9, 3.433150761829157*^9}, {
   3.433150962532935*^9, 3.433150968770794*^9}},
 CellID->1773616583],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"addInflation", "[", "data_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "length", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"length", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"inflationByMonth", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
         RowBox[{"Length", "[", 
          RowBox[{"data", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Assumes", " ", "both", " ", "end", " ", "at", " ", "the", " ", "same",
         " ", "month"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"inflationByMonth", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", 
         RowBox[{"Length", "[", 
          RowBox[{"inflationByMonth", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], "-", "length"}], ",", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{
           RowBox[{"data", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"-", "length"}]}], "]"}], "/", 
         RowBox[{"Take", "[", 
          RowBox[{
           RowBox[{"inflationByMonth", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"-", "length"}]}], "]"}]}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.4331037031163*^9, 3.433103715252878*^9}, {
   3.433103762725456*^9, 3.4331037638668756`*^9}, 3.433148256924008*^9, {
   3.433151004084717*^9, 3.433151080850396*^9}, {3.4331512523974867`*^9, 
   3.4331513256390743`*^9}},
 CellID->1221975256],

Cell[BoxData[
 RowBox[{
  RowBox[{"dowJonesByMonthWithInflation", "=", 
   RowBox[{"addInflation", "[", "dowJonesByMonth", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.4331028532232857`*^9, 3.43310287984661*^9}, {
   3.433102978602837*^9, 3.433103061331212*^9}, {3.433103274490697*^9, 
   3.433103299203905*^9}, {3.433103448135078*^9, 3.433103664568194*^9}, {
   3.433103722545389*^9, 3.43310372726966*^9}},
 CellID->489108806],

Cell[BoxData[
 RowBox[{
  RowBox[{"dowJonesByMonthWithDividendsWithInflation", "=", 
   RowBox[{"addInflation", "[", "dowJonesByMonthWithDividends", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.4331028532232857`*^9, 3.43310287984661*^9}, {
   3.433102978602837*^9, 3.433103061331212*^9}, {3.433103274490697*^9, 
   3.433103299203905*^9}, {3.433103448135078*^9, 3.433103694804605*^9}, {
   3.433103731378356*^9, 3.433103735433609*^9}},
 CellID->1346305985],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"knockoutTable", "[", "\"\<R\>\"", "]"}], "=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"1306", "+", "200"}], "}"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"republicanMonths", "+", "200"}], "}"}], "]"}], "\[Rule]", 
      "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"knockoutTable", "[", "\"\<D\>\"", "]"}], "=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"1306", "+", "200"}], "}"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"democraticMonths", "+", "200"}], "}"}], "]"}], "\[Rule]", 
      "1"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433151561951295*^9, 3.433151563423905*^9}, {
   3.43315164240523*^9, 3.4331517219388027`*^9}, {3.4331521621714067`*^9, 
   3.433152207286483*^9}, {3.43315225591457*^9, 3.433152294731522*^9}, {
   3.4331524883661137`*^9, 3.433152500358494*^9}},
 CellID->774421388],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nullOutMonths", "[", 
    RowBox[{"data_", ",", "party_", ",", "shift_"}], "]"}], ":=", 
   RowBox[{"data", "^", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"knockoutTable", "[", "party", "]"}], ",", 
        RowBox[{"-", "shift"}]}], "]"}], ",", 
      RowBox[{"-", 
       RowBox[{"Length", "[", "data", "]"}]}]}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4330643363331423`*^9, 3.433064376791072*^9}, {
  3.433064481843297*^9, 3.433064483182241*^9}, {3.433064635343739*^9, 
  3.433064700787743*^9}, {3.43306475221373*^9, 3.433064756005302*^9}, {
  3.433064920549698*^9, 3.433064937440292*^9}, {3.433065886947301*^9, 
  3.433065894108199*^9}, {3.433152360046579*^9, 3.4331523625547132`*^9}, {
  3.43315245921974*^9, 3.433152550662868*^9}, {3.433153025419611*^9, 
  3.4331530317223682`*^9}},
 CellID->1207611459],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getReturns", "[", 
    RowBox[{
    "party_", ",", "start_", ",", "shift_", ",", "includeDividends_", ",", 
     "includeInflation_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dataStart", ",", "data"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"dataStart", ",", "data"}], "}"}], "=", 
       RowBox[{"If", "[", 
        RowBox[{"includeDividends", ",", 
         RowBox[{"If", "[", 
          RowBox[{
          "includeInflation", ",", 
           "dowJonesByMonthWithDividendsWithInflation", ",", 
           "dowJonesByMonthWithDividends"}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
          "includeInflation", ",", "dowJonesByMonthWithInflation", ",", 
           "dowJonesByMonth"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"data", "=", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"party", "===", "\"\<Both\>\""}], ",", "data", ",", 
           RowBox[{"nullOutMonths", "[", 
            RowBox[{"data", ",", "party", ",", "shift"}], "]"}]}], "]"}], ",",
          
         RowBox[{"Max", "[", 
          RowBox[{"0", ",", 
           RowBox[{"start", "-", "dataStart"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"start", ",", "dataStart"}], "]"}], ",", 
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"FoldList", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", " ", "#2"}], "&"}], ",", "1", ",", "data"}], "]"}], 
          ",", "1"}], "]"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433064948394134*^9, 3.433064971912389*^9}, {
  3.433065129181737*^9, 3.433065150011389*^9}, {3.4330659309695253`*^9, 
  3.43306595215131*^9}, {3.433065988336993*^9, 3.433066064762472*^9}, {
  3.433073510620244*^9, 3.433073576196233*^9}, {3.4331016853609877`*^9, 
  3.4331016971018467`*^9}, {3.43310177556409*^9, 3.43310178306883*^9}, {
  3.4331025418720417`*^9, 3.433102558367299*^9}, {3.433102630412771*^9, 
  3.4331026341364193`*^9}, {3.4331026793433437`*^9, 3.433102698345289*^9}, {
  3.4331109347186728`*^9, 3.4331109830407667`*^9}, {3.4331127813564796`*^9, 
  3.4331127841449137`*^9}, {3.433112834685728*^9, 3.433112835866631*^9}, {
  3.433152619437278*^9, 3.433152681756565*^9}, {3.433152715628625*^9, 
  3.433152747154269*^9}, {3.4331527935364227`*^9, 3.433152809360371*^9}, {
  3.433152841767981*^9, 3.433152950741173*^9}, {3.433153049195176*^9, 
  3.4331530677488623`*^9}, {3.4331555011471863`*^9, 3.433155529092226*^9}, {
  3.433156891879119*^9, 3.433156900338756*^9}, {3.433159151715034*^9, 
  3.433159155200747*^9}},
 CellID->457843616],

Cell[BoxData[{
 RowBox[{
  RowBox[{"republicanRange", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", "#", "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"Split", "[", 
      RowBox[{"republicanMonths", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#2", "==", 
          RowBox[{"#", "+", "1"}]}], ")"}], "&"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"democraticRange", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", "#", "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"Split", "[", 
      RowBox[{"democraticMonths", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#2", "==", 
          RowBox[{"#", "+", "1"}]}], ")"}], "&"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433066383772873*^9, 3.433066401944654*^9}},
 CellID->543746911],

Cell[BoxData[
 RowBox[{
  RowBox[{"rangeBox", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m1_", ",", "m2_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bottom_", ",", "top_"}], "}"}], ",", "shift_"}], "]"}], ":=", 
  RowBox[{"Line", "[", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m1", "+", "shift"}], ",", "bottom"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m1", "+", "shift"}], ",", "top"}], "}"}]}], "}"}], "}"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.43306370271047*^9, 3.433063718268487*^9}, {
  3.4330654668269444`*^9, 3.433065468744692*^9}, {3.433065634680066*^9, 
  3.4330656612140217`*^9}, {3.433066123131844*^9, 3.433066154842778*^9}, {
  3.433066210927458*^9, 3.433066217227584*^9}, {3.433066409275876*^9, 
  3.433066432096354*^9}, {3.433066549517498*^9, 3.43306655447429*^9}, {
  3.4330665910947027`*^9, 3.433066641221395*^9}, {3.4330667545845823`*^9, 
  3.433066774860017*^9}, {3.433067076586234*^9, 3.433067076774849*^9}},
 CellID->2110158384],

Cell[BoxData[
 RowBox[{
  RowBox[{"rangeFill", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m1_", ",", "m2_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bottom_", ",", "top_"}], "}"}], ",", "shift_"}], "]"}], ":=", 
  RowBox[{"Rectangle", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m1", "+", "shift"}], ",", "bottom"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m2", "+", "shift", "+", ".1"}], ",", "top"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.43306370271047*^9, 3.433063718268487*^9}, {
  3.4330654668269444`*^9, 3.433065468744692*^9}, {3.433065634680066*^9, 
  3.4330656612140217`*^9}, {3.433066123131844*^9, 3.433066158175704*^9}, {
  3.433066220332007*^9, 3.433066224012226*^9}, {3.433066411896472*^9, 
  3.433066439823859*^9}, {3.4330665312841454`*^9, 3.433066534947837*^9}, {
  3.4330667607879477`*^9, 3.433066775338389*^9}},
 CellID->1887013330],

Cell[BoxData[
 RowBox[{
  RowBox[{"rangeFill2", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m1_", ",", "m2_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bottom_", ",", "top_"}], "}"}], ",", "shift_", ",", "clr1_", 
    ",", "clr2_"}], "]"}], ":=", 
  RowBox[{"Polygon", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m1", "+", "shift"}], ",", "bottom"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m2", "+", "shift", "+", ".1"}], ",", "bottom"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m2", "+", "shift", "+", ".1"}], ",", "top"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"m1", "+", "shift"}], ",", "top"}], "}"}]}], "}"}], ",", 
    RowBox[{"VertexColors", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"clr1", ",", "clr1", ",", "clr2", ",", "clr2"}], "}"}]}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.43306370271047*^9, 3.433063718268487*^9}, {
   3.4330654668269444`*^9, 3.433065468744692*^9}, {3.433065634680066*^9, 
   3.4330656612140217`*^9}, {3.433066123131844*^9, 3.433066158175704*^9}, {
   3.433066220332007*^9, 3.433066224012226*^9}, {3.433066411896472*^9, 
   3.433066439823859*^9}, {3.4330665312841454`*^9, 3.433066534947837*^9}, {
   3.4330667607879477`*^9, 3.433066775338389*^9}, 3.433076858041973*^9, {
   3.433084437397902*^9, 3.433084585459281*^9}, {3.433085082625966*^9, 
   3.433085091567232*^9}, {3.433085310072052*^9, 3.433085315676217*^9}},
 CellID->771814071],

Cell[BoxData[{
 RowBox[{
  RowBox[{"topOfRange", "=", "30"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraTop", "=", "7"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"startYear", "=", "1897"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFactorForDividends", "=", "8"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFactorForInflation", "=", 
   RowBox[{"1", "/", "4"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFactorForBoth", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extraFactorForInflationAndBoth", "=", 
   RowBox[{"1", "/", "4"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTypescalingFactor", "[", 
   RowBox[{"dividends_", ",", "inflation_", ",", "both_"}], "]"}], ":=", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"dividends", ",", "extraFactorForDividends", ",", "1"}], "]"}], 
    RowBox[{"If", "[", 
     RowBox[{"inflation", ",", "extraFactorForInflation", ",", "1"}], "]"}], 
    " ", 
    RowBox[{"If", "[", 
     RowBox[{"both", ",", "extraFactorForBoth", ",", "1"}], "]"}], 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"both", "&&", "inflation"}], ",", 
      "extraFactorForInflationAndBoth", ",", "1"}], "]"}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433067269681175*^9, 3.433067271705819*^9}, {
   3.433067947484304*^9, 3.433067967362419*^9}, {3.433068007190889*^9, 
   3.433068007566944*^9}, {3.4330870731514387`*^9, 3.43308707595989*^9}, {
   3.433095172771962*^9, 3.433095173136217*^9}, {3.4331060655020247`*^9, 
   3.433106072281328*^9}, {3.433111130063699*^9, 3.4331111464527187`*^9}, {
   3.433111414319921*^9, 3.433111419140929*^9}, {3.433111449667467*^9, 
   3.43311147417794*^9}, 3.433112879506434*^9, 3.433156090420521*^9, 
   3.4331562247511663`*^9, {3.433156484414467*^9, 3.4331565383264513`*^9}, {
   3.433157306091935*^9, 3.433157312364852*^9}, 3.43315796037144*^9, {
   3.4331580141013603`*^9, 3.433158086145978*^9}, 3.433158122068183*^9, {
   3.433158197955358*^9, 3.4331581980643797`*^9}, {3.433158293533695*^9, 
   3.433158323259202*^9}, {3.433158365455371*^9, 3.433158365636218*^9}, {
   3.433158432848579*^9, 3.433158433702565*^9}, {3.43315848110699*^9, 
   3.433158492733843*^9}},
 CellID->994538414],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"monthToMonth", "[", "m_", "]"}], ":=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<January\>\"", ",", "\"\<February\>\"", ",", "\"\<March\>\"", ",", 
      "\"\<April\>\"", ",", "\"\<May\>\"", ",", "\"\<June\>\"", ",", 
      "\"\<July\>\"", ",", "\"\<August\>\"", ",", "\"\<September\>\"", ",", 
      "\"\<October\>\"", ",", "\"\<November\>\"", ",", "\"\<December\>\""}], 
     "}"}], "[", 
    RowBox[{"[", 
     RowBox[{"Mod", "[", 
      RowBox[{"m", ",", "12", ",", "1"}], "]"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.4330739182526617`*^9, 3.433073966169035*^9}},
 CellID->1339466103],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"monthToYear", "[", "y_", "]"}], ":=", 
   RowBox[{"Floor", "[", 
    RowBox[{
     RowBox[{"y", "/", "12"}], "+", "1900"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433073975709401*^9, 3.433073994990514*^9}},
 CellID->335721620],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"formatShiftText", "[", "shift_", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"year", "=", 
        RowBox[{"Floor", "[", 
         RowBox[{"shift", "/", "12"}], "]"}]}], ",", 
       RowBox[{"month", "=", 
        RowBox[{"Mod", "[", 
         RowBox[{"shift", ",", "12"}], "]"}]}]}], "}"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"year", "\[Equal]", "0"}], ",", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"month", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"month", "\[Equal]", "1"}], ",", "\"\< month\>\"", ",", 
              "\"\< months\>\""}], "]"}]}], "}"}], "]"}], ",", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{"year", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"year", "\[Equal]", "1"}], ",", "\"\< year \>\"", ",", 
              "\"\< years \>\""}], "]"}], ",", "month", ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"month", "\[Equal]", "1"}], ",", "\"\< month\>\"", ",", 
              "\"\< months\>\""}], "]"}]}], "}"}], "]"}]}], "]"}], ",", 
       "Black"}], "]"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433069623652421*^9, 3.433069628658848*^9}, {
  3.43306969706502*^9, 3.433069811399706*^9}},
 CellID->1341899497],

Cell[BoxData[
 RowBox[{
  RowBox[{"formattedShift", "[", "shift_", "]"}], ":=", 
  RowBox[{"PaneSelector", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"formatShiftText", "[", "shift", "]"}], ",", 
      RowBox[{"formatShiftText", "[", "35", "]"}]}], "}"}], ",", "1", ",", 
    RowBox[{"Alignment", "\[Rule]", "Right"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.433069585231262*^9, 3.43306960376449*^9}, {
  3.4330696372393503`*^9, 3.433069672713792*^9}},
 CellID->431585285],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"rescaleForPlot", "[", 
    RowBox[{
    "startMonth_", ",", "data_", ",", "False", ",", "False", ",", "False", 
     ",", "False"}], "]"}], ":=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N", "[", 
       RowBox[{"Range", "[", 
        RowBox[{"startMonth", ",", 
         RowBox[{"startMonth", "+", 
          RowBox[{"Length", "[", "data", "]"}], "-", "1"}]}], "]"}], "]"}], 
      ",", "data"}], "}"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433105005103118*^9, 3.4331050621046963`*^9}, {
   3.433111193590033*^9, 3.433111215831842*^9}, {3.433153406698718*^9, 
   3.433153477779633*^9}, {3.433153510050941*^9, 3.433153510209934*^9}, {
   3.43315734340315*^9, 3.433157344170532*^9}},
 CellID->1499900056],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"rescaleForPlot", "[", 
    RowBox[{
    "startMonth_", ",", "data_", ",", "dividends_", ",", "inflation_", ",", 
     "both_", ",", "False"}], "]"}], ":=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N", "[", 
       RowBox[{"Range", "[", 
        RowBox[{"startMonth", ",", 
         RowBox[{"startMonth", "+", 
          RowBox[{"Length", "[", "data", "]"}], "-", "1"}]}], "]"}], "]"}], 
      ",", 
      RowBox[{"data", "/", 
       RowBox[{"getTypescalingFactor", "[", 
        RowBox[{"dividends", ",", "inflation", ",", "both"}], "]"}]}]}], 
     "}"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433105005103118*^9, 3.433105077634417*^9}, {
   3.433105114264909*^9, 3.433105128882897*^9}, 3.433105627232257*^9, {
   3.433105988592792*^9, 3.4331060031324778`*^9}, 3.433106076745212*^9, {
   3.4331111359105377`*^9, 3.433111136318631*^9}, 3.433111226981324*^9, {
   3.4331112846939983`*^9, 3.433111296994164*^9}, 3.4331113475691338`*^9, {
   3.433111423330152*^9, 3.433111426087426*^9}, 3.4331534114684*^9, {
   3.433153536760419*^9, 3.433153587957469*^9}, {3.433157326868106*^9, 
   3.433157352043688*^9}, {3.433158094202396*^9, 3.433158099853528*^9}},
 CellID->1722391799],

Cell[BoxData[
 RowBox[{
  RowBox[{"rescaleForPlot", "[", 
   RowBox[{
   "startMonth_", ",", "data_", ",", "dividends_", ",", "inflation_", ",", 
    "both_", ",", "True"}], "]"}], ":=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"N", "[", 
      RowBox[{"Range", "[", 
       RowBox[{"startMonth", ",", 
        RowBox[{"startMonth", "+", 
         RowBox[{"Length", "[", "data", "]"}], "-", "1"}]}], "]"}], "]"}], 
     ",", 
     RowBox[{"Log", "[", 
      RowBox[{"data", "/", 
       RowBox[{"getTypescalingFactor", "[", 
        RowBox[{"dividends", ",", "inflation", ",", "both"}], "]"}]}], 
      "]"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433105005103118*^9, 3.433105081291039*^9}, {
   3.4331051436013403`*^9, 3.433105149971629*^9}, 3.433105628773457*^9, {
   3.433105990415228*^9, 3.433106006180743*^9}, 3.433106078425622*^9, 
   3.43311113850371*^9, 3.433111228262362*^9, 3.4331113051418324`*^9, 
   3.4331113503287973`*^9, {3.433111428688672*^9, 3.43311143190374*^9}, 
   3.433153414093625*^9, {3.4331536062110853`*^9, 3.433153627818918*^9}, {
   3.433157339068074*^9, 3.433157354972109*^9}, 3.4331581054094143`*^9, {
   3.4331679022385745`*^9, 3.433167906627013*^9}},
 CellID->159404233],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "manipulateContents", "]"}], "=", 
   RowBox[{"{", "HoldAll", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"manipulateContents", "[", 
   RowBox[{
   "shift_", ",", "startY_", ",", "startM_", ",", "logScale_", ",", 
    "dividends_", ",", "inflation_", ",", "both_", ",", 
    "currentRepublicanStartMonth_", ",", "currentRepublicanData_", ",", 
    "currentDemocraticStartMonth_", ",", "currentDemocraticData_", ",", 
    "currentBothStartMonth_", ",", "currentBothData_"}], "]"}], ":=", 
  RowBox[{"Style", "[", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Grid", "[", 
             RowBox[{GridBox[{
                {"\"\<Choose delay in policy effects:\>\"", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<0 years\>\"", ",", "Black"}], "]"}], 
                 RowBox[{"Slider", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "shift", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"12", " ", "12"}], ",", "1"}], "}"}], ",", 
                   RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}], 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<12 years\>\"", ",", "Black"}], "]"}]},
                {"\"\<Choose year of investment:\>\"", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{"dividends", ",", "1926", ",", "startYear"}], 
                    "]"}], ",", "Black"}], "]"}], 
                 RowBox[{"Slider", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "startY", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"dividends", ",", "1926", ",", "startYear"}], 
                    "]"}], ",", "2007", ",", "1"}], "}"}], ",", 
                   RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}], 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<2007\>\"", ",", "Black"}], "]"}]},
                {"\"\<Choose month of investment:\>\"", 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<January\>\"", ",", "Black"}], "]"}], 
                 RowBox[{"Slider", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "startM", "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "12", ",", "1"}], "}"}], ",", 
                   RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}], 
                 RowBox[{"Style", "[", 
                  RowBox[{"\"\<December\>\"", ",", "Black"}], "]"}]},
                {
                 RowBox[{"Item", "[", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "logScale", "]"}], "]"}], ",", 
                    "\"\< Log scale    \>\"", ",", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "dividends", "]"}], "]"}], ",", 
                    "\"\< Include dividend reinvestment    \>\"", ",", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "inflation", "]"}], "]"}], ",", 
                    "\"\< Include inflation    \>\"", ",", 
                    RowBox[{"Checkbox", "[", 
                    RowBox[{"Dynamic", "[", "both", "]"}], "]"}], ",", 
                    "\"\< Graph both\>\"", ","}], "}"}], "]"}], ",", 
                   RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]"}
               }], ",", 
              RowBox[{"Alignment", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"Right", ",", "Right", ",", "Center", ",", "Left"}], 
                 "}"}], "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{"dividends", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"startY", "<", "1926"}], ",", 
                  RowBox[{"startY", "=", "1926"}]}], "]"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "currentRepublicanStartMonth", ",", "currentRepublicanData"}],
                 "}"}], "=", 
               RowBox[{"getReturns", "[", 
                RowBox[{"\"\<R\>\"", ",", 
                 RowBox[{
                  RowBox[{"yearToJanuary", "[", "startY", "]"}], "+", 
                  "startM", "-", "1"}], ",", "shift", ",", "dividends", ",", 
                 "inflation"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "currentDemocraticStartMonth", ",", "currentDemocraticData"}],
                 "}"}], "=", 
               RowBox[{"getReturns", "[", 
                RowBox[{"\"\<D\>\"", ",", 
                 RowBox[{
                  RowBox[{"yearToJanuary", "[", "startY", "]"}], "+", 
                  "startM", "-", "1"}], ",", "shift", ",", "dividends", ",", 
                 "inflation"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"currentBothStartMonth", ",", "currentBothData"}], 
                "}"}], "=", 
               RowBox[{"getReturns", "[", 
                RowBox[{"\"\<Both\>\"", ",", 
                 RowBox[{
                  RowBox[{"yearToJanuary", "[", "startY", "]"}], "+", 
                  "startM", "-", "1"}], ",", "shift", ",", "dividends", ",", 
                 "inflation"}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Grid", "[", 
                  RowBox[{GridBox[{
                    {"\"\<Lag time for policy effects:\>\"", 
                    RowBox[{"formattedShift", "[", "shift", "]"}]},
                    {"\"\<Initial $10000 investment in:\>\"", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"monthToMonth", "[", 
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "startY", "]"}], "+", 
                    "startM", "-", "1"}], "]"}], ",", "\"\< \>\"", ",", 
                    RowBox[{"monthToYear", "[", 
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "startY", "]"}], "+", 
                    "startM", "-", "1"}], "]"}]}], "}"}], "]"}], ",", 
                    "Black"}], "]"}]}
                    }], ",", 
                   RowBox[{"Alignment", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Right", ",", "Right"}], "}"}], "}"}]}]}], "]"}], 
                 ",", "\[IndentingNewLine]", "\"\<  \>\"", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Framed", "[", 
                  RowBox[{
                   RowBox[{"Grid", "[", 
                    RowBox[{GridBox[{
                    {"\"\<Current value under Republicans:\>\"", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"10000", " ", 
                    RowBox[{"Last", "[", "currentRepublicanData", "]"}]}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`], "Swatch"],
                    Setting]}], "]"}]},
                    {"\"\<Current value under Democrats:\>\"", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"10000", " ", 
                    RowBox[{"Last", "[", "currentDemocraticData", "]"}]}], 
                    "]"}]}], "}"}], "]"}], ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183], "Swatch"],
                    Setting]}], "]"}]},
                    {"\"\<Current value under Both:\>\"", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", 
                    RowBox[{"Round", "[", 
                    RowBox[{"10000", " ", 
                    RowBox[{"Last", "[", "currentBothData", "]"}]}], "]"}]}], 
                    "}"}], "]"}], ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.6266117341878386, 0.6651560234988937, 
                    0.6578927290760662], "Swatch"],
                    Setting]}], "]"}]}
                    }], ",", 
                    RowBox[{"Alignment", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Right", ",", "Right", ",", "Right"}], "}"}], 
                    "}"}]}]}], "]"}], ",", 
                   RowBox[{"FrameMargins", "\[Rule]", "10"}]}], "]"}]}], 
                "}"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
          RowBox[{"Dividers", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", 
              RowBox[{"False", ",", "True", ",", "False"}], "}"}]}], "}"}]}], 
          ",", 
          RowBox[{"Spacings", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "2", ",", "1"}], "}"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Dynamic", "[", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"extraTop", "=", 
              RowBox[{"If", "[", 
               RowBox[{"logScale", ",", ".8", ",", "7"}], "]"}]}], ",", 
             RowBox[{"textOffset", "=", 
              RowBox[{"If", "[", 
               RowBox[{"logScale", ",", "0.06", ",", "0.5"}], "]"}]}], ",", 
             RowBox[{"topScaled", "=", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{"logScale", ",", 
                   RowBox[{"Log", "[", "#", "]"}], ",", "#"}], "]"}], "&"}], 
                ")"}], "[", "topOfRange", "]"}]}]}], "}"}], ",", 
           RowBox[{"ListLinePlot", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"rescaleForPlot", "[", 
                RowBox[{
                "currentRepublicanStartMonth", ",", "currentRepublicanData", 
                 ",", "dividends", ",", "inflation", ",", "both", ",", 
                 "logScale"}], "]"}], ",", 
               RowBox[{"rescaleForPlot", "[", 
                RowBox[{
                "currentDemocraticStartMonth", ",", "currentDemocraticData", 
                 ",", "dividends", ",", "inflation", ",", "both", ",", 
                 "logScale"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{"both", ",", 
                 RowBox[{"rescaleForPlot", "[", 
                  RowBox[{
                  "currentBothStartMonth", ",", "currentBothData", ",", 
                   "dividends", ",", "inflation", ",", "both", ",", 
                   "logScale"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"yearToJanuary", "[", "startYear", "]"}], ",", 
                  RowBox[{
                   RowBox[{"yearToJanuary", "[", "2008", "]"}], "+", "11"}]}],
                  "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "1"}], ",", 
                  RowBox[{"topScaled", "+", "extraTop", "+", 
                   RowBox[{"textOffset", "/", "5"}]}]}], "}"}]}], "}"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"AxesOrigin", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"yearToJanuary", "[", "startYear", "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"logScale", ",", 
                  RowBox[{"-", "1"}], ",", "0"}], "]"}]}], "}"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                  TagBox[
                   
                   ColorSetterBox[RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`], "Swatch"],
                   Setting]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                  TagBox[
                   
                   ColorSetterBox[RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183], "Swatch"],
                   Setting]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                  TagBox[
                   
                   ColorSetterBox[RGBColor[
                    0.7029983978027008, 0.7375600823987183, 
                    0.7294728007934691], "Swatch"],
                   Setting]}], "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Ticks", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"yearToJanuary", "[", "i", "]"}], ",", "i"}], 
                   "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", 
                    RowBox[{"startYear", "+", "1"}], ",", "2008", ",", "4"}], 
                   "}"}]}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{"logScale", ",", 
                  RowBox[{"Append", "[", 
                   RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Log", "[", "i", "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", 
                    RowBox[{
                    RowBox[{"getTypescalingFactor", "[", 
                    RowBox[{"dividends", ",", "inflation", ",", "both"}], 
                    "]"}], "10000", "i"}]}], "}"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "5", ",", "30", ",", "5"}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", "10000"}], "}"}], "]"}]}], 
                    "}"}]}], "]"}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<$\>\"", ",", 
                    RowBox[{
                    RowBox[{"getTypescalingFactor", "[", 
                    RowBox[{"dividends", ",", "inflation", ",", "both"}], 
                    "]"}], "10000", "i"}]}], "}"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "5", ",", "30", ",", "5"}], "}"}]}], 
                   "]"}]}], "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Prolog", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Antialiasing", "\[Rule]", "False"}], ",", 
                RowBox[{"Opacity", "[", "1", "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeFill2", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"logScale", ",", 
                    RowBox[{"-", "1"}], ",", "0"}], "]"}], ",", "topScaled"}],
                     "}"}], ",", "shift", ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.8175478751812009, 0.8167696650644694, 1.], "Swatch"],
                    Setting], ",", 
                    TagBox[
                    ColorSetterBox[RGBColor[1., 1., 1.], "Swatch"],
                    Setting]}], "]"}], "&"}], ",", "democraticRange"}], "]"}],
                 ",", "\[IndentingNewLine]", 
                TagBox[
                 
                 ColorSetterBox[RGBColor[
                  0.2610055695429923, 0.2947432669565881, 0.7375600823987183],
                   "Swatch"],
                 Setting], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeFill2", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"topScaled", ",", 
                    RowBox[{"topScaled", "+", "extraTop"}]}], "}"}], ",", "0",
                     ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.24509040970473792`, 0.2964370183871214, 
                    0.7451285572594797], "Swatch"],
                    Setting], ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.1837949187457084, 0.2225986114290074, 
                    0.5656061646448463], "Swatch"],
                    Setting]}], "]"}], "&"}], ",", "democraticRange"}], "]"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeFill2", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"logScale", ",", 
                    RowBox[{"-", "1"}], ",", "0"}], "]"}], ",", "topScaled"}],
                     "}"}], ",", "shift", ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.9502250705729762, 0.7982146944380866, 
                    0.7878995956359197], "Swatch"],
                    Setting], ",", 
                    TagBox[
                    ColorSetterBox[RGBColor[1., 1., 1.], "Swatch"],
                    Setting]}], "]"}], "&"}], ",", "republicanRange"}], "]"}],
                 ",", "\[IndentingNewLine]", 
                TagBox[
                 
                 ColorSetterBox[RGBColor[
                  0.61538109407187, 0.11189440756847487`, 
                   0.11189440756847487`], "Swatch"],
                 Setting], ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeFill2", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"topScaled", ",", 
                    RowBox[{"topScaled", "+", "extraTop"}]}], "}"}], ",", "0",
                     ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.6319371328297856, 0.10934615091172656`, 
                    0.10180819409475853`], "Swatch"],
                    Setting], ",", 
                    TagBox[
                    
                    ColorSetterBox[RGBColor[
                    0.4977340352483406, 0.09021133745326924, 
                    0.08480964370183872], "Swatch"],
                    Setting]}], "]"}], "&"}], ",", "republicanRange"}], "]"}],
                 ",", "\[IndentingNewLine]", 
                RowBox[{"Opacity", "[", "1", "]"}], ",", "Gray", ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeBox", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"logScale", ",", 
                    RowBox[{"-", "1"}], ",", "0"}], "]"}], ",", "topScaled"}],
                     "}"}], ",", "shift"}], "]"}], "&"}], ",", 
                  "republicanRange"}], "]"}], ",", "Gray", ",", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeBox", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"logScale", ",", 
                    RowBox[{"-", "1"}], ",", "0"}], "]"}], ",", "topScaled"}],
                     "}"}], ",", "shift"}], "]"}], "&"}], ",", 
                  "democraticRange"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Line", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "1850", "]"}], ",", 
                    "topScaled"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "2008", "]"}], "+", "11"}], 
                    ",", "topScaled"}], "}"}]}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Line", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "1850", "]"}], ",", 
                    RowBox[{"topScaled", "+", "extraTop"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"yearToJanuary", "[", "2008", "]"}], "+", "11"}], 
                    ",", 
                    RowBox[{"topScaled", "+", "extraTop"}]}], "}"}]}], "}"}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rangeBox", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"topScaled", ",", 
                    RowBox[{"topScaled", "+", "extraTop"}]}], "}"}], ",", 
                    "0"}], "]"}], "&"}], ",", 
                  RowBox[{"Map", "[", 
                   RowBox[{"Last", ",", "presidentsData"}], "]"}]}], "]"}], 
                ",", "\[IndentingNewLine]", "White", ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Inset", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "14"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"topScaled", "+", "textOffset"}]}], "}"}], ",", 
                    RowBox[{"Scaled", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", ".5"}], "}"}], "]"}], ",", "Automatic", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "&"}], ",", 
                  "presidentsData"}], "]"}], ",", "\[IndentingNewLine]", 
                "Gray", ",", "\[IndentingNewLine]", 
                RowBox[{"Map", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Inset", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "14"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "]"}], "+", "shift"}], 
                    ",", 
                    RowBox[{"topScaled", "-", "textOffset"}]}], "}"}], ",", 
                    RowBox[{"Scaled", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", ".5"}], "}"}], "]"}], ",", "Automatic", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "&"}], ",", 
                  "presidentsData"}], "]"}]}], "}"}]}]}], "]"}]}], "]"}], 
         "]"}]}], "}"}], ",", "Center"}], "]"}], ",", "\"\<Section\>\"", ",", 
    "14", ",", "Gray"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, {3.433156240533835*^9, 3.433156243480488*^9}, {
   3.433156284724976*^9, 3.433156348328952*^9}, {3.4331565939049873`*^9, 
   3.433156622783361*^9}, {3.433156851702427*^9, 3.433156872837551*^9}, {
   3.43315691168941*^9, 3.433156919540009*^9}, {3.433156980255796*^9, 
   3.433157037057848*^9}, {3.433157194682597*^9, 3.433157228156069*^9}, 
   3.433157299550068*^9, {3.4331573592100163`*^9, 3.433157371890387*^9}, {
   3.433157506115261*^9, 3.433157516647132*^9}, {3.433157559475349*^9, 
   3.433157588874102*^9}, {3.433157652998375*^9, 3.4331576991398153`*^9}, {
   3.4331581432381887`*^9, 3.433158162961794*^9}, {3.433158536686817*^9, 
   3.433158539047368*^9}, {3.433172669571498*^9, 3.433172669702498*^9}, {
   3.4331749004547358`*^9, 3.4331749006997604`*^9}},
 CellID->758721852],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"manipulateContents", "[", 
    RowBox[{
    "shift", ",", "startY", ",", "startM", ",", "logScale", ",", "dividends", 
     ",", "inflation", ",", "both", ",", "currentRepublicanStartMonth", ",", 
     "currentRepublicanData", ",", "currentDemocraticStartMonth", ",", 
     "currentDemocraticData", ",", "currentBothStartMonth", ",", 
     "currentBothData"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"shift", ",", "0", ",", 
     RowBox[{"12", " ", "12"}], ",", "1", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"startY", ",", "startYear", ",", "2007", ",", "1", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"startM", ",", "1", ",", "12", ",", "1", ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"logScale", ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"dividends", ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"inflation", ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"both", ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], ",", 
   RowBox[{"Deployed", "\[Rule]", "True"}], ",", 
   RowBox[{"Method", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<ExtraVariables\>\"", "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
       "currentRepublicanStartMonth", ",", "currentRepublicanData", ",", 
        "currentDemocraticStartMonth", ",", "currentDemocraticData", ",", 
        "currentBothStartMonth", ",", "currentBothData"}], "}"}]}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.433064779104006*^9, 3.4330648437631607`*^9}, {
   3.4330649799793262`*^9, 3.433064989224373*^9}, {3.4330651646417513`*^9, 
   3.4330653046387253`*^9}, {3.4330657881632843`*^9, 
   3.4330658463023453`*^9}, {3.433066084094103*^9, 3.433066104084629*^9}, {
   3.433066165001296*^9, 3.4330661655357103`*^9}, {3.4330664490717583`*^9, 
   3.433066461723145*^9}, {3.433066498231719*^9, 3.433066510188364*^9}, {
   3.43306656171336*^9, 3.433066578839328*^9}, {3.433066664186742*^9, 
   3.433066669354075*^9}, {3.433066782575552*^9, 3.433066885641942*^9}, 
   3.433067052363209*^9, {3.433067278845064*^9, 3.4330673135338*^9}, {
   3.43306767070116*^9, 3.433067723951939*^9}, {3.4330677676163*^9, 
   3.433068041117528*^9}, {3.433068073017701*^9, 3.4330680815428534`*^9}, {
   3.43306819549179*^9, 3.433068548929555*^9}, {3.433068593852607*^9, 
   3.433068683947671*^9}, {3.433068738559957*^9, 3.43306874908502*^9}, {
   3.433068785712595*^9, 3.433068795825138*^9}, {3.433068870151642*^9, 
   3.433068934444717*^9}, {3.4330689687510357`*^9, 3.433069225048944*^9}, {
   3.433069257442259*^9, 3.433069556175385*^9}, {3.433069652148128*^9, 
   3.433069653237138*^9}, {3.433069839283598*^9, 3.433070037349416*^9}, {
   3.4330701023153343`*^9, 3.433070149841834*^9}, {3.4330705423330927`*^9, 
   3.433070550851193*^9}, {3.433071297824654*^9, 3.4330712983741426`*^9}, {
   3.433071396984972*^9, 3.433071400737459*^9}, {3.433071604773954*^9, 
   3.433071621063583*^9}, {3.433073585913849*^9, 3.433073624121554*^9}, {
   3.433073688314939*^9, 3.433073898223763*^9}, {3.433074017267666*^9, 
   3.433074046637085*^9}, 3.4330742724449863`*^9, {3.43307590048489*^9, 
   3.433076184145165*^9}, {3.433076563813767*^9, 3.433076571468975*^9}, {
   3.4330766246784286`*^9, 3.433076634124365*^9}, {3.43307708516506*^9, 
   3.4330773047355556`*^9}, {3.433077385957177*^9, 3.43307738885004*^9}, {
   3.433085426887052*^9, 3.4330854493870583`*^9}, {3.433085710202013*^9, 
   3.4330857267964687`*^9}, {3.433085760151429*^9, 3.433085761874522*^9}, {
   3.4330860338944807`*^9, 3.433086077223681*^9}, {3.433086835159259*^9, 
   3.433086836884828*^9}, {3.433086892666655*^9, 3.4330869158693132`*^9}, {
   3.433087049583661*^9, 3.433087096241928*^9}, {3.433087134017723*^9, 
   3.433087140226843*^9}, {3.433087299293663*^9, 3.433087314883561*^9}, {
   3.433088588961562*^9, 3.433088648991048*^9}, {3.4330911099667187`*^9, 
   3.433091110150272*^9}, {3.4330911965917597`*^9, 3.433091220002681*^9}, {
   3.433091268147434*^9, 3.43309130075631*^9}, {3.433091671390354*^9, 
   3.433092021275372*^9}, {3.433092052907898*^9, 3.433092065187052*^9}, {
   3.433092097272408*^9, 3.433092138936695*^9}, {3.433092177772534*^9, 
   3.433092181320898*^9}, {3.4330922315018063`*^9, 3.4330923381906357`*^9}, {
   3.433092383746707*^9, 3.433092439613358*^9}, {3.433092480205476*^9, 
   3.433092499136682*^9}, {3.4330928133402042`*^9, 3.433092985845461*^9}, 
   3.433093356389875*^9, {3.433093424323103*^9, 3.4330935318277683`*^9}, {
   3.433093583447764*^9, 3.433093747013331*^9}, {3.433093787626409*^9, 
   3.433093886029792*^9}, {3.433093931493116*^9, 3.433094129564226*^9}, {
   3.433094173132559*^9, 3.433094251080658*^9}, {3.433094281787738*^9, 
   3.433094301322501*^9}, {3.433094333186556*^9, 3.4330944316947107`*^9}, {
   3.433094462375551*^9, 3.433094499303781*^9}, {3.433094604054813*^9, 
   3.4330946042105303`*^9}, {3.433094810305867*^9, 3.433094817702653*^9}, {
   3.433094875248105*^9, 3.433094930282786*^9}, {3.4330949605369253`*^9, 
   3.4330950521401033`*^9}, {3.433101822498146*^9, 3.4331018490398827`*^9}, {
   3.433102569025938*^9, 3.433102618689028*^9}, {3.43310270578432*^9, 
   3.433102747677252*^9}, {3.433104131990053*^9, 3.433104151061329*^9}, {
   3.4331041844878197`*^9, 3.433104187154231*^9}, {3.4331042372851048`*^9, 
   3.433104249337124*^9}, {3.433104280331469*^9, 3.4331043083565397`*^9}, {
   3.433104338859479*^9, 3.433104354013524*^9}, {3.43310439566611*^9, 
   3.4331044508229313`*^9}, {3.433104548799623*^9, 3.433104566422625*^9}, {
   3.4331046914124203`*^9, 3.4331047327088842`*^9}, {3.433104966208972*^9, 
   3.433104968081931*^9}, {3.43310516384379*^9, 3.433105178603819*^9}, {
   3.4331052557504673`*^9, 3.4331052621797657`*^9}, {3.433105703064282*^9, 
   3.433105712743917*^9}, {3.4331060927977247`*^9, 3.433106095507257*^9}, {
   3.433109353384012*^9, 3.433109358528212*^9}, {3.433109768277443*^9, 
   3.433109771174695*^9}, {3.433110707047757*^9, 3.433110719472104*^9}, {
   3.433110750048373*^9, 3.4331107851526937`*^9}, {3.4331110362695103`*^9, 
   3.43311105686994*^9}, {3.433111164794526*^9, 3.43311117015563*^9}, {
   3.433111379570458*^9, 3.4331113841398363`*^9}, {3.433113093273081*^9, 
   3.433113094209401*^9}, {3.433120141491679*^9, 3.433120148366192*^9}, {
   3.4331480438817053`*^9, 3.4331480528232117`*^9}, {3.433153119725377*^9, 
   3.433153172061921*^9}, {3.433153289167748*^9, 3.4331533988076887`*^9}, {
   3.43315540630123*^9, 3.4331554092436934`*^9}, {3.433155635537251*^9, 
   3.43315564060678*^9}, {3.4331556920539627`*^9, 3.4331556939951487`*^9}, {
   3.4331563550570097`*^9, 3.4331563625734673`*^9}, {3.4331572392498913`*^9, 
   3.433157273047229*^9}},
 CellID->1601609076]
}, Open  ]],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`both$$ = False, $CellContext`dividends$$ = 
    False, $CellContext`inflation$$ = False, $CellContext`logScale$$ = 
    False, $CellContext`shift$$ = 0, $CellContext`startM$$ = 
    1, $CellContext`startY$$ = 1897, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`shift$$], 0, 144, 1}, {
      Hold[$CellContext`startY$$], 1897, 2007, 1}, {
      Hold[$CellContext`startM$$], 1, 12, 1}, {{
       Hold[$CellContext`logScale$$], False}, {False, True}}, {{
       Hold[$CellContext`dividends$$], False}, {False, True}}, {{
       Hold[$CellContext`inflation$$], False}, {False, True}}, {{
       Hold[$CellContext`both$$], False}, {False, True}}}, Typeset`size$$ = {
    800., {339.5, 346.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`shift$609439$$ = 
    0, $CellContext`startY$609440$$ = 0, $CellContext`startM$609441$$ = 
    0, $CellContext`logScale$609442$$ = 
    False, $CellContext`dividends$609443$$ = 
    False, $CellContext`inflation$609444$$ = 
    False, $CellContext`both$609445$$ = 
    False, $CellContext`currentRepublicanStartMonth$$ = -35, \
$CellContext`currentRepublicanData$$ = CompressedData["
1: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
6+yngpan3VDsTYNDbKXBu4tUcK2+O2oZiUO9uvSQTg4NzUnplauq6IiWYVk9
eiOBKW+DM/N1JPHyvKfboaWSEOQmG3qYS2I8aGV2uEAKsfFv4mU1pbDrvN22
5PsMlIZ3VvpclMY6jDUp1EjDxc/SLqZIGqUV7e9ifzFA2KY92X9DBnuU7yZu
k5QF++rwV+9eacy+/qwou0wGbw+F/y4MYaJ8/2/ZN7eZ6I/s7gzdIIMjYjlG
GxxlsZv/KjXkFRMH1I6dNm2TxWOf3rCN02QQIpZb8zxSBoymYv0DXBlsKIyY
cuu6LDwGSXcHdsqAY/VsDiNRGmdoKzm7LUT5n55eZb9RFikKtveuyjAh61Fb
+qZXFlaKVzHZnoma23HS+VUyUKtO3SvDksYGiUjm40kMnL7d6VmXx8D47ovt
R2tE96OYSf2CfAZik13e82UZ+MLecLA5hIFPG8Z5GpLScGpnl9QGSSNj6VBL
jI8MBqvdTuh+kwX5x8nTP+YyMU2nL/HiKhbGO487z7kmup+MfN+9WoeNNszv
iPnJRnlinHrRbA5avl08XRPPQe0VZ6drezlIWJG9xVJ0ryhYX8MYqOHikDhV
b2c1Fy8wTXjtLg9BUs6RDv48RC8xWJ3px8Wvb07vee+4WCtsu6Nqx0OcVvLe
oQ4ePmTQzJ10udjn8+C4qwcX61wcp7/s5yDF1N4gQ5Sn9OxztREbUXylJ8Vi
xVxsnda+5scAB36VL042ElwsMe92724U3ZsYT/859+ov/sX/bqTPJGZvD+aA
RjPYZVrAxumQgr4pt9hw5ma+dxpgIXD+tFMHotn4MmJ7V+IpG/tUr3wKP8bG
pzAz7X9Ec2Dvj0dp2QmyuORcMDnanYkNuQsN6nfJwkRTpdNCioXfa3NaZgTI
QtKBueTqmAzyOV3zDr9jYOZrYZiNjgwclGlD1dtkULFpH9FxggF3bav5MpAC
5ZwMsy5NEh+JyveC/QxkFoT0bsqWRrc73XZ8nzRel/7sc1ssDa7i1Vsx92Ug
pExJOreNiZUmehcm27Og5jw8p3wnCz88trg6/GRhy7uP61Oy2OhoCnhcSWbj
jH7EproiFhpi9i76IMeCYfamf5gNLMht68x9c5YFpXXnWRsDmKjI2B39UZ+J
T64xsk5XWLhKz8271c1CyY+SKNv1bOycvakvPoMN08ND6cbtbCyQXD8nhcRB
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
    
    "], $CellContext`currentDemocraticStartMonth$$ = -35, \
$CellContext`currentDemocraticData$$ = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     0.9848501482050719, 1.005269513667801, 1.0335931496322317`, 
     0.9958283016796571, 1.0018662860906795`, 0.9646503458118344, 
     0.9190910088923041, 0.8817652870787129, 0.8883521791634643, 
     0.8622241738939507, 0.8604676693380169, 0.8221539137117132, 
     0.8615654846854754, 0.8981227357558452, 0.8823141947524421, 
     0.85958941706005, 0.836645076298166, 0.8648589307278509, 
     0.9089911076956847, 0.9002085849160163, 0.9044900647711047, 
     0.86859150290921, 0.8954879789219444, 0.8854978592600716, 
     0.784059721154901, 0.5991876166428801, 0.6207047974530677, 
     0.6040180041716978, 0.6678010758590399, 0.7880118564057519, 
     0.7136897573828077, 0.7691294324294649, 0.8291799319354478, 
     0.8914260621363482, 0.9944011417279609, 1.0466571522669883`, 
     1.0616972225271701`, 1.0884839170051592`, 0.9944011417279608, 
     0.9993413107915242, 1.0237128115051042`, 0.9841914589965963, 
     1.0077944889669554`, 0.9834229882533754, 0.9798001976067622, 
     1.012734658030519, 1.1387638599187613`, 1.1484246349763967`, 
     1.1633549237018328`, 1.0429245800856293`, 1.0476451860797011`, 
     1.0051597321330548`, 1.0618070040619165`, 1.0234932484356127`, 
     1.069052585355143, 1.0470962784059719`, 1.0072455812932264`, 
     0.9155779997804369, 0.916236688988912, 0.8178724338566253, 
     0.7975628499286421, 0.816555055439675, 0.8760566472719288, 
     0.8825337578219343, 0.8388407069930837, 0.850916675815128, 
     0.8571742232956416, 0.9065759139312768, 0.8917554067405863, 
     0.9052585355143266, 0.9296300362279066, 0.9387419036118128, 
     0.8884619606982109, 0.9024042156109345, 0.8849489515863435, 
     0.9310571961796029, 0.9754089362169285, 1.0196508947195086`, 
     1.1581951915687785`, 1.1744428587111653`, 1.1764189263365907`, 
     1.1499615764628397`, 1.2231858601383254`, 1.3055220111977173`, 
     1.1386540783840164`, 1.177187397079812, 1.1440333735865635`, 
     1.0009880338127135`, 1.1286639587221439`, 1.0268964760127355`, 
     1.0079042705017023`, 0.9963772093533875, 0.9535624108025037, 
     0.9458777033702938, 0.9106378307168741, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.9340212976177412, 0.9340212976177412, 0.9340212976177412, 
     0.85027625397027, 0.9092750144498397, 0.9189321005641428, 
     0.7754338365844219, 0.8359415167693516, 1.1030203046180431`, 
     1.329509152392555, 1.480853798840147, 1.3696464165551265`, 
     1.5452846702590117`, 1.4220059303311128`, 1.3302636122452347`, 
     1.480853798840147, 1.4888510732785538`, 1.6178637080868201`, 
     1.56112832716529, 1.513597356446455, 1.5163134119161028`, 
     1.4183845230382492`, 1.4447906178820464`, 1.3286038005693388`, 
     1.4011828383971474`, 1.3955998354873158`, 1.4087274369239466`, 
     1.5532819446974193`, 1.5698800614563777`, 1.5344204483804216`, 
     1.5448319943474043`, 1.5206892790616469`, 1.6515126175163448`, 
     1.6694687620101272`, 1.7859573632639067`, 1.904709344075726, 
     1.9216092447757558`, 1.9905668753107009`, 2.1085643962698404`, 
     2.1477963086091965`, 2.1748059713351373`, 2.255684067542425, 
     2.301555226585364, 2.359045067359574, 2.1980433347976787`, 
     2.3032150382612593`, 2.3794154833819317`, 2.4876050262562326`, 
     2.5091825780428776`, 2.532269049534883, 2.6730512580449566`, 
     2.764642684160299, 2.714546549942352, 2.7875782636817688`, 
     2.8242450125220127`, 2.8127772227612775`, 2.6295943705305933`, 
     2.636233617234177, 2.554902845115281, 2.7765631498326417`, 
     2.6769744492788927`, 2.332337188574705, 2.0895520079823067`, 
     1.863214052178331, 1.823529463927367, 1.8389204449220378`, 
     1.9561635060284972`, 1.4930760484535623`, 1.684859743004798, 
     1.6257100905546922`, 2.0201417015357546`, 2.130594623968095, 
     2.10147247365465, 2.134366923231494, 2.2894838689424857`, 
     2.2606635025701127`, 2.3291684571934494`, 2.1692229684253057`, 
     2.2226387259950444`, 1.9893597395464133`, 1.9371511177409626`, 
     2.085025248866227, 1.9711018111115592`, 2.161678369898507, 
     2.0281389759741617`, 2.265793829568336, 2.2917472485005255`, 
     2.198345118738751, 2.2632286660692245`, 2.192913007799456, 
     2.2111709362343097`, 2.2262601332879086`, 2.2396895186656116`, 
     1.753666481569207, 1.8417873923622217`, 1.903351316340903, 
     1.9446957162677625`, 2.0014310971892924`, 2.031156815384882, 
     1.9620482928794007`, 1.978646409638359, 1.8730220302631704`, 
     1.8404293646273977`, 1.8517462624175967`, 1.7434058275727602`, 
     1.753817373539743, 1.8580837251801081`, 1.943337688532939, 
     1.9228163805400453`, 1.91361197033735, 1.7778091968549645`, 
     1.7301273341655936`, 1.6742973050672791`, 1.6509090496342018`, 
     1.608206621972518, 1.5018277827446496`, 1.4387549390606078`, 
     1.522198198767007, 1.5593176235188593`, 1.5952299125064233`, 
     1.6044343227091185`, 1.6463822905181218`, 1.7126238655834185`, 
     1.727713062637017, 1.801650128199649, 1.8923362024917751`, 
     1.9572197498222486`, 2.0607316416099333`, 2.0442844168215113`, 
     2.1302928400270225`, 2.163489073544939, 2.0709922956063807`, 
     2.061486101462614, 2.114298291150208, 2.086685060542123, 
     1.955107262234745, 2.050470987613487, 2.0732556751644204`, 
     2.0566575584054623`, 2.0949841189216016`, 2.0552995306706383`, 
     2.1462873889038367`, 2.2389350588129306`, 2.2046825815012623`, 
     2.217961074908429, 2.207700420911982, 2.211020044263774, 
     2.223091401906653, 2.292501708353205, 2.3187569112264663`, 
     2.4203072073971836`, 2.32464169807737, 2.49635676054732, 
     2.5395118641206116`, 2.483229159110689, 2.4577284160901076`, 
     2.6298961544716652`, 2.717715281323608, 2.8156441702014616`, 
     2.8889776678819503`, 2.910857003609668, 3.0883059609599854`, 
     2.8683054679185207`, 3.011200164016098, 3.1199932747725425`, 
     3.203134750537869, 3.1026406981609034`, 3.041378558123294, 
     2.8547251905702815`, 2.601679355981436, 2.55233768161617, 
     2.561843875759936, 2.6738057178976367`, 2.722694716351296, 
     2.6994573528887544`, 2.6738057178976367`, 2.574820585226031, 
     2.5538466013215295`, 2.675314637602997, 2.764039116278156, 
     2.698702893036075, 2.678181585043181, 2.743366916314726, 
     2.708661763091449, 2.733558938229886, 2.636988077086856, 
     2.5168780685402132`, 2.673805717897636, 2.7237509601450474`, 
     2.878113446003359, 2.858799273774753, 2.736124101728998, 
     2.741857996609365, 2.690403834656595, 2.8409940212515066`, 
     2.5832705355760455`, 2.6753146376029964`, 2.702776976240545, 
     2.611336442095739, 2.6722967981922765`, 2.6264256391493372`, 
     2.5404172159438265`, 2.5262333707134434`, 2.6544915456690297`, 
     2.6958359455958893`, 2.753929354252243, 2.86000640953904, 
     2.890335695616773, 3.0256857931875505`, 3.0448490734456204`, 
     3.0697462485840576`, 3.1091290528939495`, 3.2224489227664734`, 
     3.371228405714953, 3.1553019958779602`, 3.1596778630235036`, 
     3.2723941650138837`, 3.415590645052533, 3.395220229030175, 
     3.4343012493989953`, 3.552298770358135, 3.75464490284689, 
     3.8032321173594767`, 3.7501181437308104`, 3.9100636324989537`, 
     3.767018044430841, 3.6612427730851156`, 3.890900352240884, 
     4.077855503734968, 4.091586673053742, 3.95865084701154, 
     3.9423545141936525`, 4.062464522740296, 4.084494750438549, 
     3.92439836969987, 4.065935038062623, 3.887429836918554, 
     3.967553473273161, 4.138363183919895, 4.218335928303966, 
     4.1501327576217015`, 4.08328761467426, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.062464522740295, 4.062464522740295, 4.062464522740295, 
     4.18048291107409, 4.311171126387966, 4.537338037839029, 
     4.634496711034348, 4.736345320183619, 4.7509051213541005`, 
     4.876973399758113, 4.787654619500745, 4.937522572894964, 
     5.039511180132414, 4.908402970554004, 4.9273727115020804`, 
     5.0511310214511616`, 5.117910109511921, 4.899933086219253, 
     4.956282316710775, 4.948582421861002, 4.657246400363223, 
     4.293461368233487, 3.9289063466187746`, 4.185452843204398, 
     4.26420176780435, 4.052804654656034, 4.128333623227899, 
     4.545037932688802, 4.564637665033679, 4.779884725606882, 
     4.6405166288259885`, 4.777574757151949, 5.0238313942565105`, 
     5.0886505090827825`, 4.948092428552379, 4.867943523070649, 
     5.105170283487751, 5.129459951786579, 5.286537806721951, 
     5.253568256956104, 5.34057706875854, 5.497304928473467, 5.60090351372496,
      5.692952256701793, 5.675312497591404, 5.743841561754385, 
     5.820420515987584, 5.8876195983128765`, 5.8692798487615985`, 
     6.127506322405353, 6.111476541309008, 6.127926316669887, 
     6.118826440938337, 6.319933694605593, 6.324273635339102, 
     6.223265014718895, 6.4560818353583995`, 6.426192243532462, 
     6.0761270240441405`, 6.17209571348995, 6.251614627574881, 
     6.513971044819876, 6.725648154144549, 6.6268795029351875`, 
     6.784727347355537, 6.884475985182143, 6.6631390077732116`, 
     6.473301600204259, 6.535670748487421, 6.188405490762654, 
     6.0906168261705345`, 5.931578998000675, 5.518794635008747, 
     5.419465991446674, 5.649412851278536, 5.541054331029001, 
     5.499754895016582, 5.9491487580669755`, 5.87550976368551, 
     6.061777220005931, 6.279264249989977, 5.967838502838698, 
     6.02173776678711, 6.3295935626898565`, 6.308943844683647, 
     6.486531419537051, 6.158095904672184, 6.130586280345266, 
     6.335683479525587, 5.988208224668553, 5.8834196556675495`, 
     5.88460963941706, 6.385452799872757, 6.292914063587301, 
     6.284514178296639, 6.180915593045147, 6.271984349404737, 
     6.550440546790169, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.6666389599776545`, 
     6.6666389599776545`, 6.6666389599776545`, 6.544281715430171, 
     6.941061870955977, 6.593680602980397, 6.469665213955702, 
     6.350209722243336, 6.403892149693022, 6.208783816207931, 
     6.3306574352828955`, 6.149436061794442, 5.95197869029997, 
     5.85262820037378, 5.6539272205214, 5.732343636422809, 5.742499771345722, 
     5.319327482890983, 5.127259080947445, 5.232551255250304, 
     5.784989723574239, 5.8077201207826645`, 5.658072581714426, 
     5.957367659850903, 6.0578926687817845`, 5.981894380242974, 
     5.474985795689109, 5.520446590105959, 5.561762023329786, 
     5.798116700685488, 5.588085066905503, 5.956745855671949, 5.9064488065299,
      5.6814247831018045`, 5.817185362173405, 5.847861035001799, 
     6.132578259609469, 6.070052394947993, 5.635618541918868, 
     5.681562961808239, 5.794800411731066, 6.051191001519725, 
     5.963378433580791, 5.428695929033651, 5.6450146939563925`, 
     5.878467618476976, 5.996403144418566, 6.462065385101822, 
     6.4432039916735535`, 6.442029472668861, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.387241615567701, 6.387241615567701, 6.387241615567701, 
     6.543404632613952, 6.5353866278087125`, 6.553046035922969, 
     6.673375500629753, 6.800673700377142, 6.785706758074027, 
     6.983444614851151, 6.9609744038537515`, 7.007280856296853, 
     7.228577788921473, 7.038264010667718, 7.286663779288321, 
     7.29331575364526, 7.432175718346377, 7.876175209129374, 
     7.586457968833375, 7.198307346088851, 7.288841508988509, 
     7.440649066634384, 7.176530049086965, 7.452784960327254, 
     7.747609966647333, 7.608552026518925, 7.737117269000969, 
     7.402736772308375, 7.591248974173792, 7.609898259424499, 
     7.940893376310437, 8.231204542888305, 8.555052746849082, 
     8.839879994091023, 9.01993864521116, 9.32161360131547, 9.127775860455955,
      9.481201593253834, 9.414681849684438, 10.04624326028186, 
     10.130640184935533`, 10.681368228570504`, 10.860179634498715`, 
     11.061164288283395`, 11.025390128572116`, 11.17208992019391, 
     11.1947581066186, 10.9458831969725, 11.11869594745383, 
     11.645231393873976`, 11.936690817930128`, 12.911363441563628`, 
     12.765970287761947`, 13.488224241600863`, 13.616215355343762`, 
     13.033652863000585`, 13.87607790120445, 14.513657764791484`, 
     15.190238787554623`, 16.278747281879802`, 15.090518564828717`, 
     15.729642636748615`, 14.733489679254163`, 15.487855247399493`, 
     15.656371931108632`, 15.652927158673787`, 16.918405887453382`, 
     17.421441650654224`, 17.943225686819414`, 17.619714041085032`, 
     17.72278004853214, 17.58673133489854, 14.925486248639885`, 
     15.52646045572102, 17.010266485715892`, 18.048528816594896`, 
     18.176975273820563`, 18.52816388429007, 18.424721723531114`, 
     19.374192075270617`, 21.359648040475292`, 20.90571018324234, 
     21.719507974660093`, 21.09457874087688, 21.43931335241674, 
     20.464640728783237`, 21.24250598014788, 21.53539082728052, 
     22.76147244602943, 21.659580812819456`, 20.05156499974292, 
     21.622737585800813`, 21.250523984953123`, 20.831647575893207`, 
     20.684274667818627`, 20.830934864354965`, 22.203142145986533`, 
     21.08620438030253, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`, 21.720161293570154`, 
     21.720161293570154`}, $CellContext`currentBothStartMonth$$ = -35, \
$CellContext`currentBothData$$ = CompressedData["
1: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
ZOsoRFOM2Dwb4fQ+xIxsPKA5h2cW/g9WTjSq
    "]}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`both$$ = False, $CellContext`dividends$$ = 
        False, $CellContext`inflation$$ = False, $CellContext`logScale$$ = 
        False, $CellContext`shift$$ = 0, $CellContext`startM$$ = 
        1, $CellContext`startY$$ = 1897}, "ControllerVariables" :> {
        Hold[$CellContext`shift$$, $CellContext`shift$609439$$, 0], 
        Hold[$CellContext`startY$$, $CellContext`startY$609440$$, 0], 
        Hold[$CellContext`startM$$, $CellContext`startM$609441$$, 0], 
        Hold[$CellContext`logScale$$, $CellContext`logScale$609442$$, False], 
        
        Hold[$CellContext`dividends$$, $CellContext`dividends$609443$$, 
         False], 
        Hold[$CellContext`inflation$$, $CellContext`inflation$609444$$, 
         False], 
        Hold[$CellContext`both$$, $CellContext`both$609445$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`manipulateContents[$CellContext`shift$$, \
$CellContext`startY$$, $CellContext`startM$$, $CellContext`logScale$$, \
$CellContext`dividends$$, $CellContext`inflation$$, $CellContext`both$$, \
$CellContext`currentRepublicanStartMonth$$, \
$CellContext`currentRepublicanData$$, \
$CellContext`currentDemocraticStartMonth$$, \
$CellContext`currentDemocraticData$$, $CellContext`currentBothStartMonth$$, \
$CellContext`currentBothData$$], 
      "Specifications" :> {{$CellContext`shift$$, 0, 144, 1, ControlType -> 
         None}, {$CellContext`startY$$, 1897, 2007, 1, ControlType -> 
         None}, {$CellContext`startM$$, 1, 12, 1, ControlType -> 
         None}, {{$CellContext`logScale$$, False}, {False, True}, ControlType -> 
         None}, {{$CellContext`dividends$$, False}, {False, True}, 
         ControlType -> None}, {{$CellContext`inflation$$, False}, {
         False, True}, ControlType -> None}, {{$CellContext`both$$, False}, {
         False, True}, ControlType -> None}}, 
      "Options" :> {
       Deployed -> True, 
        Method -> {
         "ExtraVariables" :> {$CellContext`currentRepublicanStartMonth$$, \
$CellContext`currentRepublicanData$$, \
$CellContext`currentDemocraticStartMonth$$, \
$CellContext`currentDemocraticData$$, $CellContext`currentBothStartMonth$$, \
$CellContext`currentBothData$$}}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{844., {368., 373.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(({
       Attributes[$CellContext`manipulateContents] = {
         HoldAll}, $CellContext`manipulateContents[
          Pattern[$CellContext`shift$, 
           Blank[]], 
          Pattern[$CellContext`startY$, 
           Blank[]], 
          Pattern[$CellContext`startM$, 
           Blank[]], 
          Pattern[$CellContext`logScale$, 
           Blank[]], 
          Pattern[$CellContext`dividends$, 
           Blank[]], 
          Pattern[$CellContext`inflation$, 
           Blank[]], 
          Pattern[$CellContext`currentRepublicanStartMonth$, 
           Blank[]], 
          Pattern[$CellContext`currentRepublicanData$, 
           Blank[]], 
          Pattern[$CellContext`currentDemocraticStartMonth$, 
           Blank[]], 
          Pattern[$CellContext`currentDemocraticData$, 
           Blank[]]] := Style[
          Column[{
            Column[{
              Grid[{{"Choose delay in policy effects:", 
                 Style["0 years", Black], 
                 Slider[
                  Dynamic[$CellContext`shift$], {0, 12 12, 1}, ImageSize -> 
                  300], 
                 Style["12 years", Black]}, {"Choose year of investment:", 
                 Style[
                  If[$CellContext`dividends$, 1926, $CellContext`startYear], 
                  Black], 
                 Slider[
                  Dynamic[$CellContext`startY$], {
                   If[$CellContext`dividends$, 1926, $CellContext`startYear], 
                   2007, 1}, ImageSize -> 300], 
                 Style["2007", Black]}, {"Choose month of investment:", 
                 Style["January", Black], 
                 Slider[
                  Dynamic[$CellContext`startM$], {1, 12, 1}, ImageSize -> 
                  300], 
                 Style["December", Black]}, {
                 Item[
                  Row[{
                    Checkbox[
                    Dynamic[$CellContext`logScale$]], " Log scale    ", 
                    Checkbox[
                    Dynamic[$CellContext`dividends$]], 
                    " Include dividend reinvestment    ", 
                    Checkbox[
                    Dynamic[$CellContext`inflation$]], " Include inflation"}],
                   Alignment -> Center], SpanFromLeft, SpanFromLeft, 
                 SpanFromLeft}}, Alignment -> {{Right, Right, Center, Left}}],
               
              Dynamic[If[$CellContext`dividends$, 
                 
                 If[$CellContext`startY$ < 1926, $CellContext`startY$ = 
                  1926]]; {$CellContext`currentRepublicanStartMonth$, \
$CellContext`currentRepublicanData$} = $CellContext`getReturns[
                 "R", $CellContext`yearToJanuary[$CellContext`startY$] + \
$CellContext`startM$ - 
                  1, $CellContext`shift$, $CellContext`dividends$, \
$CellContext`inflation$]; {$CellContext`currentDemocraticStartMonth$, \
$CellContext`currentDemocraticData$} = $CellContext`getReturns[
                 "D", $CellContext`yearToJanuary[$CellContext`startY$] + \
$CellContext`startM$ - 
                  1, $CellContext`shift$, $CellContext`dividends$, \
$CellContext`inflation$]; {
                 FE`currentBothStartMonth$$210, 
                  FE`currentBothData$$210} = $CellContext`getReturns[
                 "Both", $CellContext`yearToJanuary[$CellContext`startY$] + \
$CellContext`startM$ - 
                  1, $CellContext`shift$, $CellContext`dividends$, \
$CellContext`inflation$]; Row[{
                  Grid[{{"Lag time for policy effects:", 
                    $CellContext`formattedShift[$CellContext`shift$]}, {
                    "Initial $10000 investment in:", 
                    Style[
                    Row[{
                    $CellContext`monthToMonth[$CellContext`yearToJanuary[$\
CellContext`startY$] + $CellContext`startM$ - 1], " ", 
                    $CellContext`monthToYear[$CellContext`yearToJanuary[$\
CellContext`startY$] + $CellContext`startM$ - 1]}], Black]}}, 
                   Alignment -> {{Right, Right}}], "  ", 
                  Framed[
                   Grid[{{"Current value under Republicans:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentRepublicanData$]]}], 
                    
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]]}, {
                    "Current value under Democrats:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentDemocraticData$]]}], 
                    
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]]}}, 
                    Alignment -> {{Right, Right, Right}}], FrameMargins -> 
                   10]}]]}, Dividers -> {None, {False, True, False}}, 
             Spacings -> {0, 2, 1}], 
            Dynamic[
             
             With[{$CellContext`extraTop$ = 
               If[$CellContext`logScale$, 0.8, 7], $CellContext`textOffset$ = 
               If[$CellContext`logScale$, 0.06, 
                 0.5], $CellContext`topScaled$ = (If[$CellContext`logScale$, 
                 Log[#], #]& )[$CellContext`topOfRange]}, 
              ListLinePlot[{
                $CellContext`rescaleForPlot[$CellContext`\
currentRepublicanStartMonth$, $CellContext`currentRepublicanData$, \
$CellContext`dividends$, $CellContext`inflation$, $CellContext`logScale$], 
                $CellContext`rescaleForPlot[$CellContext`\
currentDemocraticStartMonth$, $CellContext`currentDemocraticData$, \
$CellContext`dividends$, $CellContext`inflation$, $CellContext`logScale$], 
                $CellContext`rescaleForPlot[
                FE`currentBothStartMonth$$210, 
                 FE`currentBothData$$210, $CellContext`dividends$, \
$CellContext`inflation$, $CellContext`logScale$]}, PlotRange -> {{
                  $CellContext`yearToJanuary[$CellContext`startYear], \
$CellContext`yearToJanuary[2008] + 
                  11}, {-1, $CellContext`topScaled$ + $CellContext`extraTop$ + \
$CellContext`textOffset$/5}}, AxesOrigin -> {
                 $CellContext`yearToJanuary[$CellContext`startYear], 
                 If[$CellContext`logScale$, -1, 0]}, ImageSize -> 800, 
               PlotStyle -> {{
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]}, {
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]}, {
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.7029983978027008, 0.7375600823987183, 
                    0.7294728007934691]]]}}, Ticks -> {
                 Table[{
                   $CellContext`yearToJanuary[$CellContext`i], \
$CellContext`i}, {$CellContext`i, $CellContext`startYear + 1, 2008, 4}], 
                 If[$CellContext`logScale$, 
                  Append[
                   Table[{
                    Log[$CellContext`i], 
                    
                    Row[{"$", ((
                    If[$CellContext`dividends$, \
$CellContext`extraFactorForDividends, 1] 
                    If[$CellContext`inflation$, \
$CellContext`extraFactorForInflation, 1]) 
                    10000) $CellContext`i}]}, {$CellContext`i, 5, 30, 5}], {
                   0, 
                    Row[{"$", 10000}]}], 
                  Table[{$CellContext`i, 
                    
                    Row[{"$", ((
                    If[$CellContext`dividends$, \
$CellContext`extraFactorForDividends, 1] 
                    If[$CellContext`inflation$, \
$CellContext`extraFactorForInflation, 1]) 
                    10000) $CellContext`i}]}, {$CellContext`i, 5, 30, 5}]]}, 
               Prolog -> {Antialiasing -> False, 
                 Opacity[1], 
                 Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale$, -1, 
                    0], $CellContext`topScaled$}, $CellContext`shift$, 
                   Setting[
                    ColorSetter[
                    RGBColor[0.8175478751812009, 0.8167696650644694, 1.]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`democraticRange], 
                 
                 Setting[
                  ColorSetter[
                   RGBColor[
                   0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]], 
                 
                 Map[$CellContext`rangeFill2[#, {$CellContext`topScaled$, \
$CellContext`topScaled$ + $CellContext`extraTop$}, 0, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.24509040970473792`, 0.2964370183871214, 
                    0.7451285572594797]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.1837949187457084, 0.2225986114290074, 
                    0.5656061646448463]]]]& , $CellContext`democraticRange], 
                 Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale$, -1, 
                    0], $CellContext`topScaled$}, $CellContext`shift$, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.9502250705729762, 0.7982146944380866, 
                    0.7878995956359197]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`republicanRange], 
                 
                 Setting[
                  ColorSetter[
                   RGBColor[
                   0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]], 
                 
                 Map[$CellContext`rangeFill2[#, {$CellContext`topScaled$, \
$CellContext`topScaled$ + $CellContext`extraTop$}, 0, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.6319371328297856, 0.10934615091172656`, 
                    0.10180819409475853`]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.4977340352483406, 0.09021133745326924, 
                    0.08480964370183872]]]]& , $CellContext`republicanRange], 
                 
                 Opacity[1], Gray, 
                 Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale$, -1, 
                    0], $CellContext`topScaled$}, $CellContext`shift$]& , \
$CellContext`republicanRange], Gray, 
                 Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale$, -1, 
                    
                    0], $CellContext`topScaled$}, $CellContext`shift$]& , \
$CellContext`democraticRange], 
                 Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled$}, \
{$CellContext`yearToJanuary[2008] + 11, $CellContext`topScaled$}}], 
                 Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled$ + $CellContext`extraTop$}, \
{$CellContext`yearToJanuary[2008] + 
                    11, $CellContext`topScaled$ + $CellContext`extraTop$}}], 
                 
                 Map[$CellContext`rangeBox[#, {$CellContext`topScaled$, \
$CellContext`topScaled$ + $CellContext`extraTop$}, 0]& , 
                  Map[Last, $CellContext`presidentsData]], White, 
                 Map[Inset[
                   Style[
                    Part[#, 1], 14], {
                    Mean[
                    
                    Part[#, 
                    4]], $CellContext`topScaled$ + $CellContext`textOffset$}, 
                   
                   Scaled[{0, 0.5}], Automatic, {0, 
                   1}]& , $CellContext`presidentsData], Gray, 
                 Map[Inset[
                   Style[
                    Part[#, 1], 14], {Mean[
                    
                    Part[#, 
                    4]] + $CellContext`shift$, $CellContext`topScaled$ - \
$CellContext`textOffset$}, 
                   Scaled[{1, 0.5}], Automatic, {0, 
                   1}]& , $CellContext`presidentsData]}]]]}, Center], 
          "Section", 14, Gray], $CellContext`manipulateContents[
          Pattern[$CellContext`shift, 
           Blank[]], 
          Pattern[$CellContext`startY, 
           Blank[]], 
          Pattern[$CellContext`startM, 
           Blank[]], 
          Pattern[$CellContext`logScale, 
           Blank[]], 
          Pattern[$CellContext`dividends, 
           Blank[]], 
          Pattern[$CellContext`inflation, 
           Blank[]], 
          Pattern[$CellContext`both, 
           Blank[]], 
          Pattern[$CellContext`currentRepublicanStartMonth, 
           Blank[]], 
          Pattern[$CellContext`currentRepublicanData, 
           Blank[]], 
          Pattern[$CellContext`currentDemocraticStartMonth, 
           Blank[]], 
          Pattern[$CellContext`currentDemocraticData, 
           Blank[]], 
          Pattern[$CellContext`currentBothStartMonth, 
           Blank[]], 
          Pattern[$CellContext`currentBothData, 
           Blank[]]] := Style[
          Column[{
            Column[{
              Grid[{{"Choose delay in policy effects:", 
                 Style["0 years", Black], 
                 Slider[
                  Dynamic[$CellContext`shift], {0, 12 12, 1}, ImageSize -> 
                  300], 
                 Style["12 years", Black]}, {"Choose year of investment:", 
                 Style[
                  If[$CellContext`dividends, 1926, $CellContext`startYear], 
                  Black], 
                 Slider[
                  Dynamic[$CellContext`startY], {
                   If[$CellContext`dividends, 1926, $CellContext`startYear], 
                   2007, 1}, ImageSize -> 300], 
                 Style["2007", Black]}, {"Choose month of investment:", 
                 Style["January", Black], 
                 Slider[
                  Dynamic[$CellContext`startM], {1, 12, 1}, ImageSize -> 300],
                  
                 Style["December", Black]}, {
                 Item[
                  Row[{
                    Checkbox[
                    Dynamic[$CellContext`logScale]], " Log scale    ", 
                    Checkbox[
                    Dynamic[$CellContext`dividends]], 
                    " Include dividend reinvestment    ", 
                    Checkbox[
                    Dynamic[$CellContext`inflation]], 
                    " Include inflation    ", 
                    Checkbox[
                    Dynamic[$CellContext`both]], " Graph both", Null}], 
                  Alignment -> Center], SpanFromLeft, SpanFromLeft, 
                 SpanFromLeft}}, Alignment -> {{Right, Right, Center, Left}}],
               
              Dynamic[If[$CellContext`dividends, 
                 
                 If[$CellContext`startY < 1926, $CellContext`startY = 
                  1926]]; {$CellContext`currentRepublicanStartMonth, \
$CellContext`currentRepublicanData} = $CellContext`getReturns[
                 "R", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                  1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; {$CellContext`currentDemocraticStartMonth, \
$CellContext`currentDemocraticData} = $CellContext`getReturns[
                 "D", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                  1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; {$CellContext`currentBothStartMonth, \
$CellContext`currentBothData} = $CellContext`getReturns[
                 "Both", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                  1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; Row[{
                  Grid[{{"Lag time for policy effects:", 
                    $CellContext`formattedShift[$CellContext`shift]}, {
                    "Initial $10000 investment in:", 
                    Style[
                    Row[{
                    $CellContext`monthToMonth[$CellContext`yearToJanuary[$\
CellContext`startY] + $CellContext`startM - 1], " ", 
                    $CellContext`monthToYear[$CellContext`yearToJanuary[$\
CellContext`startY] + $CellContext`startM - 1]}], Black]}}, 
                   Alignment -> {{Right, Right}}], "  ", 
                  Framed[
                   Grid[{{"Current value under Republicans:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentRepublicanData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]]}, {
                    "Current value under Democrats:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentDemocraticData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]]}, {"Current value under Both:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentBothData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.6266117341878386, 0.6651560234988937, 
                    0.6578927290760662]]]]}}, 
                    Alignment -> {{Right, Right, Right}}], FrameMargins -> 
                   10]}]]}, Dividers -> {None, {False, True, False}}, 
             Spacings -> {0, 2, 1}], 
            Dynamic[
             
             With[{$CellContext`extraTop = 
               If[$CellContext`logScale, 0.8, 7], $CellContext`textOffset = 
               If[$CellContext`logScale, 0.06, 
                 0.5], $CellContext`topScaled = (If[$CellContext`logScale, 
                 Log[#], #]& )[$CellContext`topOfRange]}, 
              ListLinePlot[{
                $CellContext`rescaleForPlot[$CellContext`\
currentRepublicanStartMonth, $CellContext`currentRepublicanData, \
$CellContext`dividends, $CellContext`inflation, $CellContext`both, \
$CellContext`logScale], 
                $CellContext`rescaleForPlot[$CellContext`\
currentDemocraticStartMonth, $CellContext`currentDemocraticData, \
$CellContext`dividends, $CellContext`inflation, $CellContext`both, \
$CellContext`logScale], 
                If[$CellContext`both, 
                 $CellContext`rescaleForPlot[$CellContext`\
currentBothStartMonth, $CellContext`currentBothData, $CellContext`dividends, \
$CellContext`inflation, $CellContext`both, $CellContext`logScale], {0, 0}]}, 
               PlotRange -> {{
                  $CellContext`yearToJanuary[$CellContext`startYear], \
$CellContext`yearToJanuary[2008] + 
                  11}, {-1, $CellContext`topScaled + $CellContext`extraTop + \
$CellContext`textOffset/5}}, AxesOrigin -> {
                 $CellContext`yearToJanuary[$CellContext`startYear], 
                 If[$CellContext`logScale, -1, 0]}, ImageSize -> 800, 
               PlotStyle -> {{
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]}, {
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]}, {
                  AbsoluteThickness[2], 
                  Setting[
                   ColorSetter[
                    RGBColor[
                    0.7029983978027008, 0.7375600823987183, 
                    0.7294728007934691]]]}}, Ticks -> {
                 Table[{
                   $CellContext`yearToJanuary[$CellContext`i], \
$CellContext`i}, {$CellContext`i, $CellContext`startYear + 1, 2008, 4}], 
                 If[$CellContext`logScale, 
                  Append[
                   Table[{
                    Log[$CellContext`i], 
                    
                    Row[{"$", \
$CellContext`getTypescalingFactor[$CellContext`dividends, \
$CellContext`inflation, $CellContext`both] 
                    10000 $CellContext`i}]}, {$CellContext`i, 5, 30, 5}], {
                   0, 
                    Row[{"$", 10000}]}], 
                  Table[{$CellContext`i, 
                    
                    Row[{"$", \
$CellContext`getTypescalingFactor[$CellContext`dividends, \
$CellContext`inflation, $CellContext`both] 
                    10000 $CellContext`i}]}, {$CellContext`i, 5, 30, 5}]]}, 
               Prolog -> {Antialiasing -> False, 
                 Opacity[1], 
                 Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift, 
                   Setting[
                    ColorSetter[
                    RGBColor[0.8175478751812009, 0.8167696650644694, 1.]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`democraticRange], 
                 
                 Setting[
                  ColorSetter[
                   RGBColor[
                   0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]], 
                 
                 Map[$CellContext`rangeFill2[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.24509040970473792`, 0.2964370183871214, 
                    0.7451285572594797]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.1837949187457084, 0.2225986114290074, 
                    0.5656061646448463]]]]& , $CellContext`democraticRange], 
                 Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.9502250705729762, 0.7982146944380866, 
                    0.7878995956359197]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`republicanRange], 
                 
                 Setting[
                  ColorSetter[
                   RGBColor[
                   0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]], 
                 
                 Map[$CellContext`rangeFill2[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0, 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.6319371328297856, 0.10934615091172656`, 
                    0.10180819409475853`]]], 
                   Setting[
                    ColorSetter[
                    RGBColor[
                    0.4977340352483406, 0.09021133745326924, 
                    0.08480964370183872]]]]& , $CellContext`republicanRange], 
                 
                 Opacity[1], Gray, 
                 Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift]& , \
$CellContext`republicanRange], Gray, 
                 Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift]& , \
$CellContext`democraticRange], 
                 Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled}, \
{$CellContext`yearToJanuary[2008] + 11, $CellContext`topScaled}}], 
                 Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled + $CellContext`extraTop}, \
{$CellContext`yearToJanuary[2008] + 
                    11, $CellContext`topScaled + $CellContext`extraTop}}], 
                 
                 Map[$CellContext`rangeBox[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0]& , 
                  Map[Last, $CellContext`presidentsData]], White, 
                 Map[Inset[
                   Style[
                    Part[#, 1], 14], {
                    Mean[
                    
                    Part[#, 
                    4]], $CellContext`topScaled + $CellContext`textOffset}, 
                   Scaled[{0, 0.5}], Automatic, {0, 
                   1}]& , $CellContext`presidentsData], Gray, 
                 Map[Inset[
                   Style[
                    Part[#, 1], 14], {Mean[
                    
                    Part[#, 
                    4]] + $CellContext`shift, $CellContext`topScaled - \
$CellContext`textOffset}, 
                   Scaled[{1, 0.5}], Automatic, {0, 
                   1}]& , $CellContext`presidentsData]}]]]}, Center], 
          "Section", 14, Gray], Attributes[$CellContext`shift$] = {Temporary},
         Attributes[$CellContext`startY$] = {Temporary}, 
        Attributes[$CellContext`startM$] = {Temporary}, 
        Attributes[$CellContext`logScale$] = {Temporary}, 
        Attributes[$CellContext`dividends$] = {Temporary}, 
        Attributes[$CellContext`inflation$] = {Temporary}, 
        Attributes[$CellContext`currentRepublicanStartMonth$] = {Temporary}, 
        Attributes[$CellContext`currentRepublicanData$] = {Temporary}, 
        Attributes[$CellContext`currentDemocraticStartMonth$] = {Temporary}, 
        Attributes[$CellContext`currentDemocraticData$] = {
         Temporary}, $CellContext`startYear = 1897, $CellContext`getReturns[
          Pattern[$CellContext`party, 
           Blank[]], 
          Pattern[$CellContext`start, 
           Blank[]], 
          Pattern[$CellContext`shift, 
           Blank[]], 
          Pattern[$CellContext`includeDividends, 
           Blank[]], 
          Pattern[$CellContext`includeInflation, 
           Blank[]]] := 
        Module[{$CellContext`dataStart, $CellContext`data}, \
{$CellContext`dataStart, $CellContext`data} = 
           If[$CellContext`includeDividends, 
             
             If[$CellContext`includeInflation, \
$CellContext`dowJonesByMonthWithDividendsWithInflation, \
$CellContext`dowJonesByMonthWithDividends], 
             
             If[$CellContext`includeInflation, \
$CellContext`dowJonesByMonthWithInflation, $CellContext`dowJonesByMonth]]; \
$CellContext`data = Drop[
             If[$CellContext`party === "Both", $CellContext`data, 
              $CellContext`nullOutMonths[$CellContext`data, \
$CellContext`party, $CellContext`shift]], 
             Max[0, $CellContext`start - $CellContext`dataStart]]; {
            Max[$CellContext`start, $CellContext`dataStart], 
            Drop[
             FoldList[# #2& , 1, $CellContext`data], 
             1]}], $CellContext`dowJonesByMonthWithDividendsWithInflation = {
         319, CompressedData["
1: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
d4ivWJZOYw45p+CwMaeMwL5Hmu/XoC7+35cJvFl3+q4s+pmPb8CFYMxnWwTe
xn+oJCC7aChyXIPAjwVJPQbI44c5Ty7roe4f2FbBq3sLcXmwPu4C6vDVkoND
DT3I74MsR8B9B1wN+3COhlfiPONXMFfsYckw+jzL1ctQ32806IsJIy42brK5
xl/GADRPBCaBpf3Jri8RB1/bBa8+DqAhfq1S0pA3gahpn72AaVAA+fZg+vwV
F2/5vLyfAbf23HmS2kjDVGzA/f3zfdmJBPZX3Ew4vObrzjDk41SM9CGgekQC
rQN5XflmQyrm08HDs+PdOygYGJTRuYb5qchUw0npEAHLiOJhRUsa2KaAi/Op
eb5/GP2Z5TptiC/BwC5ebdRNaXPWEzAHtbyq9i3A/B4k2vRhlDHtbwxoGLdO
vLQB84jmgZdbZzDBjL3++UzU4wdT50NBDut2/KhLUwfGhPBpXBex7BfzYkzr
bUGTFTSw0lMx4mX31A+Y62JEK1L0CTQOqMw32435Rvx0w5wB7BUs2UdeNiUG
jK3BHmJ6fWG46ykCqbJ3xK7l0FCnwhrAf/sfbmnwP83S0TAeImpAwHjqRtjP
5oh+qcV8UOIbMOyJ6zFj82v7cBBz6+9QWVv0HQQjRiA8l4xVMZo4z2cdP6Mz
Zvzn51Ox9DbqvW3V73n4mttTMPr5dXq676Ge+zz6uOcRDXffJ1d/3kuBujJL
wfC6xTcmryB+k0dcS1+hfx5hyY075gvVrz1hkzTcZsFIC197jrcl4nPFnkWc
g7s0XFHe4CqziIbzQqwgjOeRIvlwRIeCmWsruVNR93wvZUd/Qb2cvWpt/u7r
DEjr1QleGU3DO4o1iP907J+e+/98x4Q5T5ebSchiDmn48qEZ/WJk8xLOkHgC
/icSUpwSKbiyeVvVdeyz/Yy41meY6/1lfPKVMrFP9G2l+nxxPgu5T4/y4nNl
L6osnUvgyl++Qg08jw+ZUYMhrymoS/EYS/5MQaejN3s/+oOsf8fDU9iDvXvn
vNiHPZp7oaiPJe6z2Ewr/ttKGr4E9qxg5YLYotpdfDhfkYc6LstxvW8rPynb
dxJg+yt5UBj7vO9m7YdJt9C33YUpTz4K1n9ZPi8F57Lt4tcZ3njOC2bJxv8a
o2GR9Hj03jTEp5FpvXchA/zXpRbtQV2oZ3+XxZCiYYt4kFcq6oyReqy7IuaU
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
Tdyt
          "]}, $CellContext`dowJonesByMonthWithDividends = {
         319, CompressedData["
1:eJxlWWnATtUWRlKIUimRaxYJkZRKjyikQSgkJWMqwy1XUVSSISnKVJFIiIR0
hQbJkCtCEkmqS+b37L3OZyih7lprD+fH/X54vd/3vufsvfaznmGdCl36tu6e
P1++fDvPyJfvkTuOvNLmX4SLm991qlQ/QvHlV75xeSlCmzNnvHZdfovHGhbZ
PuOfhIWP93w1GUSo3WdG/s/OJNz0/O61r39K6LzquxrdLyFU6V/gzbPLEG5p
9viJcw8StvJvd7e3aHGoYL0S9VNc/0vLlyf1IXQ5r32Df/+HQMPW3f3le8Z/
P8Wcd+9sdEFnXseOjb+32WOxJd/PBQqPsnDrS7Hmr0VP5y3k+6ZdN9x/G+Hg
kgVn7B9twDed+kB1QofvPttzYdkUc59vdetbzxF0+XcQ5lyw+eYfKEXPjw71
W1yScEHeTZt6fE+44c5vX+34l4Ws5onlFldeLp8knLXxklY/ljFoOv54oU6v
pyhaudozo5cRCuiNUvTQH+O/dxAF94+ulhTLYTCufuCTWwl6+f1cv4kVXun/
GOEq/UnxcF/ZscWLW37+teg4iz66oUNo9eibT055hyC7WH8e4fsBB6vWOTuH
qXb2V7ddk4Avek6BGhavrX+2+ReDE+TTnxSXHt5dv/SKFCu+nn7Lx0cS8IdG
XLQjh+v0g4chp4Wr85BrtfQfww4nkF08WpiwbU3ves8t2YcvBpe99qGbUyyV
MlZLsPn7trnanx7GW89VXTl8tsXt17x404N7Cccn7Ro3YlgOWq4mh9BxzMpj
1ToexLEW9w6/dpv19TiGxg/u3Vxx5zFcvORbPjmLGwe2f+/qbw7j3ClXvfPv
a0zES7MzBnBJCS9z1ZZfeRhVCg2Z0OQlQi8pQ6XjWHFfeT7iIxgqx1g1Dze2
u+/DL3K5eI4tnh5a+/ZZOdSsUO5or7YJqstl3kjRWrbZilD3HjnJPFxTWq5k
/XvCgR3z/uzY28IMkoNK0FwLwPi9u/Vl017Moe6TckWCrKbXfouXTnf//bfO
Fl2f3dFwYPsUDRTYhJb/uIghafDJo4VPTHvIQsu02fjrp/jg4Z8fG/UKgYvc
6PndhIJrxtR5smaKxgKLRwgPPiFXIPzUVAqRog5324SthPEjhjGECfvw7i/L
i6d4Ro7nYfJ1IGiZeiUov6Vvp7M2Er6tuPPEM3ydptp4KbhIU2+4glBVGzf0
Y4riLReM7z4yfI7AReJKkcdH1m9zH5RCJB7vFpPGnvtU/fcNJmwt3LNirxSr
G8vODKr+NnTqN3MPQ4/1jxxWdZNvJh5XBmPrSCGZLxRWBLtuFX/zAP5YKR/M
w7q9skEDhfvacM7c31KmChZ/JodXNKhEeFVuf2Pq62VRvOait+xswlslZn7+
5cUGegxc5+sqCSJy/n428sm8D37o9ERLA0H9iWmpP48EfNNPlr6ch39uHMmd
aHHqOvmfgbY989vZ8y7t0O16i+cUIAS9PfPIHSVHM5WF8z+A0UpsKerum1/l
t6GEU3PSLXd04XVLWR8gVDu36OJZAwlFuHoDnrKeVwh3KgEa3KqNZtFdCx/4
yqDL9G31LN9XTr8vEb7U/iZMFFietFjF3TdmpcUQadN2xvOmxeidPfP1HWKw
QWiibMCBxefMiuv2JtA2mmqgbXqCMGV1eaZ0inVUurudoMf/KOF3eVsyhbB/
wyK8r2dOcqXI4yzFsEGbP7r3WOBRwoCnZl7R5FICf4lLQ9Bt3BL4w0S81dEC
ExoJzKdY3L1n5uTV5Q1+kuUXTGHk+FsQ2jEbXcb95vggq6PrN0KtsdP+qLOP
69NAAGB9vxN2txcGorjuXZWlc4LeEL7mf9+9k3CknDQS40JgvNJAZa5hCoUT
18HxOkFY52gLC6W/PwkPyzLXEJT+3yYoXH4hXDqoM1MNYWTX+7m1U0zn1c2v
YuI5iiouWcB6sPrDWn1mEN5XYjNYx1cpXdtiRqVlp0YcTaBytj6HiYvOeWze
Szbi7qufFr8wiPc9/+MuzEjkcW3BJMTKZpG38C5WEoP5zf771IXzLSrL5XZm
+3Y6Hn5vodvuRrG/7u8tghTO2eBDudwUA+m2qm1SJHzqW98kyO7H1EmjfopK
l+tqIj/2H1eqYNviFg8x29U4TlC6uiSJfaIyeU72uZsF1nMyfs6vF7T48L8H
Jyzizz0idPobQem5F6GPNjJhbXVRukzng6730AMgqPxcT/i1pgCF8dz/1ykl
ZhJOdpSNUjyfS/ptPz+PcaO0tomgNLGWcGutvyucPm4hLPsZ+6ONczexQhLO
0O0SJv09litFUdcL67mF+1uvbxYq75VSVFfiCfclXK5CbaPfCn0Y+sb5BotO
+kX+uwIp8EY4f/L4ISwueXK9WWd9f1n05qqmW6zXzaxerm+Z90rJxi1mD5S/
WJRTYbC4T30U66AKl/U6R1D5nmjiuXAzMFOTx1/APUHbbjuhucCwGWGplPP1
DP+Op7J1B15xn7exL3NCA09bSPfdOzyNeiruaB7zTAMVnOycFAYvBF9BGCdv
i6Uev4TTxwUAhLYqJNbrMvu+22cVaVolRS8lMIK2dWmLvucPZWtFuEJs7MUp
hqvBDDgM/pCg9oL7shu70v+cZVGMu3Znz4yH79JCZ+erNuyEgaBuUw8+p7aD
uaUp4mPaiwu5whT9ldrfyhR9p/NPBrK7lgtM5PEFVQTBBh2FLjcwH6uQWzRR
Q8K41V9Q7PumHx85vXUA+zE9GIK2C/Oi02X6P98/+Z633//ghwy/+8vOPtC8
FkFtPe/vAd59w8mEskKHLQlS1f4F2E+LjIwmDFKC4jxRphi3pME9QsONCKLq
X7GfnzVZNkJg08yfSMDiycBknpbtT7L4hV3znOdt9ItBZ8UNFmmanf/jzBZ5
5Yxfr4Xahq8ovrr8kqKbBhKC2sjB4ZyDXyG0UENtve6wbtQV4ibvfy3yKXAJ
g6WdOB8438s41gM3sQ6DlbAtxJ1v/D3x+pZA3E27+xI0Uj5M0VaW2ymcj4Fe
jv2606c04nqFyO/WoNc28kFr/Q95Pxb8YtbnSvvcl0rDU23MJ4EnXF7L9n9s
5/Yh/ZhHl71ciC5qnuF4u9BTs0yHwv2crtmIl4DbwBdBz9WWTs38gtrvhSHv
UdQnYePv25qYyxgEzLi8DoEb60g3oZsB2fVdXgr6RNHHBn6WbhnfnXxOMDi7
oSDEokT9Gz5vPTG8Jh4nFhuMFCLjsZBzHe5SVFTCILzXTpDB/CvHNpf7QmwD
+9uAl5t1AeT70vq+pKhze+qLcaG4/x6cOqZvM3CGzUTecbyZ5ejAn65/bMyf
QzUQEuSvuyoHvgu+zEDpnXVi8j5pYBPPS+HJPHmhGgjyeElwmRJS4nGS6dtI
iSt7yOcA4/Ox9fkxQVfTofGNBzL8/yVxanoOatPSBJJKut5v8L7Iau0U32yQ
H/L+lnxeslEfiqmQc3/cIsSV6aTLHRRzzgsKnEynzr9QrFPwRUGfLEYJzS4y
UQ9VRvqnCPOQoC9OvwMfUNSJgKtCegPOLWITxgVdtPF7h/uJMnOOUOIjNGQX
ta9s+LzxeT3z8w7H1uuB9fUPOLd4Ug+W0OHYsh9HnbYopQEth/YKOPZHQm/c
pyHvO55lHZcxwgjjc5Tx+d/63J94fkk8H+Z8zs6D2vOFBmq7K1o/B8jD3s5y
AhR9o5uHcH/pginixeUk4/Oc9fMfg52jJGBnvkRj6EyuG1elVME8XyeCqOCa
3uRzp/X+zUacuzlD8M825oswf9rRSQwu6xCz2F2nsv5yfGLxRXFBsI24D/MP
lwsz/Qk+qYTEx0JZnwf+V/qoEHynwS6x6x9lehV89L/UOGT3CX2idMR8o7Fx
rfV6mIv67fwi93EfMSaBX4NPTv35cP4RmzbW+vkQ+VxDXk/SOL87NEECRhJz
18ijQvis9/56j+g5kM+nOe9HKPp6p+eBx1NcqwE/8xVBF9y+Up/XTJwT9NNA
yP69njBvph9uXhTWZ/G2xI59FtIdX9cN/ZrgB1an8byORbVkQyFnWD8PtJFf
HI9bqNwyTysMSlnoWPIGzk2c2s9jnLi5Txr1xuXmbD7j5gLkdSPDvR47+7rA
Y7fphSnmpYPNhVmMzzsU80bwmUtERgeSz0EWtTWw2pgPazaRk8zyrNrINib6
hfPUSFjv/1JoGfOz3xR79reFjq/es3G+6vCXRv4M/uA1ibeJjXnL+aqMZ4Kf
0vIvM55XCWojyqRex7P5XnU1SqnnR4o8F/xy8HefSjddZLw/SD1+Ep9nMp+x
TWjqMuvrmIcRAofVFPflcpqNehly3pV81aK8ToUt+z21qfdYr8sHfC5JvG9M
ox9uyVdd9V3wGRZ6W+bvUN/Ab24dNp5nyAXBN7k5kPXzymy+F37v8Ef4UeLv
mizXOf21nk9SvC5jlA5hHmR93g46HuYUnHenyIAsgcYRrlvIFy5n2jjPOyDl
2JXxqat/4v2dwZtvyI9FRTXkaexr5x8In02UAWEKheETIW/xeUq5Z5H318bj
OOPxwPNh3WHeMF1i5OLU84uNuHfnn73Xl9IU57NhnhLO1fEExfMaLuOPdyne
T8dOV1HUBZfDQv9m/Rj+LtV4/ESWB0OuCXOqMYyaLX1t9PtltIG5n3WQyf0n
2xtpcJSrd7BqNs91fWNj/tAX9idu7msj3yhdbDJx3a7/+Zzl7TsU/aDLhxT1
Juiqyuhs9kEqQOwLBQYTMr5VWub7llchyp4DSfetakzR54acGc7R8a6NeAlz
ZfccgiKPh3zjnnOw3xD6+DHL7XerEJvot0Med7rMeJP2aJBG3Q6+wz2fyPxr
ON+QR7V9a6TQtt6S7cO92pgj4nMCDfaHsFxk+syQt1Ksl3Y7Hc6dfb8OEsKc
yMTcG55ruT7P5pTuejbO5YLvCtd1/oK8/0u9nzBxzvWRjAF3Ep5VQTbQZa8w
+Fno4DuK87/Qj0H33HsLjTtLc3EOEnDs/E3O+4Qk3l9td41sXhjmg+G5mKtv
EvO6TMM6NE5j/d0c3fp5goXG6iUhV5qoc84nJ36+lPg5MPkckIvPzfSx3cnw
3M9EP3ta6HEI65GMXS/P/JXzLWnEr8slnGdFxjj/OZ6xHn/k/Sz550LZ54M/
CfoZ+tm9kn8uRH7uZ6D0WZT8c44Mj4HX3dwj9KHFjTrwZJ8h9qG/9bnVRjyF
fBd8i5tP2ng+ge90PDGTor8oWVaesBBUxvNsnOuE+bu2YwHOoZxOlp2yPo/Z
yIOBx4JeBn0Nz5fccxX2BUrwFtqW9bK5ti7rbYrPN9RmnzT+OU3wvdmcwemR
iTnK6auJuTbgRbfxLaG0wKtzwFkCHYOND/M8QrueL40/8oLB/wAYuPlN
          
          "]}, $CellContext`dowJonesByMonthWithInflation = {-36, \
CompressedData["
1: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
+G728B24N/8Dvr/mWA==
          
          "]}, $CellContext`dowJonesByMonth = {-36, CompressedData["
1:eJwdmgc41e8bxo3skRQhVNoh/SgV8oiIlBUhklXKligUESpZRfYqUhEJZYRC
KrtkhayQcc53oEn1f/rTdZ2LjnPe9xn3/bld1tp7mJxkZWFhUedgYbERs7AW
s2DAerEtsHOOBKF6ufFK3lmwsl+4mHWRhovye16Z5VIQX7bWb9UtEpa1nX7A
lU1B+TOfpVzOJESLzb+YTCAgLMN6/8YEEkYc3O9eOkDBujNlnH0tNBxLOGmZ
cJKGILf7Gn/1ZuHkh5CymHomLH4+pno4m4CA3avOuEqR8Ev0sYj+AwpevGvf
Uv0fBcqR94hfEUywvCu0g+lPAiX8wLtOioKa3coP33nNwrzRMxNrJp6H31rz
lysFf9OfTHwbooGttaGE8ygDnuRT4+FJFGidrTzcHEKBka2fUzWTghPavr+V
2WmoP3Ul7lEKBZ0HY4tF2mmwe335Ug4+n5/j3ycDvG5r668tpCB3WGjyWx0F
7mH0+t0uFAiVcAZMvydgTYyEKa8vBaJOUapFqyk4XFM0rNQzA98ijCSZYhSk
hsNzhTkCrNQqGuKsKDC2iJ05zk7gORfWy3QTUGcePLK6iAlVS1uvbY2j4MtX
8XNduhQIyGi9or4zQXjJ99BnZ2ko4xHWaeabhRzPvhTX3xRsdds0IqtGAE9A
NVcuHwV6F5y8ouPxsXdrU/N5GtQ6V/2pXSQh2+aLRs8GCtysHzoE/2SC9mdZ
611nKEifEV5VwM2Eb6XWPqcpPN/KJemyBhS8GmiJMzhHwmxErlkNnv/HoF+8
OUGCb7HKLecECqw2f24SmCahquLgoaEyEvRWjmbXLRBgyRt6W86WgsRvKupZ
khTYfdQrJkgScvvqStJxnprirhYKrML5OFC6WBZFAeO0X/3jrRTsGhKAPH0K
Vg6suvXjDQELBzWr2HgoOFb3N0F2LwFUvfF7DRsSZH0e+R0LnIF42WuNIq8o
eHtt2rg7agZq6tZ6PTMiISM+/65nLgn7XwgFPqyggeX/HxQ4n3Zg9/qB51uq
FMlxnYJV9wZ3GfaTEKu7q8juKglf09i3fT9GweTN6q4iggJ9nyijiJcUWBgc
4yscpYBKLT0xFUKDokzElLLuLFzzigufWU2CWYqPTu9BCiLKao5a9VMwvfrp
HQ8eGrLTPNeMryPBu+XEsesReP6fZm+vR1LAqWgQeZyVhu8yB/c+iyfB67Vz
dupGChyIGNvX5ym4tfUqq7osDeVqaSqEAu4b48qf7Y8pePghRr+zjwkZNj9c
FryxTr6VHuq/mdB2SVa06CYFY6KcENrMBIMEJT0NioLaThbFGR3cH70WTS2s
789LqyJ8D5OwMXvvlJsdzgFLrt/jahJiRl/7T4mToBqutv5EEglLMwKcZ44w
IGIueYVIJ+6JvphQ8D0mTH3iunbPgYJ9O20q9SJJCOHZyRZ6hAlKBg/Gti0w
Ye+SHW/HtGbAd3PvIc5xErautes2sqCAKT7E4ricBtPA5ipuWRL4SgNUycc0
aO8+lNIQQEEHX/U7vmqsb+dTyQEGCRxr0hQMntJQ7O7kBwMUKL4qXTBQJuBR
07WPu5MpENMYGbbqxeefN9QTxfqVp23desWdhLC6A4rn6whwV3upU4r3t/is
67DTiYIM20dx50spEFeZvuq1BL9+t5sl7xHO7+KF9kI9CkJlVtzh1qZgiIX3
uvY7EjIjtmzt4MO5AItGjWAKnpXf2xHwhAlzw64Ciq2ob+qL59rdSBhSG7ET
FCNBk3UqQrqIhPs/LEBJjIBJ9om4p3EE7B1Nj3X2oOCPbq2jIBsFDX6MnvOo
M+kyNddiN5IQZZOS1naThHq6d5/EEwpkXvHImeP5fL5eDLIzJ2GifknJd1YK
vjX9TF/rToEJt7pPwgoK+hRrOr7g9x/SpVn7A5hQaTzRpmBBAHAI/x6RQT1c
a1U3u5IGC47vqf3S2Od4t2IX3GNLAWeZtr0U7Ky5FlBoTgMRm79MHPc0dbPa
GY3t+H7PPH+bx+De8mv4jF0h4W9UUSbDlIKlVwtanXDeit6v8XjcScAK07m2
LtSDl6puX560E8DIcJkQv0SA84MAO8MSAkJKqMUkfN+l//8gwbpfqtIQ91/9
esM7NaxLjtH1GEvc24HpSNOWAtSf9d/c2zxI6DctZ2WTJ2Fut6zd0Q0k5I23
l62JoOB8UjGD7T3q5TL3hx+xziuKd60NWE7Bfue0iE+VBMTnvW/rCsT65ufz
puXgPRtSp2PNGMAxuHeV67lJyDFMXBBFPTUx2fP1Fe5jokX5patFNPTVtXGY
jMyCTl+ayPEFBkTeW1Inr45+MbY9qgVoaBr8IHJRiYaIW8dTN3+kwdXy7JR6
DwX190tz+lVwv0Y33jPH+XphGWrAVGXCkvnlhpbYn81/WXeN4Z64iOyPra4n
IDtqjaSqPQXRY3tixvaQoLC92aFjhIR9hdc1ClGHHjC2+1T8pmHbxzUPX2D/
vCyjtmvspIDj/XrJ748ZoJSUoxAhjPd//yGpEevrLuixtHsC52Rm0tSplwA2
F5GBI88oiJy5fPElzo3Kee+fe94SoPXJmdNXlAnvL3CfmMX5kx9w8rgWy4Dp
g8rCcTtIOHdw9bXrqAPuqaNVF7bSMF4re0cX+3a8xrnX1ZkAQ64Ek+94TzPv
V5Kr8fvVhl6NQgwK+BYMlVeg/wrI2lRxqFNwZiXHtDbOp9ejhMoNmynYIydw
QUUP762g3K+jgf3dVJgbYUdC3fz1B2e6KOjJd+iTqqfgVIFO5tsKCoaP6vhF
yM1C0b2MEZ89eB5J0YNjnBR4C/ul1h8ggZn++sq7JTSUyLI/fIY6si968QBj
cgbEdX79TMP5YNU9baSL+tUv8fha6d8ZuPBwut4LeWXz+h0hVlJMcF/u9+jS
aRI6OQLiDe+SkFZb5bCYSYDPyoytC6h/W35U0c1tBLioFPjIox+O+Qt4xiUz
QMDwjP+JAwTse+7w/StyAseywO8aobivX06Jp/3T06tHrjMSKZCOqI1cM8UE
Hf7AFLsPTPgU4rfg+o0ErWLZw1xnSNgJ/ykZzKJPpy0ZrvanYNMg1/nOMQru
cjjc9MH733we+MxCnIKz1q+EE3DODyQuvy6E+nRf3vXkhVAKlh/aIdGfg76Q
et7xKeqNjjQPT9JTCt7c+VDrmo5+lWNwKBD5YXK0735bHuq4ioxxNO7vyxvJ
sqbILz/eMN5CHQkGmZkuLEI0VH8rKf2C/pgxeOOS0F0Cjlx4+2h3BfYzVohe
w8qE5Qwf/EfCW+kt+4t30DD3veNpozQBT0/Kcy+XoCDp65tGnSIKNtoQrYLo
360pqndOo05bxSUu8k4SUBGtqLEvnQAj/xXltttIeCL1gW1JDQm9t3e9e7uR
BqmEh+/2fqXA88Po2h1GqCOnJOjJYhKM96VIVK2jwPoTpKwSoSFsj+1bxjEa
HBaZHnonkROS+vlWFJBgosb0EoklQP1Zvv6Js3g/5fa2fUdoyHt7a9eZtRQc
ynybHGFOQXBw/c3kEdSFS2orNmpSYBDI84fXmgbVpdMC/qhLH67KKehi/27E
JDny4n51F+Y5/EGdFHmuuX1ckAmyv07seW1DQex4/U8eCvlJfsOChzANzJmG
WrEXFDxpjKiMV6Xgv9WR3qqo59+NXiirBhHgL+z5xwD7wt0TXca6jAIbjZTh
zm4SHleVG5ujT8c9Pp8/mUWC0zulgIJzyDcVLlq/2yiQszqvq15LQElau3iL
Dw1JG5pEzqIvHik38ziKHKw+7+jp7c6EuxOLfF7eNDQL5OSdU8I9mnqiPPyQ
hKeFIild9iS4VLftzE5H7nEzztRBf1Rs3UUbZ+Aea740VcgiQDXwgF2GGwVX
M3hbRttoEDwllPYSfd+0jfcq118KErbYqsemz8Lr1xFFrtbITZvfji4j0Yf/
rL7s8puET0Wf3Zajjk7m3ew4h/snzVA4kdXGBO7nC49jenA/lyUr7nmNe58T
Ne5wmQaBiDr/u+MMUBDxJd4GTMHSl5MuI/MzsNdnk6w15oZdV3L8k1BnczuZ
7ENqyM8Ve3j8kLeW3HjwTU+VhGrzPMf5MBIO5vCovTCdhq8Cq0I98X1vSvvn
RXvivjwrKCvRnoHGwuvFLncZoOJdZbmAueTB8ornEZK4l1m2nOeRywc99d7P
LiB3pKQ/2fKLAW8X8io7ljHA9OOR3tPbZyDFoXllVOks2I0F56p9ZMC+TS3G
GX6YOxKsj/6Wm4A3PKpqfLuRywwyQ5TGkI8aT3Udjp6GOrejN7jPkiDzt6sn
l4OG+6/kG7c3M8BA0bzJw3USNrYWprMnT8FHnlnWVTkEcIWs4Q5ZMw8zL8SW
55Z/hei6vMieQySYyxgJbSycAZG1Qs1Ba5ngH1RopixJQ2CzXdRlWQocMzpL
allmgJ3vydZ09KcIjlvHciW/QuXZhFABvTkQsQ3K2t9BQ0ehalJbEuYFVkWn
fQKz8FeYu9r3LBOo6u+DASQTNp+LUCnEfNPF8u6NtCjmMmGPp0x7GuZbE8fL
hwm406/5NZ6TBPaA+BRLLvQnjztBBMGEipAk632HKFD1qq/Z5caEpyCVVztE
Afv1iimrIRJWh2hZXkWO/W6+Vswgh4bNUTZTr/DczziO5n7TIYG7IoVoWkXB
4sMDyT+DSJBI/TR9wpYGv2zvomtyyHUBrLqtUjS4ZdM/LVGnRHsNn5ivp2D9
8vKwxVsUbFAU6G9FHdXae7pxJ55D+7iVYwjOf8Dm36uPoM5tO8yao3+EAl/W
BkGjU6in2XvWTL5jwgmmqswi+g2HBf+lK1cpeLch6MHeSuxrmrrtVdSbyeUH
nj/GXGTfcmW47DP624qV/1kip59bseRPtAsJd/TMyxTR3/YamN0aRl+ufhka
XTVIguTSc26B00zY0J/ha86L/j597fJ+dhLGX7ArHnegwSPAYrNcH/pMXUuf
5cgMpCeP+2nkM4BL6XBH7jUGPH5b+irUGHVjA8vOW+j7cwXjgRtwfixO7lx8
jHNz8aGH2hrBWZi+1Cd/GvsyamRQ9HpkDha/SNXPYd23qep+44wlod1G9IwU
+uyXvE+bC7fQwHnKrWoY9/kiVcu1+iLuSXKPincrEx6DwNUBR9yvjhW3lXIY
kJqofZFtCwnJE9t+5ONcB3w//uOkBgF5h5ePcETSYC6y7DXBgbynn9L/L0eb
HVg7ML2NgvA501driglI81nnPnaBgtkN5jIXWUkQjpcxlsB7RLq8jpnDPr/f
I633FDnRXdZm/yHBKcjeeOdsRysFxbxfxqauUQA965b+xHwwnXgoJQhzj5Vy
7JMu3P+rvH94daYImD03FpqLrwd2n68/OUhARpj2Hm8v5Mjn/S8U0C/F9fpv
Pl1DQGHyDgFffJ8UD/bFkDkKdGVnrpHPMf9m3PAMRF2crdki2NhLwpvYid/Z
lUxItV21TW895pAVH8xyvxPQt9vxc2wU5rRCW/5VciSQ56RzpUeZ0Pl5o9jX
+wS8tB9cFY3+P35/z/wIch3rr+4rZugLkaWn995difP32pV3pQsFXCeFhVrR
p0PaxaJF1/+b08FoPcxtM3zMFXKo781jSaJeOFdjTkaaWZhftlWaimWgL7ZT
TZam6Pes8ukTH4CCvyJJx+vvIE8nXK482UfCNcuGWeI0Bbmwq5TtNglGaoJK
ZzFvvWWOiDe9oUDDJK/kijz6kcv7W874es+bdiaZ4n5k/sq16HAkoaO+wtQU
eeGRf7hZO/r2MVWL5EchJFjd5HbLx7p9ToxSkcD3OSDysngzctfSaa4ea9SF
tnRp0c9ByB/rrb5PYt/zjLuv25dQoLBf87ZSFQH636cux2yj4Vt61K82zJnz
lkwVr4O410uj5ofykbMdk04S0jRIdseVvMZ+8zs5TyQihzs6vZIvdKYgxv/e
fo7VmC8bU4yKf6L/rtf+4VbOBD+H3EuCLaj/b2tCFvH5Gow/zhvRr9yrZ/IX
/xAwrO5yEmxIkLZdzw88BBQlHoO+LUzQXNnVexfvq6u91W3fUpyr6J2xbHje
0Lrm1DHM586Zyd4ilcgjX7+82YS80cgt11D5DvUuv45NGzkwMLVc4X0d8nzg
wqoe1Ilq94OZVuq4n8XV30trcd+53jx9gv1fQ5p1Hcf9EuVeqZCLurFDUkog
aRDPFTGInwRsURvstkcf1Zn+3BmCfSiMMSxeO0nhHh25w9lIQsB+iR0X0Icf
qoa73uZGHTriHLT/FObYJ6xc+8cpkPwd3tcnxgS7ayL3aOSFcWPXCj7kTcva
fraP0wS4qTddzDiB9Qr+cM7OG3WVGh56Pof5WP4Op1YHCdP9czXz7Zj7JFx6
m3GeyjZqr9yPe6Ymrh/SgFzSqXf+pQfqMn14Ur0dOebQ9KvtNO6TdVcleyDy
056Hwdcid2B+fvqI1LuNfN/K7yGJHNKyL3vs8Bz6PMNIsZAD/bQxa7c06rLd
S7ubaljnF/eEita3k3DsBnf1BgXknoGFsOc47x9u7mU3nqLg5O30Layon7W2
9ppJuG8/ta0Siwtx7u01Ph/GXFkkXOD8Ezl+39C6x0wWGt63xZ5ox5wY0f/j
fZMABfGyEl49XwnoSat7q4P6Sxf0hjShvjmwHtRXxnk16miq+1JDgPeIS10F
zs30D9NrlkkE8HW93OiKOdZU2Z1xFOef/9v+s5sMca511j2JDCDhF9u5EoGL
uP+psfZ7kNPKBRK7r/Wjnv5nRi0gN+g+u8C75xXyqd69/hCcrwbODw1KwSRc
cO3TknEm4cSgfeaxZySsGTBTErhKQszzj0XPXNE/bCZrXh1DLic9J3ahvz1P
diRuY05zO8/Ke8uEgtK5whmjWRLOX7VQunGfAqegTDtpzFn3GlTSq/Fecwmn
PYMwL3WkyzTl4f5rSOUp39CnIGz5dbNyvEfh1XzfrFEC8q/+7miWo+HxeOXR
aU0SDi/rTm27RUNlMLM2GX1u40+Rnh/4/pxjzwV98PWrIlO6ujtJ4PHN5PbN
xPt9elDWjHwb3ctb+gjnduOFLB+DKxT8NvC+eRHzbJrMkW2lYySEFQS6lf1H
wqM0G9V7+DyDeufaWJwjnrR248YeAsz1WcXNkMcij5T3GhEUHE244X8f9Vv4
5U/+mmwm8LV8ct+JOT2hl2jhf4d+O3WiNwQ544+coEI/6nuw7qLevU0URMnR
vIexjgHjR5NUvyC/swwe/Ix+82DinpMzFwlFHaRWlyUFUgoG3rnIxUcuVDTF
Ie/P3S+77DiO+Vdt5elY3JdR24Jtd/1Rv0nKLH4DAbl7lWV4CALe6mc5smL9
z3+3NWr8TUCUthJveTgFXS1bCtfrklCxiyf6Me5NyLuVxu7IE/nBHhd89lJw
vaV0jhvz+vhWk+jQTpz/VLcsJuqu3+kwZ0YVzmfsyZQCM9TTBybuJ9APovoi
xTxeUnD5e9vrY7oU/FL0nmjch/PK9vNNyRfkiipPFe4EzL/s22eSsN5WJdXC
t5GvP4wxLwqjrgtuJgSnLmPuyGjJOOtKQExh63iNLebOo2lFRTi/HEnnPjte
wnperzVuO8KE2dxGNvP/0G+guVrciISmk2sXZVXw0b3zL/td1G/BK0NsqF83
1DvYgjHv6qpMcl7Ge0XOdqkt3mfCzLrX2VGsqFtXiiT/4Nxb/V4nzH8Z5+3Q
wp/hbsxBKuKGT7HO/XH7nrEfw3n8qWyfyI9+Qc5lFeG8n928ZvY75t0RkzVx
u/Dnnucv35GKe3dIuP3E8FYS7j44E9CJuvzS8HbkMPKZspv9h43KFNTL8G8S
yyag0bcmUwJ1Y924G609R8KlpZ1byqQIGDuYLyx5mQm6UiPbXHVxjv4rF/Dh
o+HmIbNPQofRF0MsuEbPEPDrcHegGeptzm3RVk/MPzEmv9ofYv56XGL+bUMt
7teumon1y1A3xqxbfiK3zJ8JX7nmA56v5O+yj6h3CzsvVpRLkeB1it/HAHVh
tss3LxX7cE3d+efF5RRMNdnvcr/07/nNolMtJLhXDlt1a1EgEsS2eQe+nlly
fsN2PM/L2IY5I/y+S9eDmfQJEpbYmQT6YF+45Et/p+J9L3oVqhzEe7bJcHoG
/Pv/yZ1eO0uRc+glr29Oo/7p2Nhw8lGQ6MBa34V16M4sCcnE+exXdxV6x4bn
7paW33KJBHuJoAXVZAr+fLzZL4z+Pfx3cWvNPgIE75NpT5AHj1id927Aewk6
LK0ay6eg8cQLO4kwnPN33hHFuF+3GIftYu2Qx2SNxHcjd4XpOKhl/cA9YZ8u
ThElYbTN/6Mv7qNdEat25SECmJuHfkUGkvDN5ujBldjPlQI8G6camGA4c4iM
diUhN795sKkA80JhVOIQ5tDK+RMKdB0J/DRfT5EB5sKEuUPJKahPEwdN+oIp
SE3r3fcV/UPNf/unp9i/pXSB+R/kptMXTgY4vafApImpqoP7zHl6ZFTfG/M8
91F6px0BMjllEU79JNxIetjDhft4YuDMuTJ1AmLZuTPueZJQ1fRFpJMF88F4
AUc65n1micmHA9dJeKs7+FjoKwl7Mi3+zF9AX4+buWWJ9x67qnz2I/LR+4k7
zx7gnuYqHQhORN/KdvvL0H9AgIGA8YUFHpzXZnZp6wwCHL2KV/9Ankmi8+WO
Y53ll3TtV4xDnghy+BaDnL2XaSF5CfmRdxuHcxVyzucvx/ruiSGvWAZkSyL3
hSwKlgwfJ+BLHT1/G/uge2XO8MULJvBzscTHl6M/XRpc5Eb92uanv7kdOa8x
/HmPjzcBKZqPMlVwn898fr9yswINImSL9dxDnCu2qHpl9K3AZWH6p5AvjOPb
QhJRXzUcucfVUD8NnvA6usai745s7S7bTsH+8ll+HuTtP1fknA/hz1dm68q8
6kUOCrygdQv395bTwxMGHwho5ZpzX4++H9Z94UBtGglO4dntXFo4H8XH5Xc+
JcEzKySFRYaGLYfnE5bvQv8XjO8Z8KGg95yDuh9+/S0gqShXBX050XSptCTq
ykk9jrc0ARvyiihZnFdJ9XCTEuTe7myn3aL3Ma9nGc7lYZ0fHZjY+5yfhtoV
L38dwPyptWrZdgtzEhTat9amJhIgkqXILv8J5y8m8oEi5o7dgVw/2QwwdyUn
l/Xi62R/kgi3QF/z15FnuYv9s6PLm8uFaTA441LxdzMFWWlulzKCZ8BRS/hb
aDQFrW1LP8QhPxx+lH+zB3l+1VL7iY3IA6324lqMTBIyP3vPeBcQINTRWL4H
9fFc9nBD4w4CDDWzditinjsaIvXEJo8BYh+X6fiG0hDV9GzHf9jP8lUv0uYx
F8tqKthoas/CYZtAo3/5R1GHK/LAHZyf1yITmatoSG/eHfBPF741Rw18QP7T
714UD9LGvFP3qOOTMAXtD8JlzuB+1OZNzIV9RB3bfdU2H/VmuFB3v90TEobY
PZScDWZhRPJFwa0pEnqC8y24vSjYLRXgVIR68rPkwyFTrM/258Gsz3CPDn+5
uaYdc+3rmnZvo3skPI6x0VDUpmDL5TYpDgWs6ymV+Hs4B0cua+02/4G64y4E
7KcI0N6tb8A4SULarJpxzWkSDOdcDmahv2sWbK07gz6+13hL1Skj5JLRIDJQ
BHVrUqJlHvXkfby8seZ5PMfqc1uHMdfFSrKtbN+NHPrweeM+7G9p8aZ1JjlM
mHxi+noHzuH1XS8MpNA3zFdsb/IqouHqeuNlYkKou3c/FkxjPuNfzwjPwz26
xH6kWgrPXbZ2NlwlmYQM3tKjbXpMeFnM9ZQNz6XvQGbcR9657BCWL4Sc2bvh
0lUN5BSGTPPRPYI09Pmd1OjEPOBwLub+xBsCtNR7tIZRD/3KL3smi1DwlBry
dkX9H1JqFfV/hHw0PFBX/BT3O3g2zBE5eev9L913jXE+Rcy2qaB+2CxpJqRR
Z9Ti7NX//f6mSbloQjkb6+2gGOCIe6Z0Z123HHJH0+jt7SLqNGTrrBgQnSRh
krP/WfAfEmxMrqmb4nnmExSk+f6joWSnx+ScAOYoEe+3U5h7Ka0bj0TRl208
84fEA5Cr//pOCraRcE7O7VkVPg5yFpCyYSRoiomP7FQkocb57KBtBhMieZsv
WPQT8G1Jkp89+nVhWIIRJ+ZS3xQpV7kgEpT35j65iHpqUXP5XaUuAR4tTyYn
SPQlSm35Scx/veajL0uxb4IivgFECQmuwcGDp5C/J+9qeGZ10aCeejmADXOH
y9BSdqNSGv4+/nzPHbndVFSeSsO9t+h+Vbnm7L/fF88J3EZdFQhk6V+Jupkb
U0DfRn0+wjpk1Im8El5XVsWJfNvutWlLlBMJ+gpxnAN7KJjIGb61CR/lgqn7
xs0k1Pm96hjHenLnX29yiSWh5fqQui43CRw2jmYncG8Mh+6nnkQfmWexGUlB
fv1krc49qoj+0uP2Rga5o/boVPTGUBL+LhV5XxhLwzQj1uw19u2wmZCSDvpr
gcqVmlHMx10pVhbf0M/t+V01VP9gztuY2+ZGkKDxIu+q8C0S1l3REUx7Q4L6
i5Xe5cjZKkRgu7s65ijppsOv8f1j+UbkDhaiLxsV637DejU+i7X/gPf31HYX
vLGOhhdirWUnMaeJ/uCZccJ6aLQnnF90okFmOloripOGiR1lf1kxbwSamKtM
Im82wmldGue69t3DhE52AlT1hqf7UD9Y/sTdrmhmgqd6zikP5PKgwralXsiH
Iy/2bGtAfcha9652l/Is1isqSw755cwJroaseLxnh3xmbw32vUTL1Qx11+dq
hwkxijlZYflj7iU0HHDKrK9A37h9/MKpLzhPPULLJTbdmoQFOz7bJHcmbJEJ
7VaYQf5pYRZ8Q12VD5ytVWRSEDc7uvHWUwLSNcOydlohdw4sP716gYTepu/3
lgzh/A6K8h/DeXXkvi1xGvPyrRx/+gPuyf6h6Qpd3OcHWwT3dSPfqFs6SJZj
7tHUlmLK62K+4ens9+0jYF6L13Yc+Xx356u7kfh6gTblnz87USCbeGYqHrmN
y6xVw/AsDT1FCnoU+tGpHxUvf/iTcJRebfvKnYSQmE9Qa4M5a+ZHHNcBCozz
PCPYJQk4tCZ3Ix/6VU7m1/0PMX9N828qOopzqJ6xIYvzCA0/zlguVGHuVflo
V/gR++C9drJ1vJkBZtPZerVLMP+vv3dbDPv8dUtoUC3Ov9PImhx33Nc3A6xH
G9CPbl9y3q/Sh7zcnJrGgbmh/hhbPIG5UYHFbjvfa+QNv7Dj+ysI+F3gaWOb
i3PL4rfHHXM59xv3DY1lmIeUfi7w43mDvgg1eG4jQPnv6gbGFRo0F+VWhOug
HnxZZ78fdTVG9o6LzmPkSKaD1/U0zLGcoSJ825CDvepdOLVImJb85DZmTcGB
G7a+hc8IKHdcjPiDnMyi+F72RDQJOzKF+tc7Iqeez9z7DXmJ2vmf3TLkUbmF
MHNl3M9Jx9QNMgZY94zZ+B9M1I/KjEEr5IlrQQ+kc5DX7i6t8oBVFOxM+7Xc
Cjlvy81WdZPNJCSLWq2PwXmyVJzfW82OOfRDhtIi7lfdeJxU8Tz2ISjJKq+D
gHi7RulBawK69amVoUqYbyROSxhirrpcvmx45ycCMhWZko/Scb9+Bz/gxlzD
Z8J54DvyZ7pyrY4yzs/RJvmxr+nIaSw5SgY4P+Eut5YI8aJvU4mym4uxfuO2
4zW3Kfj7KVJmE/rw72uaZTbIc93mUeb/8p7mgsnib/z6q3DheK4ZCaaHPB4m
ZWBOLvT2DX9NgvZHN+UG5Amptd6M0zgHl5SETPMHKXi15HXhzf2oly94b7Ri
nS5uVTwejPUQY0/4HoT+/uYmI8aQG+e/1dBlRA/zTT1/dx7uPXP87e4fmE/K
c8Z/X0F9So90+uKNvFyXWwcvs5Gjo0zrq5DjdLIXeQc3Irf1yfiF3CHg8mHr
QzXcNASG9a3agfkzrLfAkK7BPfhx7NCVDahrPyLN+fKYIBDyld0fudxMwUl4
x08mrDAc/lSGfD3BnipxUw7787EoThH9ZzF6n8kGfRq6xFdbN/pRkOJ0J7bA
H+89EzBxCOu79rl7+lfkI1OpSjWpWpyTqJjztptnQKupZJiRg+djNQj2vEoD
z5oEC7ZfFEhIE24bpTDnSEdwr0M9Wv/OO+/f76dWEeG5yzF3dbS886nNpmG7
YvKyL8bIIz9v/PLCPYl5VL1XfwUJxdYn5ClNCqiLD5zjbhAQ4BueWJRKQajp
ezc/nPMtrBVMxSkK2LXKhFyRj8V8f6Z2ZDIhKOB4/6wGDcOGCvcWzmKeawWj
cBvM1Stf1vJh/7bwbuzlxXMNl8w5vRegofSd0+y4AwF7eDTPbkBf3WLZdNrK
lgCq4MH7s5hP4iZEvLdi3X32bg5dRD45Z5/Z0yxNgLgz+6O/9jT0/2KRDce8
p9f4m+NGC86n4eZXX5FrssPUIoYwj/HncN0JP8cA++6iLqszWM/gocvuNjRc
UHvy9z7urb76z1tcBST4+KRE9GF+XXjLV1qCfJda5bAsCXm3g9swsBJ9Z8D/
qPwqzBeT36XPzWPeWXpF+vD55yQsqxgoecHLANsinQ02xTT470kkPOZw3gcE
j7uyErCccnplPo7Pf55j4n+MBPH5pBxvzIWR7+8PrcA+PSgWEWnBvQhf6ygS
i/6VEPmRoYz86BOfM1mNPCc68IfzOnKF0FBGu9EkBTMPGwycKBIixwsdN4ij
X/U+O2UnQEEmb8xn9w3YHwc67Qv6+Y3tkTpBici/dQliWqMkqNqqDhg6UHD+
id7iu5XInWfvv3yPP+eqHjaZWEpC6SEr5ZVdWAfWgdx09IPUG6PRHjcoONiQ
8dZyLQkFf2N+j7ig7ixIhOrtJqGaWl6ggXw0bJktfdkdfe3Kj7qjyK2PU6bK
h29i7nkWGnsMz/1r+Os5nn97GtH5WR9zjPjDN6KhMRSMjzbfZK0m4bfyXRtj
nCe97ek+vpiPVhxRqlWQpWAg/9Og4AmcE8XrVk8xV/7XISb1fBbvE762iBPP
/ejJqc9xqMcyNuxy//4OMFdSmGcQ/f2guVTzEOZ7H+5sux6s39pi4UwJrLfw
nxnvjxIktIl4m2QgFxkNPlw6M435/Phi3PInWH/lLnFzzB1bq/tdBzEXcm3+
E6qAPvE6IVicwv3KTeWxkEEd09Z9PFJQRgDrwIZjIejf9x78Sg8PJeBzSq/S
MS6sc8X+9Ie/kd9/P7qyBrnk/bV0jg83ULeSxayZVQw4vE1uz0fUyVXz/tG6
Kwj4H4IfzwI=
          "]}, $CellContext`nullOutMonths[
          Pattern[$CellContext`data, 
           Blank[]], 
          Pattern[$CellContext`party, 
           Blank[]], 
          Pattern[$CellContext`shift, 
           Blank[]]] := $CellContext`data^Take[
           Drop[
            $CellContext`knockoutTable[$CellContext`party], \
-$CellContext`shift], -Length[$CellContext`data]], $CellContext`knockoutTable[
         "D"] = CompressedData["
1:eJxTTMoPSmJkYGB4xMqAFTCSCLCbghvQ2vzBBkj171APH1r7d7CBoR6eg839
tHYPqYAWYU4//wIA9vQFLw==
         "], $CellContext`knockoutTable[
         "R"] = CompressedData["
1:eJxTTMoPSmJkYGB4xMpAFcBIIqC1+YMNUCeUh0740Nq/gw0M9fAcbO6ntXtI
BbQIc/r5FwAsuwW9
         "], $CellContext`yearToJanuary[
          Pattern[$CellContext`year, 
           Blank[]]] := 12 ($CellContext`year - 1900) + 1, 
        FE`currentBothStartMonth$$210 = -35, 
        FE`currentBothData$$210 = CompressedData["
1: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
ZOsoRFOM2Dwb4fQ+xIxsPKA5h2cW/g9WTjSq
         "], $CellContext`formattedShift[
         
          Pattern[$CellContext`shift, 
           Blank[]]] := PaneSelector[{
           $CellContext`formatShiftText[$CellContext`shift], 
           $CellContext`formatShiftText[35]}, 1, Alignment -> 
          Right], $CellContext`formatShiftText[
          Pattern[$CellContext`shift, 
           Blank[]]] := 
        With[{$CellContext`year = 
           Floor[$CellContext`shift/12], $CellContext`month = 
           Mod[$CellContext`shift, 12]}, 
          Style[
           If[$CellContext`year == 0, 
            Row[{$CellContext`month, 
              If[$CellContext`month == 1, " month", " months"]}], 
            Row[{$CellContext`year, 
              
              If[$CellContext`year == 1, " year ", 
               " years "], $CellContext`month, 
              If[$CellContext`month == 1, " month", " months"]}]], 
           Black]], $CellContext`monthToMonth[
          Pattern[$CellContext`m, 
           Blank[]]] := 
        Part[{"January", "February", "March", "April", "May", "June", "July", 
           "August", "September", "October", "November", "December"}, 
          Mod[$CellContext`m, 12, 1]], $CellContext`monthToYear[
          Pattern[$CellContext`y, 
           Blank[]]] := Floor[$CellContext`y/12 + 1900], 
        Attributes[$CellContext`extraTop$] = {Temporary}, 
        Attributes[$CellContext`textOffset$] = {Temporary}, 
        Attributes[$CellContext`topScaled$] = {
         Temporary}, $CellContext`topOfRange = 
        30, $CellContext`rescaleForPlot[
          Pattern[$CellContext`startMonth, 
           Blank[]], 
          Pattern[$CellContext`data, 
           Blank[]], False, False, False, False] := Transpose[{
           N[
            
            Range[$CellContext`startMonth, $CellContext`startMonth + 
             Length[$CellContext`data] - 
             1]], $CellContext`data}], $CellContext`rescaleForPlot[
          Pattern[$CellContext`startMonth, 
           Blank[]], 
          Pattern[$CellContext`data, 
           Blank[]], 
          Pattern[$CellContext`dividends, 
           Blank[]], 
          Pattern[$CellContext`inflation, 
           Blank[]], 
          Pattern[$CellContext`both, 
           Blank[]], False] := Transpose[{
           N[
            
            Range[$CellContext`startMonth, $CellContext`startMonth + 
             Length[$CellContext`data] - 
             1]], $CellContext`data/$CellContext`getTypescalingFactor[$\
CellContext`dividends, $CellContext`inflation, $CellContext`both]}], \
$CellContext`rescaleForPlot[
          Pattern[$CellContext`startMonth, 
           Blank[]], 
          Pattern[$CellContext`data, 
           Blank[]], 
          Pattern[$CellContext`dividends, 
           Blank[]], 
          Pattern[$CellContext`inflation, 
           Blank[]], 
          Pattern[$CellContext`both, 
           Blank[]], True] := Transpose[{
           N[
            
            Range[$CellContext`startMonth, $CellContext`startMonth + 
             Length[$CellContext`data] - 1]], 
           
           Log[$CellContext`data/$CellContext`getTypescalingFactor[$\
CellContext`dividends, $CellContext`inflation, $CellContext`both]]}], \
$CellContext`getTypescalingFactor[
          Pattern[$CellContext`dividends, 
           Blank[]], 
          Pattern[$CellContext`inflation, 
           Blank[]], 
          Pattern[$CellContext`both, 
           Blank[]]] := 
        N[If[$CellContext`dividends, $CellContext`extraFactorForDividends, 1] 
          If[$CellContext`inflation, $CellContext`extraFactorForInflation, 1] 
          If[$CellContext`both, $CellContext`extraFactorForBoth, 1] If[
            
            And[$CellContext`both, $CellContext`inflation], \
$CellContext`extraFactorForInflationAndBoth, 
            1]], $CellContext`extraFactorForDividends = 
        8, $CellContext`extraFactorForInflation = 
        1/4, $CellContext`extraFactorForBoth = 
        10, $CellContext`extraFactorForInflationAndBoth = 1/4, 
        Attributes[PlotRange] = {ReadProtected}, $CellContext`rangeFill2[{
           Pattern[$CellContext`m1, 
            Blank[]], 
           Pattern[$CellContext`m2, 
            Blank[]]}, {
           Pattern[$CellContext`bottom, 
            Blank[]], 
           Pattern[$CellContext`top, 
            Blank[]]}, 
          Pattern[$CellContext`shift, 
           Blank[]], 
          Pattern[$CellContext`clr1, 
           Blank[]], 
          Pattern[$CellContext`clr2, 
           Blank[]]] := 
        Polygon[{{$CellContext`m1 + $CellContext`shift, $CellContext`bottom}, \
{$CellContext`m2 + $CellContext`shift + 
            0.1, $CellContext`bottom}, {$CellContext`m2 + $CellContext`shift + 
            0.1, $CellContext`top}, {$CellContext`m1 + $CellContext`shift, \
$CellContext`top}}, 
          VertexColors -> {$CellContext`clr1, $CellContext`clr1, \
$CellContext`clr2, $CellContext`clr2}], $CellContext`democraticRange = \
{{-179, -132}, {-83, -36}, {157, 252}, {397, 636}, {733, 828}, {925, 972}, {
         1117, 1212}}, $CellContext`republicanRange = {{-131, -84}, {-35, 
         156}, {253, 396}, {637, 732}, {829, 924}, {973, 1116}, {1213, 
         1308}}, $CellContext`rangeBox[{
           Pattern[$CellContext`m1, 
            Blank[]], 
           Pattern[$CellContext`m2, 
            Blank[]]}, {
           Pattern[$CellContext`bottom, 
            Blank[]], 
           Pattern[$CellContext`top, 
            Blank[]]}, 
          Pattern[$CellContext`shift, 
           Blank[]]] := 
        Line[{{{$CellContext`m1 + $CellContext`shift, $CellContext`bottom}, \
{$CellContext`m1 + $CellContext`shift, $CellContext`top}}}], \
$CellContext`presidentsData = {{
          "Cleveland", "D", {1885, 1888}, {-179, -132}}, {
          "Harrison", "R", {1889, 1892}, {-131, -84}}, {
          "Cleveland", "D", {1893, 1896}, {-83, -36}}, {
          "McKinley", "R", {1897, 1900}, {-35, 12}}, {
          "Roosevelt", "R", {1901, 1908}, {13, 108}}, {
          "Taft", "R", {1909, 1912}, {109, 156}}, {
          "Wilson", "D", {1913, 1920}, {157, 252}}, {
          "Harding", "R", {1921, 1922}, {253, 276}}, {
          "Coolidge", "R", {1923, 1928}, {277, 348}}, {
          "Hoover", "R", {1929, 1932}, {349, 396}}, {
          "Roosevelt", "D", {1933, 1944}, {397, 540}}, {
          "Truman", "D", {1945, 1952}, {541, 636}}, {
          "Eisenhower", "R", {1953, 1960}, {637, 732}}, {
          "Kennedy", "D", {1961, 1962}, {733, 756}}, {
          "Johnson", "D", {1963, 1968}, {757, 828}}, {
          "Nixon", "R", {1969, 1973}, {829, 888}}, {
          "Ford", "R", {1974, 1976}, {889, 924}}, {
          "Carter", "D", {1977, 1980}, {925, 972}}, {
          "Reagan", "R", {1981, 1988}, {973, 1068}}, {
          "Bush", "R", {1989, 1992}, {1069, 1116}}, {
          "Clinton", "D", {1993, 2000}, {1117, 1212}}, {
          "Bush", "R", {2001, 2008}, {1213, 1308}}}, $CellContext`extraTop = 
        7}; Typeset`initDone$$ = True); ReleaseHold[
       HoldComplete[{$CellContext`presidentsData = Map[{
             Part[#, 1], 
             Part[#, 2], {
              Part[#, 3], Part[#, 4] - 1}, {
              $CellContext`yearToJanuary[
               Part[#, 3]], $CellContext`yearToJanuary[Part[#, 4] - 1] + 
              11}}& , {{"Cleveland", "D", 1885, 1889}, {
             "Harrison", "R", 1889, 1893}, {"Cleveland", "D", 1893, 1897}, {
             "McKinley", "R", 1897, 1901}, {"Roosevelt", "R", 1901, 1909}, {
             "Taft", "R", 1909, 1913}, {"Wilson", "D", 1913, 1921}, {
             "Harding", "R", 1921, 1923}, {"Coolidge", "R", 1923, 1929}, {
             "Hoover", "R", 1929, 1933}, {"Roosevelt", "D", 1933, 1945}, {
             "Truman", "D", 1945, 1953}, {"Eisenhower", "R", 1953, 1961}, {
             "Kennedy", "D", 1961, 1963}, {"Johnson", "D", 1963, 1969}, {
             "Nixon", "R", 1969, 1974}, {"Ford", "R", 1974, 1977}, {
             "Carter", "D", 1977, 1981}, {"Reagan", "R", 1981, 1989}, {
             "Bush", "R", 1989, 1993}, {"Clinton", "D", 1993, 2001}, {
             "Bush", "R", 2001, 2009}}]; Null, $CellContext`yearToJanuary[
            Pattern[$CellContext`year, 
             Blank[]]] := 12 ($CellContext`year - 1900) + 1; 
         Null, $CellContext`yearToMonths[
           Pattern[$CellContext`year, 
            Blank[]]] := Range[
           $CellContext`yearToJanuary[$CellContext`year], \
$CellContext`yearToJanuary[$CellContext`year] + 11], {
          HoldComplete[$CellContext`republicanYears = Flatten[
              Map[Apply[Range, 
                Part[#, 3]]& , 
               Select[$CellContext`presidentsData, Part[#, 2] == "R"& ]]]; 
           Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`democraticYears = Flatten[
              Map[Apply[Range, 
                Part[#, 3]]& , 
               Select[$CellContext`presidentsData, Part[#, 2] == "D"& ]]]; 
           Null]}, {
          HoldComplete[$CellContext`republicanMonths = Flatten[
              Map[$CellContext`yearToMonths, $CellContext`republicanYears]]; 
           Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`democraticMonths = Flatten[
              Map[$CellContext`yearToMonths, $CellContext`democraticYears]]; 
           Null]}, $CellContext`accumulateOneMonth[
           Pattern[$CellContext`data, 
            Blank[]]] := {$CellContext`yearToJanuary[
             Part[$CellContext`data, 1, 1, 1]] - 1 + 
           Part[$CellContext`data, 1, 1, 2], 
           Fold[# (#2 + 1)& , 1, 
            Map[Last, $CellContext`data]]}, 
         Null, $CellContext`dowJonesByMonth = {-36, 
            Developer`ToPackedArray[
             N[CompressedData["
1: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
Kwj4H4IfzwI=
              "]]]}; 
         Null, $CellContext`dowJonesByMonthWithDividends = {319, 
            Developer`ToPackedArray[
             N[CompressedData["
1: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
              "]]]}; 
         Null, $CellContext`inflationByMonth = {-42, 
            Developer`ToPackedArray[
             N[CompressedData["
1:eJzVWXk4Vtv395oj81C6pjRIXBGqW2qbRaWoSClDE5rURRSF0IhUVyoppDRp
LpWKyFSISIMGohvJOUrCRb/P6+nc4+G63e8f/vgd+3k+z9pr7bXXXnvtvdZ+
DXdbZ7ecw8PDYybAw3NM7fiLvd8o8r8iT/dH/79FSeewC5P4Bw595DM2aw4g
Lv0YdUh5APH9s5gJl4UGDpWfFFLtfAOHfy15PmxwKzVg2MATnx2OdQwUZj9S
ntgiPnC40n144bEmasCw7a+JSTatA4d8Z5yTHmIdA4UDff8snt1Y1iY4cHhG
TdNaV2jgUK3U68o4voFDq2+GpZmcgUNPbY2JlsoDh22qMQ+VjAYOcw9FOdlP
HDi88MvUz4fHDRyaDDIbs2X8wKFWYJvtlZfUgGEZdXOUTWcjuVs3a92mJxTx
uW1v43eSIquW+Si0WFPEdAPnwo0SigxZ7F1iPoQ992E1vEvWJbH107mYiRY6
kEsT71zx8TFFDrWmUTEmLF/AQC5R7Fj/9dbFs3Rt+FCafPCP/9M/npX7skri
5rmhLD/MdWi4K3DbYZGS8OK++hg+Q9+7vOmgIWid7o8mXwUCjZ1h31ZOp0Az
1iPIJYf0f7+NntZ4OxnyzLjuYY/7zju0+6P/5jM0Mw8j13s+Rj/T35t+nill
thBxNtcj72axdv92xpUF+q82p4l6YClaX/ui/TWkDNEfLOr0lncIS3d+sCTt
2DdmP5l9TPYLnrkLcmf0aypXAvvb/977zvAb3gqrnYe8dRPvIVnYzx292Jvq
sz5Grvd4Bm0CKjfOSOjbz/iV2Zfe/C7edtEP41h/Mv39yTP7Vtz9UX/HDbOP
jL7+/P+zeOmtl6GZOGbifuiYqoiTRRRR0IngPOHO/4MuOlbb4Qhc7ZDoO8qT
IkqFKqsND1MkYE32reZYiniKii0ofUiRmwEPbwQAY+4ta5sRQxGj+gOk/kDf
9X4fvXX/vXyK5I+L6XAD6h4Uni2yjyJfKhpSzPMosvlrfflZB4r4hdbrrYmg
SJBa1YH3DyiyIOCBQwDQRuX86OG7KNIsPslOP5vVn53F/Shi0LFmly0wWjkl
7tV97HvHIXol8L6QSgCdSZFvT8M9GkMo8laila8riCLUt786t9yjyPfuj0Xh
EFU0mqhKCvPzBuNetI5fbqby3+sT7mxC/yL/iXNF6BHyXO9511Y5LFWbyq6H
kWfWxfCVuz9W3/bWd09rlVi6Y480Scr++Tuz97je2J8eZlzITV+XVKBW2rzr
G/9FD4NlxkpoLJ25NuraYNBH+HbaP1OkSdUSgSsnFFl+7npFNJZuy+JEEUXW
b1s6Wpve5VJE3K+jKghYMyny3aRIihS0frKbnUP1mad3f3/IxF1/fCYeGTol
yn6/5L/IMxiutWy4qGP/+hm9P/Mn48ef2dmf33/m//ndHysnPkbG4RbqmpVX
Nz9rn0AT3udBq42AXg+GoeHd6+lCxQINjs/ie6FPkxmb2p7Ig16pOlbpuR5N
Dh/Cp0CT9Qp0ftV4Vm/1Y6u/VNGvEBeV2dYjf453GcZ3Urdv/u1t/9ShXjnX
ptNEtD3k7nHck0z+YPi98wRz7//MX72xt97+8lN/+MZi65iR/0GOyZNe4U8b
s3797/ZtmFtimCDPngudztJxnciztScT/U2gR83Ws8EVfDVRxzwT4APexmZL
LZo00d0f6bQOXnjPjiZXHxTQEWNoYjuH+yGv+7qh0cT/wvU8n9F957XI4l+m
P7NvvxbnPP9VaZqMypsbYjiKJr7bND47In4uCSy6KLCox3oTzwsWS+Gcl2W8
1jWgyfRt+mg0eViWu+31LeSlzZ8+j3hFERd+CzTIGUjlGUDe9VbRJQs1mjzu
GI9Gk5fps9fnS7Lrz7qqPn7va4rEDs6c/CKdInnjx8iNBq3K+1qFF5h+m/ux
54bRm2Cua3MT8zG00W63uA2QKxQRd54uRffb/3bM7TdjQF+WM86yesXq9TbZ
KbhWil2vuo+z8iLQzLgFCXpoGN85HA3+jEpRfYl1XPM/Vr0PtKS7SPBJ0Ip8
Z+/cw3lIyZkxcacxTQYLbst0QV1JS3T//a2fvysIua1vXmGwnXNGMQF5ac0c
+x2XJNi8Jjmt9e22HnpqvCW8tO6z6wiTUvtrXw8+Ix9p3ppbp/zf4/S7edhW
2yqKyHTNbNUD5qp1vPPuobcl6DnfCtCcxVONHHqsY1Freez0HnKnH9qJTQY9
rGvCg5Sqn99/F90X1u6u6qunP7nefpsuMa9o7X+Ypzf+bB0/m7f3OGbdtZz8
yQ7KbB2wWUhRY1g1RWgeCW4jZh3rP37u8TuMxJxGntoedKbTFJ0K0EZRUv75
QHmnsS9vA29NNrJPBdYfF0ejyaKOJC31f8lDLmraE/176GXyCGM3k0+68/I/
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
IaM=
              "]]]}; Null, $CellContext`addInflation[
            Pattern[$CellContext`data, 
             Blank[]]] := 
          Module[{$CellContext`length}, $CellContext`length = Min[
               Length[
                Part[$CellContext`inflationByMonth, 2]], 
               Length[
                Part[$CellContext`data, 2]]]; {
             Part[$CellContext`inflationByMonth, 1] + Length[
                Part[$CellContext`inflationByMonth, 2]] - $CellContext`length,
               Take[
                Part[$CellContext`data, 2], -$CellContext`length]/Take[
               
               Part[$CellContext`inflationByMonth, 
                2], -$CellContext`length]}]; 
         Null, $CellContext`dowJonesByMonthWithInflation = \
$CellContext`addInflation[$CellContext`dowJonesByMonth]; 
         Null, $CellContext`dowJonesByMonthWithDividendsWithInflation = \
$CellContext`addInflation[$CellContext`dowJonesByMonthWithDividends]; Null, {
          HoldComplete[$CellContext`knockoutTable["R"] = ReplacePart[
              Table[0, {1306 + 200}], 
              Transpose[{$CellContext`republicanMonths + 200}] -> 1]; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`knockoutTable["D"] = ReplacePart[
              Table[0, {1306 + 200}], 
              Transpose[{$CellContext`democraticMonths + 200}] -> 1]; 
           Null]}, $CellContext`nullOutMonths[
            Pattern[$CellContext`data, 
             Blank[]], 
            Pattern[$CellContext`party, 
             Blank[]], 
            Pattern[$CellContext`shift, 
             Blank[]]] := $CellContext`data^Take[
             Drop[
              $CellContext`knockoutTable[$CellContext`party], \
-$CellContext`shift], -Length[$CellContext`data]]; 
         Null, $CellContext`getReturns[
            Pattern[$CellContext`party, 
             Blank[]], 
            Pattern[$CellContext`start, 
             Blank[]], 
            Pattern[$CellContext`shift, 
             Blank[]], 
            Pattern[$CellContext`includeDividends, 
             Blank[]], 
            Pattern[$CellContext`includeInflation, 
             Blank[]]] := 
          Module[{$CellContext`dataStart, $CellContext`data}, \
{$CellContext`dataStart, $CellContext`data} = 
             If[$CellContext`includeDividends, 
               
               If[$CellContext`includeInflation, \
$CellContext`dowJonesByMonthWithDividendsWithInflation, \
$CellContext`dowJonesByMonthWithDividends], 
               
               If[$CellContext`includeInflation, \
$CellContext`dowJonesByMonthWithInflation, $CellContext`dowJonesByMonth]]; \
$CellContext`data = Drop[
               If[$CellContext`party === "Both", $CellContext`data, 
                $CellContext`nullOutMonths[$CellContext`data, \
$CellContext`party, $CellContext`shift]], 
               Max[0, $CellContext`start - $CellContext`dataStart]]; {
              Max[$CellContext`start, $CellContext`dataStart], 
              Drop[
               FoldList[# #2& , 1, $CellContext`data], 1]}]; Null, {
          HoldComplete[$CellContext`republicanRange = Map[{
               First[#], 
               Last[#]}& , 
              Split[$CellContext`republicanMonths, #2 == # + 1& ]]; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`democraticRange = Map[{
               First[#], 
               Last[#]}& , 
              Split[$CellContext`democraticMonths, #2 == # + 1& ]]; 
           Null]}, $CellContext`rangeBox[{
            Pattern[$CellContext`m1, 
             Blank[]], 
            Pattern[$CellContext`m2, 
             Blank[]]}, {
            Pattern[$CellContext`bottom, 
             Blank[]], 
            Pattern[$CellContext`top, 
             Blank[]]}, 
           Pattern[$CellContext`shift, 
            Blank[]]] := 
         Line[{{{$CellContext`m1 + $CellContext`shift, $CellContext`bottom}, \
{$CellContext`m1 + $CellContext`shift, $CellContext`top}}}], \
$CellContext`rangeFill[{
            Pattern[$CellContext`m1, 
             Blank[]], 
            Pattern[$CellContext`m2, 
             Blank[]]}, {
            Pattern[$CellContext`bottom, 
             Blank[]], 
            Pattern[$CellContext`top, 
             Blank[]]}, 
           Pattern[$CellContext`shift, 
            Blank[]]] := 
         Rectangle[{$CellContext`m1 + $CellContext`shift, \
$CellContext`bottom}, {$CellContext`m2 + $CellContext`shift + 
            0.1, $CellContext`top}], $CellContext`rangeFill2[{
            Pattern[$CellContext`m1, 
             Blank[]], 
            Pattern[$CellContext`m2, 
             Blank[]]}, {
            Pattern[$CellContext`bottom, 
             Blank[]], 
            Pattern[$CellContext`top, 
             Blank[]]}, 
           Pattern[$CellContext`shift, 
            Blank[]], 
           Pattern[$CellContext`clr1, 
            Blank[]], 
           Pattern[$CellContext`clr2, 
            Blank[]]] := 
         Polygon[{{$CellContext`m1 + $CellContext`shift, \
$CellContext`bottom}, {$CellContext`m2 + $CellContext`shift + 
             0.1, $CellContext`bottom}, {$CellContext`m2 + $CellContext`shift + 
             0.1, $CellContext`top}, {$CellContext`m1 + $CellContext`shift, \
$CellContext`top}}, 
           VertexColors -> {$CellContext`clr1, $CellContext`clr1, \
$CellContext`clr2, $CellContext`clr2}], {
          HoldComplete[$CellContext`topOfRange = 30; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`extraTop = 7; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`startYear = 1897; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`extraFactorForDividends = 8; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`extraFactorForInflation = 1/4; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`extraFactorForBoth = 10; Null], 
          HoldComplete[Null], 
          
          HoldComplete[$CellContext`extraFactorForInflationAndBoth = 1/4; 
           Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`getTypescalingFactor[
             Pattern[$CellContext`dividends, 
              Blank[]], 
             Pattern[$CellContext`inflation, 
              Blank[]], 
             Pattern[$CellContext`both, 
              Blank[]]] := 
           N[If[$CellContext`dividends, $CellContext`extraFactorForDividends, 
               1] If[$CellContext`inflation, \
$CellContext`extraFactorForInflation, 1] 
             If[$CellContext`both, $CellContext`extraFactorForBoth, 1] If[
               
               And[$CellContext`both, $CellContext`inflation], \
$CellContext`extraFactorForInflationAndBoth, 1]]]}, $CellContext`monthToMonth[
           
            Pattern[$CellContext`m, 
             Blank[]]] := 
          Part[{"January", "February", "March", "April", "May", "June", 
             "July", "August", "September", "October", "November", 
             "December"}, 
            Mod[$CellContext`m, 12, 1]]; Null, $CellContext`monthToYear[
            Pattern[$CellContext`y, 
             Blank[]]] := Floor[$CellContext`y/12 + 1900]; 
         Null, $CellContext`formatShiftText[
            Pattern[$CellContext`shift, 
             Blank[]]] := 
          With[{$CellContext`year = 
             Floor[$CellContext`shift/12], $CellContext`month = 
             Mod[$CellContext`shift, 12]}, 
            Style[
             If[$CellContext`year == 0, 
              Row[{$CellContext`month, 
                If[$CellContext`month == 1, " month", " months"]}], 
              Row[{$CellContext`year, 
                
                If[$CellContext`year == 1, " year ", 
                 " years "], $CellContext`month, 
                If[$CellContext`month == 1, " month", " months"]}]], Black]]; 
         Null, $CellContext`formattedShift[
           Pattern[$CellContext`shift, 
            Blank[]]] := PaneSelector[{
            $CellContext`formatShiftText[$CellContext`shift], 
            $CellContext`formatShiftText[35]}, 1, Alignment -> 
           Right], $CellContext`rescaleForPlot[
            Pattern[$CellContext`startMonth, 
             Blank[]], 
            Pattern[$CellContext`data, 
             Blank[]], False, False, False, False] := Transpose[{
             N[
              
              Range[$CellContext`startMonth, $CellContext`startMonth + 
               Length[$CellContext`data] - 1]], $CellContext`data}]; 
         Null, $CellContext`rescaleForPlot[
            Pattern[$CellContext`startMonth, 
             Blank[]], 
            Pattern[$CellContext`data, 
             Blank[]], 
            Pattern[$CellContext`dividends, 
             Blank[]], 
            Pattern[$CellContext`inflation, 
             Blank[]], 
            Pattern[$CellContext`both, 
             Blank[]], False] := Transpose[{
             N[
              
              Range[$CellContext`startMonth, $CellContext`startMonth + 
               Length[$CellContext`data] - 
               1]], $CellContext`data/$CellContext`getTypescalingFactor[$\
CellContext`dividends, $CellContext`inflation, $CellContext`both]}]; 
         Null, $CellContext`rescaleForPlot[
           Pattern[$CellContext`startMonth, 
            Blank[]], 
           Pattern[$CellContext`data, 
            Blank[]], 
           Pattern[$CellContext`dividends, 
            Blank[]], 
           Pattern[$CellContext`inflation, 
            Blank[]], 
           Pattern[$CellContext`both, 
            Blank[]], True] := Transpose[{
            N[
             
             Range[$CellContext`startMonth, $CellContext`startMonth + 
              Length[$CellContext`data] - 1]], 
            
            Log[$CellContext`data/$CellContext`getTypescalingFactor[$\
CellContext`dividends, $CellContext`inflation, $CellContext`both]]}], {
          HoldComplete[
          Attributes[$CellContext`manipulateContents] = {HoldAll}; Null], 
          HoldComplete[Null], 
          HoldComplete[$CellContext`manipulateContents[
             Pattern[$CellContext`shift, 
              Blank[]], 
             Pattern[$CellContext`startY, 
              Blank[]], 
             Pattern[$CellContext`startM, 
              Blank[]], 
             Pattern[$CellContext`logScale, 
              Blank[]], 
             Pattern[$CellContext`dividends, 
              Blank[]], 
             Pattern[$CellContext`inflation, 
              Blank[]], 
             Pattern[$CellContext`both, 
              Blank[]], 
             Pattern[$CellContext`currentRepublicanStartMonth, 
              Blank[]], 
             Pattern[$CellContext`currentRepublicanData, 
              Blank[]], 
             Pattern[$CellContext`currentDemocraticStartMonth, 
              Blank[]], 
             Pattern[$CellContext`currentDemocraticData, 
              Blank[]], 
             Pattern[$CellContext`currentBothStartMonth, 
              Blank[]], 
             Pattern[$CellContext`currentBothData, 
              Blank[]]] := Style[
             Column[{
               Column[{
                 Grid[{{"Choose delay in policy effects:", 
                    Style["0 years", Black], 
                    Slider[
                    Dynamic[$CellContext`shift], {0, 12 12, 1}, ImageSize -> 
                    300], 
                    Style["12 years", Black]}, {
                   "Choose year of investment:", 
                    Style[
                    If[$CellContext`dividends, 1926, $CellContext`startYear], 
                    Black], 
                    Slider[
                    Dynamic[$CellContext`startY], {
                    If[$CellContext`dividends, 1926, $CellContext`startYear], 
                    2007, 1}, ImageSize -> 300], 
                    Style["2007", Black]}, {"Choose month of investment:", 
                    Style["January", Black], 
                    Slider[
                    Dynamic[$CellContext`startM], {1, 12, 1}, ImageSize -> 
                    300], 
                    Style["December", Black]}, {
                    Item[
                    Row[{
                    Checkbox[
                    Dynamic[$CellContext`logScale]], " Log scale    ", 
                    Checkbox[
                    Dynamic[$CellContext`dividends]], 
                    " Include dividend reinvestment    ", 
                    Checkbox[
                    Dynamic[$CellContext`inflation]], 
                    " Include inflation    ", 
                    Checkbox[
                    Dynamic[$CellContext`both]], " Graph both", Null}], 
                    Alignment -> Center], SpanFromLeft, SpanFromLeft, 
                    SpanFromLeft}}, 
                  Alignment -> {{Right, Right, Center, Left}}], 
                 Dynamic[If[$CellContext`dividends, 
                    
                    If[$CellContext`startY < 1926, $CellContext`startY = 
                    1926]]; {$CellContext`currentRepublicanStartMonth, \
$CellContext`currentRepublicanData} = $CellContext`getReturns[
                    "R", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                    1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; {$CellContext`currentDemocraticStartMonth, \
$CellContext`currentDemocraticData} = $CellContext`getReturns[
                    "D", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                    1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; {$CellContext`currentBothStartMonth, \
$CellContext`currentBothData} = $CellContext`getReturns[
                    "Both", $CellContext`yearToJanuary[$CellContext`startY] + \
$CellContext`startM - 
                    1, $CellContext`shift, $CellContext`dividends, \
$CellContext`inflation]; Row[{
                    Grid[{{"Lag time for policy effects:", 
                    $CellContext`formattedShift[$CellContext`shift]}, {
                    "Initial $10000 investment in:", 
                    Style[
                    Row[{
                    $CellContext`monthToMonth[$CellContext`yearToJanuary[$\
CellContext`startY] + $CellContext`startM - 1], " ", 
                    $CellContext`monthToYear[$CellContext`yearToJanuary[$\
CellContext`startY] + $CellContext`startM - 1]}], Black]}}, 
                    Alignment -> {{Right, Right}}], "  ", 
                    Framed[
                    Grid[{{"Current value under Republicans:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentRepublicanData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]]}, {
                    "Current value under Democrats:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentDemocraticData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]]}, {"Current value under Both:", 
                    Style[
                    Row[{"$", 
                    Round[10000 Last[$CellContext`currentBothData]]}], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.6266117341878386, 0.6651560234988937, 
                    0.6578927290760662]]]]}}, 
                    Alignment -> {{Right, Right, Right}}], FrameMargins -> 
                    10]}]]}, Dividers -> {None, {False, True, False}}, 
                Spacings -> {0, 2, 1}], 
               Dynamic[
                
                With[{$CellContext`extraTop = 
                  If[$CellContext`logScale, 0.8, 7], $CellContext`textOffset = 
                  If[$CellContext`logScale, 0.06, 
                    0.5], $CellContext`topScaled = (
                   If[$CellContext`logScale, 
                    Log[#], #]& )[$CellContext`topOfRange]}, 
                 ListLinePlot[{
                   $CellContext`rescaleForPlot[$CellContext`\
currentRepublicanStartMonth, $CellContext`currentRepublicanData, \
$CellContext`dividends, $CellContext`inflation, $CellContext`both, \
$CellContext`logScale], 
                   $CellContext`rescaleForPlot[$CellContext`\
currentDemocraticStartMonth, $CellContext`currentDemocraticData, \
$CellContext`dividends, $CellContext`inflation, $CellContext`both, \
$CellContext`logScale], 
                   If[$CellContext`both, 
                    $CellContext`rescaleForPlot[$CellContext`\
currentBothStartMonth, $CellContext`currentBothData, $CellContext`dividends, \
$CellContext`inflation, $CellContext`both, $CellContext`logScale], {0, 0}]}, 
                  PlotRange -> {{
                    $CellContext`yearToJanuary[$CellContext`startYear], \
$CellContext`yearToJanuary[2008] + 
                    11}, {-1, $CellContext`topScaled + $CellContext`extraTop + \
$CellContext`textOffset/5}}, AxesOrigin -> {
                    $CellContext`yearToJanuary[$CellContext`startYear], 
                    If[$CellContext`logScale, -1, 0]}, ImageSize -> 800, 
                  PlotStyle -> {{
                    AbsoluteThickness[2], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]]}, {
                    AbsoluteThickness[2], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]]}, {
                    AbsoluteThickness[2], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.7029983978027008, 0.7375600823987183, 
                    0.7294728007934691]]]}}, Ticks -> {
                    Table[{
                    $CellContext`yearToJanuary[$CellContext`i], \
$CellContext`i}, {$CellContext`i, $CellContext`startYear + 1, 2008, 4}], 
                    If[$CellContext`logScale, 
                    Append[
                    Table[{
                    Log[$CellContext`i], 
                    
                    Row[{"$", \
$CellContext`getTypescalingFactor[$CellContext`dividends, \
$CellContext`inflation, $CellContext`both] 
                    10000 $CellContext`i}]}, {$CellContext`i, 5, 30, 5}], {
                    0, 
                    Row[{"$", 10000}]}], 
                    Table[{$CellContext`i, 
                    
                    Row[{"$", \
$CellContext`getTypescalingFactor[$CellContext`dividends, \
$CellContext`inflation, $CellContext`both] 
                    10000 $CellContext`i}]}, {$CellContext`i, 5, 30, 5}]]}, 
                  Prolog -> {Antialiasing -> False, 
                    Opacity[1], 
                    Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift, 
                    Setting[
                    ColorSetter[
                    RGBColor[0.8175478751812009, 0.8167696650644694, 1.]]], 
                    Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`democraticRange], 
                    
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.2610055695429923, 0.2947432669565881, 
                    0.7375600823987183]]], 
                    
                    Map[$CellContext`rangeFill2[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0, 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.24509040970473792`, 0.2964370183871214, 
                    0.7451285572594797]]], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.1837949187457084, 0.2225986114290074, 
                    0.5656061646448463]]]]& , $CellContext`democraticRange], 
                    Map[$CellContext`rangeFill2[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift, 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.9502250705729762, 0.7982146944380866, 
                    0.7878995956359197]]], 
                    Setting[
                    ColorSetter[
                    RGBColor[1., 1., 1.]]]]& , $CellContext`republicanRange], 
                    
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.61538109407187, 0.11189440756847487`, 
                    0.11189440756847487`]]], 
                    
                    Map[$CellContext`rangeFill2[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0, 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.6319371328297856, 0.10934615091172656`, 
                    0.10180819409475853`]]], 
                    Setting[
                    ColorSetter[
                    RGBColor[
                    0.4977340352483406, 0.09021133745326924, 
                    0.08480964370183872]]]]& , $CellContext`republicanRange], 
                    
                    Opacity[1], Gray, 
                    Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift]& , \
$CellContext`republicanRange], Gray, 
                    Map[$CellContext`rangeBox[#, {
                    
                    If[$CellContext`logScale, -1, 
                    0], $CellContext`topScaled}, $CellContext`shift]& , \
$CellContext`democraticRange], 
                    Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled}, \
{$CellContext`yearToJanuary[2008] + 11, $CellContext`topScaled}}], 
                    Line[{{
                    $CellContext`yearToJanuary[
                    1850], $CellContext`topScaled + $CellContext`extraTop}, \
{$CellContext`yearToJanuary[2008] + 
                    11, $CellContext`topScaled + $CellContext`extraTop}}], 
                    
                    Map[$CellContext`rangeBox[#, {$CellContext`topScaled, \
$CellContext`topScaled + $CellContext`extraTop}, 0]& , 
                    Map[Last, $CellContext`presidentsData]], White, 
                    Map[Inset[
                    Style[
                    Part[#, 1], 14], {
                    Mean[
                    
                    Part[#, 
                    4]], $CellContext`topScaled + $CellContext`textOffset}, 
                    Scaled[{0, 0.5}], Automatic, {0, 
                    1}]& , $CellContext`presidentsData], Gray, 
                    Map[Inset[
                    Style[
                    Part[#, 1], 14], {Mean[
                    
                    Part[#, 
                    4]] + $CellContext`shift, $CellContext`topScaled - \
$CellContext`textOffset}, 
                    Scaled[{1, 0.5}], Automatic, {0, 
                    1}]& , $CellContext`presidentsData]}]]]}, Center], 
             "Section", 14, Gray]]}}]]; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->503311034],

Cell[CellGroupData[{

Cell["THIS NOTEBOOK IS THE SOURCE CODE FROM", "Text",
 CellFrame->{{0, 0}, {0, 1}},
 CellMargins->{{48, 10}, {4, 28}},
 CellGroupingRules->{"SectionGrouping", 25},
 CellFrameMargins->{{48, 48}, {6, 5}},
 CellFrameColor->RGBColor[0.691905, 0.790311, 0.300252],
 FontFamily->"Helvetica",
 FontSize->10,
 FontWeight->"Bold",
 FontColor->RGBColor[0.691905, 0.790311, 0.300252]],

Cell[TextData[{
 "\"",
 ButtonBox["Stock Market Returns by Party",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/StockMarketReturnsByParty/"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/StockMarketReturnsByParty/"],
 "\"",
 " from ",
 ButtonBox["The Wolfram Demonstrations Project",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/"],
 "\[ParagraphSeparator]\[NonBreakingSpace]",
 ButtonBox["http://demonstrations.wolfram.com/StockMarketReturnsByParty/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/StockMarketReturnsByParty/"], 
    None},
  ButtonNote->"http://demonstrations.wolfram.com/StockMarketReturnsByParty/"]
}], "Text",
 CellMargins->{{48, Inherited}, {0, Inherited}},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.5]],

Cell[" ", "Text",
 CellFrame->{{0, 0}, {0, 1}},
 CellMargins->{{48, 10}, {4, 28}},
 CellGroupingRules->{"SectionGrouping", 25},
 CellFrameMargins->{{48, 48}, {6, 5}},
 CellFrameColor->RGBColor[0.691905, 0.790311, 0.300252],
 FontFamily->"Helvetica",
 FontSize->10,
 FontWeight->"Bold",
 FontColor->RGBColor[0.691905, 0.790311, 0.300252]],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Theodore Gray",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Theodore+Gray"],
     None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Theodore+Gray"]
}], "Text",
 CellDingbat->"\[FilledSmallSquare]",
 CellMargins->{{66, 48}, {2, 4}},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.6],
 CellID->120743449],

Cell[CellGroupData[{

Cell[TextData[{
 "A full-function Wolfram ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 6 system is required to edit this notebook.\n",
 StyleBox[ButtonBox["GET WOLFRAM MATHEMATICA 6 \[RightGuillemet]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/products/mathematica/"], None},
  ButtonNote->"http://www.wolfram.com/products/mathematica/"],
  FontFamily->"Helvetica",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.42, 0]]
}], "Text",
 CellFrame->True,
 CellMargins->{{48, 68}, {8, 28}},
 CellFrameMargins->12,
 CellFrameColor->RGBColor[0.865507, 0.90634, 0.680751],
 CellChangeTimes->{3.3750111182355957`*^9},
 ParagraphSpacing->{1., 1.},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.411765],
 Background->RGBColor[0.986023, 0.991363, 0.969818]],

Cell[TextData[{
 "\[Copyright] ",
 StyleBox[ButtonBox["The Wolfram Demonstrations Project & Contributors",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/"],
  FontColor->GrayLevel[0.6]],
 "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
 StyleBox[ButtonBox["Terms of Use",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/termsofuse.html"], None},
  ButtonNote->"http://demonstrations.wolfram.com/termsofuse.html"],
  FontColor->GrayLevel[0.6]],
 "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
 StyleBox[ButtonBox["Make a new version of this Demonstration \
\[RightGuillemet]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/participate/upload.jsp?id=\
StockMarketReturnsByParty"], None},
  ButtonNote->None],
  FontColor->GrayLevel[0.6]]
}], "Text",
 CellFrame->{{0, 0}, {0, 0.5}},
 CellMargins->{{48, 10}, {20, 50}},
 CellFrameMargins->{{6, 0}, {6, 6}},
 CellFrameColor->GrayLevel[0.6],
 FontFamily->"Verdana",
 FontSize->9,
 FontColor->GrayLevel[0.6]]
}, Open  ]]
}, Open  ]]
},
Editable->True,
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{780, 650},
WindowMargins->{{Inherited, Inherited}, {Inherited, 0}},
WindowElements->{
 "StatusArea", "MemoryMonitor", "MagnificationPopUp", "VerticalScrollBar", 
  "MenuBar"},
WindowTitle->"Stock Market Returns by Party - Source",
DockedCells->{},
CellContext->Notebook,
FrontEndVersion->"6.0 for Microsoft Windows (32-bit) (May 21, 2008)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[590, 23, 221, 4, 70, "Section"],
Cell[814, 29, 2762, 61, 70, "Input",
 InitializationCell->True,
 CellID->1211415192],
Cell[3579, 92, 330, 10, 70, "Input",
 InitializationCell->True,
 CellID->937914426],
Cell[3912, 104, 436, 12, 70, "Input",
 InitializationCell->True,
 CellID->997788802],
Cell[4351, 118, 1637, 44, 70, "Input",
 InitializationCell->True,
 CellID->136595791],
Cell[5991, 164, 885, 20, 70, "Input",
 InitializationCell->True,
 CellID->105440694],
Cell[6879, 186, 972, 27, 70, "Input",
 InitializationCell->True,
 CellID->467735283],
Cell[7854, 215, 1376, 37, 70, "Input",
 InitializationCell->True,
 CellID->579583723],
Cell[9233, 254, 44848, 690, 70, "Input",
 InitializationCell->True,
 CellID->1165427801],
Cell[54084, 946, 18875, 263, 70, "Input",
 CellID->329255061],
Cell[72962, 1211, 39429, 588, 70, "Input",
 InitializationCell->True,
 CellID->1773616583],
Cell[112394, 1801, 1833, 48, 70, "Input",
 InitializationCell->True,
 CellID->1221975256],
Cell[114230, 1851, 481, 10, 70, "Input",
 InitializationCell->True,
 CellID->489108806],
Cell[114714, 1863, 512, 11, 70, "Input",
 InitializationCell->True,
 CellID->1346305985],
Cell[115229, 1876, 1254, 35, 70, "Input",
 InitializationCell->True,
 CellID->774421388],
Cell[116486, 1913, 952, 22, 70, "Input",
 InitializationCell->True,
 CellID->1207611459],
Cell[117441, 1937, 2903, 67, 70, "Input",
 InitializationCell->True,
 CellID->457843616],
Cell[120347, 2006, 1082, 35, 70, "Input",
 InitializationCell->True,
 CellID->543746911],
Cell[121432, 2043, 1086, 27, 70, "Input",
 InitializationCell->True,
 CellID->2110158384],
Cell[122521, 2072, 946, 24, 70, "Input",
 InitializationCell->True,
 CellID->1887013330],
Cell[123470, 2098, 1563, 39, 70, "Input",
 InitializationCell->True,
 CellID->771814071],
Cell[125036, 2139, 2316, 50, 70, "Input",
 InitializationCell->True,
 CellID->994538414],
Cell[127355, 2191, 719, 19, 70, "Input",
 InitializationCell->True,
 CellID->1339466103],
Cell[128077, 2212, 333, 10, 70, "Input",
 InitializationCell->True,
 CellID->335721620],
Cell[128413, 2224, 1525, 41, 70, "Input",
 InitializationCell->True,
 CellID->1341899497],
Cell[129941, 2267, 523, 13, 70, "Input",
 InitializationCell->True,
 CellID->431585285],
Cell[130467, 2282, 849, 22, 70, "Input",
 InitializationCell->True,
 CellID->1499900056],
Cell[131319, 2306, 1317, 30, 70, "Input",
 InitializationCell->True,
 CellID->1722391799],
Cell[132639, 2338, 1296, 30, 70, "Input",
 InitializationCell->True,
 CellID->159404233],
Cell[133938, 2370, 27706, 611, 70, "Input",
 InitializationCell->True,
 CellID->758721852],
Cell[161647, 2983, 7373, 122, 70, "Input",
 CellID->1601609076]
}, Open  ]],
Cell[169035, 3108, 191528, 3476, 70, "Output",
 CellID->503311034],
Cell[CellGroupData[{
Cell[360588, 6588, 373, 9, 70, "Text",
 CellGroupingRules->{"SectionGrouping", 25}],
Cell[360964, 6599, 945, 27, 70, "Text"],
Cell[361912, 6628, 337, 9, 70, "Text",
 CellGroupingRules->{"SectionGrouping", 25}],
Cell[362252, 6639, 456, 15, 70, "Text",
 CellID->120743449],
Cell[CellGroupData[{
Cell[362733, 6658, 829, 24, 70, "Text"],
Cell[363565, 6684, 1201, 33, 70, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
(* NotebookSignature xSNFGTRWyDWutCD6m5EGGNfi *)
